<?xml version="1.0" encoding="UTF-8"?>
<snapshot methodcount="900" methodscovered="328" statementcount="3838" statementscovered="2412" totalcount="4738" totalcovered="2740">
  <package name="com.makeabyte.agilephp" methodcount="254" methodscovered="69" statementcount="755" statementscovered="318" totalcount="1009" totalcovered="387">
    <class name="FrameworkException" methodcount="1" methodscovered="1" statementcount="6" statementscovered="6" totalcount="7" totalcovered="7">
      <sourcefile name="FrameworkException.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/FrameworkException.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Base AgilePHP exception class</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> * @throws FrameworkException</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class FrameworkException extends Exception {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new instance of FrameworkException.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The exception message</sourceline>
        <sourceline coveredcount="0">	   * @param Integer $code Optional error code.</sourceline>
        <sourceline coveredcount="0">	   * @param String $file Optional file path to the exception</sourceline>
        <sourceline coveredcount="0">	   * @param Integer $line The line number the exception / error occurred</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct($message = null, $code = null, $file = null, $line = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">	         $error = error_get_last();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">			 $this-&gt;message = $message ? (string)$message : (string)$error['message'];</sourceline>
        <sourceline coveredcount="6">	  		 $this-&gt;code = $code ? (int)$code : (int)$error['type'];</sourceline>
        <sourceline coveredcount="6">	  		 $this-&gt;file = $file ? (string)$file : (string)$error['file'];</sourceline>
        <sourceline coveredcount="6">  		 	 $this-&gt;line = $line ? (int)$line : (int)$error['line'];</sourceline>
        <sourceline coveredcount="6">	  		 $this-&gt;trace = debug_backtrace();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Form" methodcount="18" methodscovered="0" statementcount="0" statementscovered="0" totalcount="18" totalcovered="0">
      <sourcefile name="Form.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Form.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Generates a form by reverse engineering the specified domain model.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class Form {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $model;</sourceline>
        <sourceline coveredcount="0">	  private $id;</sourceline>
        <sourceline coveredcount="0">	  private $name;</sourceline>
        <sourceline coveredcount="0">	  private $action;</sourceline>
        <sourceline coveredcount="0">	  private $enctype;</sourceline>
        <sourceline coveredcount="0">	  private $request_token;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $mode;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new instance of Form.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $model Optional domain model instance used to create the form fields</sourceline>
        <sourceline coveredcount="0">	   * @param String $id Optional form id</sourceline>
        <sourceline coveredcount="0">	   * @param String $name Optional form name</sourceline>
        <sourceline coveredcount="0">	   * @param String $action Optional form action</sourceline>
        <sourceline coveredcount="0">	   * @param String $enctype Optional form enctype</sourceline>
        <sourceline coveredcount="0">	   * @param String $request_token Optional AgilePHP request token</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct($model = null, $id = null, $name = null,</sourceline>
        <sourceline coveredcount="0">	  						$action = null, $enctype = null, $request_token = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;model = $model;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;id = $id;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;action = $action;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;enctype = $enctype;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;request_token = $request_token;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the domain model that is used to create the form</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Object $model The domain model object used to create the form</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setModel($model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;model = $model;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the domain model instance being used to create the form.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Object The domain model instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getModel() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;model;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the form presentation mode.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $mode The presentation mode (persist|merge).</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setMode($mode) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;mode = $mode;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the form presentation mode.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The presentation mode of the form (persist|merge)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getMode() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;mode;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the HTML id attribute value.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $id The form's id</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setId($id) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;id = $id;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the form's id attribute value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The id value</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getId() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;id;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the HTML name attribute value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $name The form's name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the form's HTML name attribute value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The form's name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the form action attribute value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $action The form's action</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setAction($action) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;action = $action;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the forms action attribute value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The controller action method</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getAction() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;action;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the form's enctype attribute value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $enctype The form's enctype</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setEnctype($enctype) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;enctype = $enctype;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the form's enctype attribute value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The form's enctype</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getEnctype() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;enctype;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the anti-CSFR token to render within the form. Note that the CSFR token</sourceline>
        <sourceline coveredcount="0">	   * should be different on every form!</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $token CSFR token as supplied by RequestScope-&gt;getToken().</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @see RequestScope::createToken()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setRequestToken($token) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;request_token = $token;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the anti-CSFR token</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String anti-CSFR token specific to the form</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getRequestToken() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;request_token;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the form in HTML format</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The HTML generated form</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getHTML($pkeyValues = null, $page = 1) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if(!is_object($this-&gt;getModel())) throw new FrameworkException('Valid domain model required');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     $id = $this-&gt;id == null ? '' : ' id="' . $this-&gt;id . '" ';</sourceline>
        <sourceline coveredcount="0">	  	     $name = $this-&gt;name == null ? '' : ' name="' . $this-&gt;name . '" ';</sourceline>
        <sourceline coveredcount="0">	  	     $action = $this-&gt;action == null ? '' : ' action="' . $this-&gt;action . '" ';</sourceline>
        <sourceline coveredcount="0">	  	     $enctype = $this-&gt;enctype == null ? '' : ' enctype="' . $this-&gt;enctype . '" ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $html = '&lt;form ' . $id . $name . $action . $enctype . ' method="post"&gt;';</sourceline>
        <sourceline coveredcount="0">	  		 $html .= '&lt;table class="agilephpGeneratedTable" border="0"&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $table = ORM::getTableByModel($this-&gt;model);</sourceline>
        <sourceline coveredcount="0">	  		 foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		 if(!$column-&gt;isVisible()) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		  $name = $column-&gt;getModelPropertyName();</sourceline>
        <sourceline coveredcount="0">			  		  $displayName = $column-&gt;getViewDisplayName();</sourceline>
        <sourceline coveredcount="0">			  		  $accessor = 'get' . ucfirst($name);</sourceline>
        <sourceline coveredcount="0">			  		  $value = $this-&gt;getModel()-&gt;$accessor();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		  $html .= '&lt;tr&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  				  if(!$column-&gt;isVisible()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		  	 if($column-&gt;isPrimaryKey())</sourceline>
        <sourceline coveredcount="0">		 	      	  	   $xsl .= '&lt;input type="hidden" name="' . $name . '" value="' . $value . '"/&gt;';</sourceline>
        <sourceline coveredcount="0">	  		 		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		  // Process foreign keys first</sourceline>
        <sourceline coveredcount="0">			  		  else if($column-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		  	  $html .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">			  		  	  		    &lt;td&gt;' . $this-&gt;getForeignKeySelection($column-&gt;getForeignKey()) . '&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">			  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  		 	      	  // Primary key during merge is read only</sourceline>
        <sourceline coveredcount="0">  		 	      	  else if($column-&gt;isPrimaryKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  		 	      	  	  $html .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">  		 	      	      $html .= ($this-&gt;getMode() == 'merge') ?</sourceline>
        <sourceline coveredcount="0">  		 	      	  	  	  			'&lt;td&gt;&lt;input type="text" readonly="true" name="' . $name . '" value="' . $value . '"/&gt;&lt;/td&gt;'</sourceline>
        <sourceline coveredcount="0">  		 	      	  	  	  			: '&lt;td&gt;&lt;input type="text" name="' . $name . '" value="' . $value . '"/&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">  		 	      	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  		 	      	  // Password field</sourceline>
        <sourceline coveredcount="0">  		 	      	  else if($column-&gt;getType() == 'password' || $column-&gt;getName() == 'password' || $column-&gt;getProperty() == 'password') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  		 	      	      $html .= '&lt;td&gt;Password&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">  		 	      	      			&lt;td&gt;&lt;input type="password" name="password1" value="' . $value . '"/&gt;&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">  		 	      	      		&lt;/tr&gt;</sourceline>
        <sourceline coveredcount="0">  		 	      	      		&lt;tr&gt;</sourceline>
        <sourceline coveredcount="0">  		 	      	      			&lt;td&gt;Confirm&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">  		 	      	      			&lt;td&gt;</sourceline>
        <sourceline coveredcount="0">  		 	      	      				&lt;input type="password" name="password2" value="' . $value . '"/&gt;</sourceline>
        <sourceline coveredcount="0">  		 	      	      				&lt;input type="hidden" name="oldPassword" value="' . $value . '"/&gt;</sourceline>
        <sourceline coveredcount="0">  		 	      	      			&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">  		 	      	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  		 	      	  // Auto-increment</sourceline>
        <sourceline coveredcount="0">  		 	      	  else if($column-&gt;isAutoIncrement()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  		 	      	  	  $html .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">						  $html .= ($this-&gt;getMode() == 'merge') ?</sourceline>
        <sourceline coveredcount="0">  		 	      	  	  	  			'&lt;td&gt;&lt;input type="text" readonly="true" name="' . $name . '" value="' . $value . '"/&gt;&lt;/td&gt;'</sourceline>
        <sourceline coveredcount="0">  		 	      	  	  	  			: '&lt;td&gt;&lt;input type="text" name="' . $name . '" value="' . $value . '"/&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">  		 	      	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  		 	      	  // Checkbox</sourceline>
        <sourceline coveredcount="0">					  else if($column-&gt;getType() == 'boolean') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  	  $html .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">					  	  $html .= ($value == 1) ?</sourceline>
        <sourceline coveredcount="0">						                '&lt;td&gt;&lt;input type="checkbox" checked="true" name="' . $name . '" value="1"/&gt;&lt;/td&gt;'</sourceline>
        <sourceline coveredcount="0">					  	  	       		: '&lt;td&gt;&lt;input type="checkbox" checked="true" name="' . $name . '" value="0"/&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">					  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  // Textarea</sourceline>
        <sourceline coveredcount="0">					  else if($column-&gt;getType() == 'text') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						  $html .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">						  			&lt;td&gt;&lt;textarea rows="10" name="' . stripslashes($name) . '"&gt;&lt;/textarea&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">					  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  // File upload</sourceline>
        <sourceline coveredcount="0">					  else if($column-&gt;getType() == 'blob') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						  $html .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">						  			&lt;td&gt;&lt;input type="file" name="' . $name . '" value="' . $value . '"/&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">						  continue;</sourceline>
        <sourceline coveredcount="0">					  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  // Default element (textfield)</sourceline>
        <sourceline coveredcount="0">					  else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		  		  $html .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">		  		  		  			&lt;td&gt;&lt;input type="text" name="' . $name . '" value="' . stripslashes($value) . '"/&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">					  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  		  $html .= '&lt;/tr&gt;';</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $html .= '&lt;tr&gt;</sourceline>
        <sourceline coveredcount="0"> 						&lt;td&gt; &lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">						&lt;td&gt;';</sourceline>
        <sourceline coveredcount="0">	  		 $html .= $this-&gt;getMode() == 'persist' ? '&lt;input type="submit" value="Create"/&gt; &lt;input type="button" value="Cancel" onclick="javascript:history.go(-1);"/&gt;'</sourceline>
        <sourceline coveredcount="0">        							 : '&lt;input type="submit" value="Update"/&gt;</sourceline>
        <sourceline coveredcount="0">									   &lt;input type="button" value="Delete" onclick="javascript:AgilePHP.ORM.confirmDelete(\'' . AgilePHP::getRequestBase() .</sourceline>
        <sourceline coveredcount="0">        							   '\', \'' . $pkeyValues . '\', \'' . $page . '\', \'delete\')"/&gt;</sourceline>
        <sourceline coveredcount="0">        							   &lt;input type="button" value="Cancel" onclick="javascript:history.go(-1);"/&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        	 $html .= '&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">							&lt;/tr&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if($token = $this-&gt;getRequestToken())</sourceline>
        <sourceline coveredcount="0">	  		 	$html .= '&lt;input type="hidden" name="AGILEPHP_REQUEST_TOKEN" value="' . $token . '"/&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $html .= '&lt;/form&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $html;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an HTML select drop-down which contains a list</sourceline>
        <sourceline coveredcount="0">	   * of values for foreign key columns.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param ForeignKey $foreignKey Foreign key column instance</sourceline>
        <sourceline coveredcount="0">	   * @param int $limit Total number of foreign key reference rows to return</sourceline>
        <sourceline coveredcount="0">	   * @return String The populated HTML &lt;select&gt; element</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getForeignKeySelection(ForeignKey $foreignKey, $limit = 100000) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 //$selectedColumn = $foreignKey-&gt;getSelectedColumnInstance();</sourceline>
        <sourceline coveredcount="0">	  		 $selectedProperty = $foreignKey-&gt;getSelectedColumnInstance()-&gt;getModelPropertyName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   			 // Create an instance of the foreign model</sourceline>
        <sourceline coveredcount="0">   			 $foreignInstance = $foreignKey-&gt;getReferencedTableInstance()-&gt;getModelInstance();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   			 // Find all foreign models by distinct parent column name</sourceline>
        <sourceline coveredcount="0">   			 $maxResults = ORM::getMaxResults();</sourceline>
        <sourceline coveredcount="0">   			 ORM::setMaxResults($limit);</sourceline>
        <sourceline coveredcount="0">          	 $foreignModels = ORM::find($foreignInstance);</sourceline>
        <sourceline coveredcount="0">          	 ORM::setMaxResults($maxResults);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 // The actual foreign key property name in the child table</sourceline>
        <sourceline coveredcount="0">          	 $property = $foreignKey-&gt;getColumnInstance()-&gt;getModelPropertyName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 if($foreignKey-&gt;getColumnInstance()-&gt;isPrimaryKey() &amp;&amp; $this-&gt;getMode() != 'persist')</sourceline>
        <sourceline coveredcount="0">          	     $html = '&lt;select name="' . $property . '" disabled="disabled"&gt;';</sourceline>
        <sourceline coveredcount="0">          	 else</sourceline>
        <sourceline coveredcount="0">          	   	 $html = '&lt;select name="' . $property . '"&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 $html .= '&lt;option value="NULL"&gt;Choose...&lt;/option&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 // Create each of the option values. If the foreign key value matches the</sourceline>
        <sourceline coveredcount="0">          	 // selected foreign model property value, the item is shown as the default.</sourceline>
        <sourceline coveredcount="0">          	 foreach($foreignModels as $fModel) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 		 $fAccessor = 'get' . ucfirst($selectedProperty);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 		 // php namespace support</sourceline>
        <sourceline coveredcount="0">     	   	   		 $namespace = explode('\\', $foreignKey-&gt;getReferencedTableInstance()-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">     	   	   		 $model = $namespace[count($namespace)-1];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 		 $fkInstanceAccessor = 'get' . ucfirst($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 		 if(is_object($this-&gt;getModel()-&gt;$fkInstanceAccessor()) &amp;&amp;</sourceline>
        <sourceline coveredcount="0">          	 		  			$this-&gt;getModel()-&gt;$fkInstanceAccessor()-&gt;$fAccessor() == $fModel-&gt;$fAccessor()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 		    // Assign primary key values delimited by underscore _ character</sourceline>
        <sourceline coveredcount="0">          	 		    $primaryKeys = $foreignKey-&gt;getReferencedTableInstance()-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">	          	 		$pkeys = '';</sourceline>
        <sourceline coveredcount="0">	          	 		for($i=0; $i&lt;count($primaryKeys); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	          	 		    $idAccessor = 'get' . ucfirst($primaryKeys[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	          	 		    $pkeys .= $this-&gt;getModel()-&gt;$fkInstanceAccessor()-&gt;$idAccessor();</sourceline>
        <sourceline coveredcount="0">	          	 		  	$pkeys .= (((count($primaryKeys)-1) == $i)) ? '' : '_';</sourceline>
        <sourceline coveredcount="0">	          	 		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	          	 		$value = mb_convert_encoding(htmlspecialchars($fModel-&gt;$fAccessor()), 'UTF-8', 'ISO-8859-1');</sourceline>
        <sourceline coveredcount="0">          	 		  	$html .= '&lt;option value="' . $pkeys . '" selected="yes"&gt;' . $value . '&lt;/option&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 		  	// Primary keys should not be altered, however, shown for informational purposes</sourceline>
        <sourceline coveredcount="0">          	 		  	if($foreignKey-&gt;getColumnInstance()-&gt;isPrimaryKey() &amp;&amp; $this-&gt;getMode() != 'persist') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 		  	   $html .= '&lt;/select&gt;&lt;input type="hidden" name="' . $property . '" value="' . $pkeys . '"/&gt;';</sourceline>
        <sourceline coveredcount="0">          	 		  	   return $html;</sourceline>
        <sourceline coveredcount="0">          	 		  	}</sourceline>
        <sourceline coveredcount="0">          	 		}</sourceline>
        <sourceline coveredcount="0">          	 		else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	          	 		// Assign primary key values delimited by underscore _ character</sourceline>
        <sourceline coveredcount="0">          	 		  	$primaryKeys = $foreignKey-&gt;getReferencedTableInstance()-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">	          	 		$pkeys = '';</sourceline>
        <sourceline coveredcount="0">	          	 		for($i=0; $i&lt;count($primaryKeys); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	          	 		  	$idAccessor = 'get' . ucfirst($primaryKeys[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	          	 			$pkeys .= $fModel-&gt;$idAccessor();</sourceline>
        <sourceline coveredcount="0">	          	 		  	$pkeys .= (((count($primaryKeys)-1) == $i)) ? '' : '_';</sourceline>
        <sourceline coveredcount="0">	          	 		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	          	 		$value = mb_convert_encoding(htmlspecialchars($fModel-&gt;$fAccessor()), 'UTF-8', 'ISO-8859-1');</sourceline>
        <sourceline coveredcount="0">          	 			$html .= '&lt;option value="' . $pkeys . '"&gt;' . $value . '&lt;/option&gt;';</sourceline>
        <sourceline coveredcount="0">          	 		}</sourceline>
        <sourceline coveredcount="0">          	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 $html .= '&lt;/select&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">          	 return $html;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the form in XSL format</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $pkeyValues The primary key values for the ActiveRecord displayed in the form. Multiple</sourceline>
        <sourceline coveredcount="0">	   * 						   primary keys must be separated by an underscore _ character. Default is null</sourceline>
        <sourceline coveredcount="0">	   * @param Integer $page The list page number to return the user after the form is submitted. Default is 1.</sourceline>
        <sourceline coveredcount="0">	   * @return String XSL formatted form</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getXSL($pkeyValues = null, $page = 1) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	 	  	 $id = $this-&gt;id == null ? '' : ' id="' . $this-&gt;id . '" ';</sourceline>
        <sourceline coveredcount="0">	  	     $name = $this-&gt;name == null ? '' : ' name="' . $this-&gt;name . '" ';</sourceline>
        <sourceline coveredcount="0">	  	     $action = $this-&gt;action == null ? '' : ' action="' . $this-&gt;action . '" ';</sourceline>
        <sourceline coveredcount="0">	  	     $enctype = $this-&gt;enctype == null ? '' : ' enctype="' . $this-&gt;enctype . '" ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $xsl = '&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;</sourceline>
        <sourceline coveredcount="0">	  		 		 	&lt;xsl:template match="Form"&gt;</sourceline>
        <sourceline coveredcount="0">	  		 		 		&lt;form ' . $id . $name . $action . $enctype . ' method="post"&gt;</sourceline>
        <sourceline coveredcount="0">	  		 		 			&lt;table class="agilephpGeneratedTable" border="0"&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						  		 $table = ORM::getTableByModel($this-&gt;model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						  		 $namespace = explode('\\', $table-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">     		   	   				 $model = array_pop($namespace);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						  		 foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								  		 $name = $column-&gt;getModelPropertyName();</sourceline>
        <sourceline coveredcount="0">								  		 $displayName = $column-&gt;getViewDisplayName();</sourceline>
        <sourceline coveredcount="0">								  		 $accessor = 'get' . ucfirst($name);</sourceline>
        <sourceline coveredcount="0">			  		  					 $value = $this-&gt;getModel()-&gt;$accessor();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								  		  $xsl .= '&lt;tr&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						  		 		  if(!$column-&gt;isVisible()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						  		 		  	 if($column-&gt;isPrimaryKey())</sourceline>
        <sourceline coveredcount="0">					  		 	      	  	  	$xsl .= '&lt;input type="hidden" name="' . $name . '" value="{/Form/' . $model . '/' . $name . '}"/&gt;';</sourceline>
        <sourceline coveredcount="0">						  		 		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								  		  // Process foreign keys first</sourceline>
        <sourceline coveredcount="0">								  		  else if($column-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								  		  	  $xsl .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">								  		  	  		   &lt;td&gt;' . $this-&gt;getForeignKeySelection($column-&gt;getForeignKey()) . '&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">								  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  		 	      	  // Primary key during merge is read only</sourceline>
        <sourceline coveredcount="0">					  		 	      	  else if($column-&gt;isPrimaryKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  		 	      	  	  $xsl .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">					  		 	      	      $xsl .= ($this-&gt;getMode() == 'merge') ?</sourceline>
        <sourceline coveredcount="0">					  		 	      	  	  	  			'&lt;td&gt;&lt;input type="text" readonly="true" name="' . $name . '" value="{/Form/' . $model . '/' . $name . '}"/&gt;&lt;/td&gt;'</sourceline>
        <sourceline coveredcount="0">					  		 	      	  	  	  			: '&lt;td&gt;&lt;input type="text" name="' . $name . '" value="{/Form/' . $model . '/' . $name . '}"/&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">					  		 	      	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  		 	      	  // Password field</sourceline>
        <sourceline coveredcount="0">					  		 	      	  else if($column-&gt;getType() == 'password' || $column-&gt;getName() == 'password' || $column-&gt;getProperty() == 'password') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  		 	      	      $xsl .= '&lt;td&gt;Password&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">					  		 	      	      		   &lt;td&gt;&lt;input type="password" name="password1" value="{/Form/' . $model . '/' . $name . '}"/&gt;&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">					  		 	      	      		 &lt;/tr&gt;</sourceline>
        <sourceline coveredcount="0">					  		 	      	      		 &lt;tr&gt;</sourceline>
        <sourceline coveredcount="0">					  		 	      	      		   	&lt;td&gt;Confirm&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">					  		 	      	      		    &lt;td&gt;</sourceline>
        <sourceline coveredcount="0">					  		 	      	      		    	&lt;input type="password" name="password2" value="{/Form/' . $model . '/' . $name . '}"/&gt;</sourceline>
        <sourceline coveredcount="0">					  		 	      	      		    	&lt;input type="hidden" name="oldPassword" value="{/Form/' . $model . '/' . $name . '}"/&gt;</sourceline>
        <sourceline coveredcount="0">					  		 	      	      		    &lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">					  		 	      	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  		 	      	  // Auto-increment</sourceline>
        <sourceline coveredcount="0">					  		 	      	  else if($column-&gt;isAutoIncrement()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  		 	      	  	  $xsl .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">											  $xsl .= ($this-&gt;getMode() == 'merge') ?</sourceline>
        <sourceline coveredcount="0">					  		 	      	  	  	  			'&lt;td&gt;&lt;input type="text" readonly="true" name="' . $name . '" value="{/Form/' . $model . '/' . $name . '}"/&gt;&lt;/td&gt;'</sourceline>
        <sourceline coveredcount="0">					  		 	      	  	  	  			: '&lt;td&gt;&lt;input type="text" name="' . $name . '" value="{/Form/' . $model . '/' . $name . '}"/&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">					  		 	      	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  		 	      	  // Checkbox</sourceline>
        <sourceline coveredcount="0">										  else if($column-&gt;getType() == 'boolean') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										  	  $xsl .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										  	  // enabled</sourceline>
        <sourceline coveredcount="0">										  	  $xsl .= '&lt;xsl:if test="/Form/' . $model . '/' . $name . ' = \'Yes\'"&gt;';</sourceline>
        <sourceline coveredcount="0">										  	  		$xsl .= '&lt;td&gt;&lt;input type="checkbox" checked="true" name="' . $name . '" value="1"/&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">										  	  $xsl .= '&lt;/xsl:if&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										  	  // disabled</sourceline>
        <sourceline coveredcount="0">										  	  $xsl .= '&lt;xsl:if test="/Form/' . $model . '/' . $name . ' != \'Yes\'"&gt;';</sourceline>
        <sourceline coveredcount="0">										  	  		$xsl .= '&lt;td&gt;&lt;input type="checkbox" name="' . $name . '" value="1"/&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">										  	  $xsl .= '&lt;/xsl:if&gt;';</sourceline>
        <sourceline coveredcount="0">										  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						  		 		  // Textarea</sourceline>
        <sourceline coveredcount="0">										  else if($column-&gt;getType() == 'text') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										  	  $xslValue = mb_convert_encoding(html_entity_decode($value), 'UTF-8', 'ISO-8859-1');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											  $xsl .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">											  		   &lt;td&gt;&lt;textarea rows="10" name="' . $name . '"&gt;';</sourceline>
        <sourceline coveredcount="0">											  				if(!$xslValue) $xsl .= '&lt;xsl:comment/&gt;';</sourceline>
        <sourceline coveredcount="0">											  				$xsl .= '&lt;xsl:value-of select="/Form/' . $model . '/' . $name . '"/&gt;&lt;/textarea&gt;</sourceline>
        <sourceline coveredcount="0">							  		 				   &lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">										  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										  // File upload</sourceline>
        <sourceline coveredcount="0">										  else if($column-&gt;getType() == 'blob') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											  $xsl .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											  $xsl .= ($this-&gt;getMode() == 'merge') ?</sourceline>
        <sourceline coveredcount="0">											  	           '&lt;td&gt;&lt;img border="0" height="30" width="200" src="{/Form/' . $model . '/' . $name . '}"/&gt;</sourceline>
        <sourceline coveredcount="0">											  	               &lt;br/&gt;</sourceline>
        <sourceline coveredcount="0">											  	  		       &lt;input type="file" name="' . $name . '" value="{/Form/' . $model . '/' . $name . '}"/&gt;</sourceline>
        <sourceline coveredcount="0">											  	  		   &lt;/td&gt;'</sourceline>
        <sourceline coveredcount="0">											  	  		   : '&lt;td&gt;&lt;input type="file" name="' . $name . '" value="{/Form/' . $model . '/' . $name . '}"/&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">										  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										  // Default element (textfield)</sourceline>
        <sourceline coveredcount="0">										  else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							  		  		  $xsl .= '&lt;td&gt;' . $displayName . '&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">							  		  		  		   &lt;td&gt;&lt;input type="text" name="' . $name . '" value="{/Form/' . $model . '/' . $name . '}"/&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">										  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						  		  		  $xsl .= '&lt;/tr&gt;';</sourceline>
        <sourceline coveredcount="0">						  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		   $xsl .= '&lt;tr&gt;</sourceline>
        <sourceline coveredcount="0">		 				  &lt;td&gt; &lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">						  &lt;td&gt;';</sourceline>
        <sourceline coveredcount="0">        	              $xsl .= $this-&gt;getMode() == 'persist' ? '&lt;input type="submit" value="Create"/&gt; &lt;input type="button" value="Cancel" onclick="javascript:history.go(-1);"/&gt;'</sourceline>
        <sourceline coveredcount="0">        				        						 : '&lt;input type="submit" value="Update"/&gt;</sourceline>
        <sourceline coveredcount="0">															&lt;input type="button" value="Delete" onclick="javascript:AgilePHP.ORM.confirmDelete(\'' . AgilePHP::getRequestBase() .</sourceline>
        <sourceline coveredcount="0">        													   '\', \'' . $pkeyValues . '\', \'' . $page .</sourceline>
        <sourceline coveredcount="0">        													   '\', \'{/Form/controller}\', \'delete\')"/&gt;</sourceline>
        <sourceline coveredcount="0">        													   &lt;input type="button" value="Cancel" onclick="javascript:history.go(-1);"/&gt;';</sourceline>
        <sourceline coveredcount="0">			   $xsl .= '  &lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">				        &lt;/tr&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		   if($token = $this-&gt;getRequestToken())</sourceline>
        <sourceline coveredcount="0">	  		 	  $xsl .= '&lt;input type="hidden" name="AGILEPHP_REQUEST_TOKEN" value="' . $token . '"/&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		   $xsl .= '  &lt;/table&gt;</sourceline>
        <sourceline coveredcount="0">	  		   			 &lt;/form&gt;</sourceline>
        <sourceline coveredcount="0">		  		        &lt;/xsl:template&gt;</sourceline>
        <sourceline coveredcount="0">					  &lt;/xsl:stylesheet&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		   Log::debug($xsl);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		   return $xsl;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	  public function getJSON() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $js = '{ form : {</sourceline>
        <sourceline coveredcount="0">	  		 					"id" : "' . $this-&gt;id == null ? '' : $this-&gt;id . ',</sourceline>
        <sourceline coveredcount="0">	  	     					"name" : "' . $this-&gt;name == null ? '' : $this-&gt;name . ',</sourceline>
        <sourceline coveredcount="0">	  	     					"action" : "' . $this-&gt;action == null ? '' : $this-&gt;action . ',</sourceline>
        <sourceline coveredcount="0">	  	     					"enctype" : "' . $this-&gt;enctype == null ? '' : $this-&gt;enctype . '</sourceline>
        <sourceline coveredcount="0">	  						 }</sourceline>
        <sourceline coveredcount="0">	   				}';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $js;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">	  */</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="AgilePHP" methodcount="31" methodscovered="8" statementcount="212" statementscovered="89" totalcount="243" totalcovered="97">
      <sourcefile name="AgilePHP.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/AgilePHP.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">require 'FrameworkException.php';</sourceline>
        <sourceline coveredcount="0">require 'MVC.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP core framework</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> * @static</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">final class AgilePHP {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private static $displayPhpErrors = true;</sourceline>
        <sourceline coveredcount="0">      private static $webroot;                    // The full system path to the web application</sourceline>
        <sourceline coveredcount="0">      private static $frameworkRoot;              // The full system path to the location of the AgilePHP framework</sourceline>
        <sourceline coveredcount="0">      private static $documentRoot;               // The relative path to the web app from the server's document root.</sourceline>
        <sourceline coveredcount="0">      private static $requestBase;                // The base request URL (used to communicate with MVC component)</sourceline>
        <sourceline coveredcount="0">      private static $debugMode = false;          // Whether or not this component is running in debug mode</sourceline>
        <sourceline coveredcount="0">      private static $xml;                        // AgilePHP configuration - agilephp.xml</sourceline>
        <sourceline coveredcount="0">      private static $appName;                    // Name of the AgilePHP application</sourceline>
        <sourceline coveredcount="0">      private static $interceptions = array();    // An array of interceptions which have occurred during __autoload</sourceline>
        <sourceline coveredcount="0">      private static $startTime;                  // Used with startClock and stopClock methods</sourceline>
        <sourceline coveredcount="0">      private static $cacher;                     // Stores a CacheProvider instance if configured in agilephp.xml</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private function __construct() { }</sourceline>
        <sourceline coveredcount="0">      private function __clone() { }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Initalize the AgilePHP framework. Sets the following defaults \n</sourceline>
        <sourceline coveredcount="0">       * $webroot = current working directory (of the script that instantiated the framework)</sourceline>
        <sourceline coveredcount="0">       * $requestBase = name of the script that instantiated the framework</sourceline>
        <sourceline coveredcount="0">       * $frameworkRoot = $webroot/AgilePHP</sourceline>
        <sourceline coveredcount="0">       * $appName = The HTTP HOST header value</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function init($agilephpDotXml = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             self::$webroot = getcwd();</sourceline>
        <sourceline coveredcount="-1">             self::$requestBase = $_SERVER['SCRIPT_NAME'];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             if(!self::$frameworkRoot)</sourceline>
        <sourceline coveredcount="-1">                self::$frameworkRoot = self::$webroot . DIRECTORY_SEPARATOR . 'AgilePHP';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             self::parseXml($agilephpDotXml);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     /**</sourceline>
        <sourceline coveredcount="0">       * Parses AgilePHP configuration file (agilephp.xml) and initalizes the</sourceline>
        <sourceline coveredcount="0">       * framework according to the specified configuration.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param string $agilephpDotXml Optional file path to agilephp.xml configuration file</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      private static function parseXml($agilephpDotXml = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">              $agilephp_xml = ($agilephpDotXml) ? $agilephpDotXml : self::$webroot . DIRECTORY_SEPARATOR . 'agilephp.xml';</sourceline>
        <sourceline coveredcount="-1">              if(self::$cacher) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                 $key = 'AGILEPHP_CONFIG';</sourceline>
        <sourceline coveredcount="-1">                 if(self::$cacher-&gt;exists('AGILEPHP_CONFIG'))</sourceline>
        <sourceline coveredcount="-1">                    return self::$cacher-&gt;get('AGILEPHP_CONFIG');</sourceline>
        <sourceline coveredcount="-1">              }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">              if(!file_exists($agilephp_xml)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                  spl_autoload_register('AgilePHP::autoloadNoAnnotations', true, true);</sourceline>
        <sourceline coveredcount="-1">                  return;</sourceline>
        <sourceline coveredcount="-2">              }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">              $dom = new DOMDocument();</sourceline>
        <sourceline coveredcount="-1">              $dom-&gt;Load($agilephp_xml);</sourceline>
        <sourceline coveredcount="-1">              if(!$dom-&gt;validate())</sourceline>
        <sourceline coveredcount="-1">                  throw new FrameworkException('agilephp.xml Document Object Model validation failed. Validate your document using AgilePHP/agilephp.dtd');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">              self::$xml = simplexml_load_file($agilephp_xml);</sourceline>
        <sourceline coveredcount="-1">              if(isset($key)) self::$cacher-&gt;set($key, self::$xml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">              if(self::$xml-&gt;mvc) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                  MVC::init((string)self::$xml-&gt;mvc-&gt;attributes()-&gt;controller,</sourceline>
        <sourceline coveredcount="-1">                            (string)self::$xml-&gt;mvc-&gt;attributes()-&gt;action,</sourceline>
        <sourceline coveredcount="-1">                            (string)self::$xml-&gt;mvc-&gt;attributes()-&gt;renderer,</sourceline>
        <sourceline coveredcount="-1">                            (string)self::$xml-&gt;mvc-&gt;attributes()-&gt;sanitize,</sourceline>
        <sourceline coveredcount="-1">                            self::$xml-&gt;mvc-&gt;cache);</sourceline>
        <sourceline coveredcount="-1">              }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">              if(self::$xml-&gt;annotations) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                 require_once 'Annotation.php';</sourceline>
        <sourceline coveredcount="-1">                 require_once 'Interception.php';</sourceline>
        <sourceline coveredcount="-1">                 spl_autoload_register('AgilePHP::autoload', true, true);</sourceline>
        <sourceline coveredcount="-1">              }</sourceline>
        <sourceline coveredcount="0">              else</sourceline>
        <sourceline coveredcount="-1">                 spl_autoload_register('AgilePHP::autoloadNoAnnotations', true, true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">              if(self::$xml-&gt;caching) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                 require 'cache/CacheException.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                 $provider = (string)self::$xml-&gt;caching-&gt;attributes()-&gt;provider;</sourceline>
        <sourceline coveredcount="-1">                 if($provider) self::$cacher = new $provider;</sourceline>
        <sourceline coveredcount="-1">              }</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns a CacheProvider implementation if one has been configured in agilephp.xml</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return CacheProvider A new CacheProvider implementation</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getCacher() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="35">             return self::$cacher;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Sets the fully qualified path to the base directory of</sourceline>
        <sourceline coveredcount="0">       * the web application.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param $path The fully qualified path to the web application</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function setWebRoot($path) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             self::$webroot = $path;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns the fully qualified path to the base directory of</sourceline>
        <sourceline coveredcount="0">       * the web application.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return The fully qualified path to the web application</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getWebRoot() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="27">             return self::$webroot;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Sets the full system path to the location of the AgilePHP framework. The given path is</sourceline>
        <sourceline coveredcount="0">       * appended to the current php.ini include_path configuration.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param $path The full system path to the location where AgilePHP framework resides.</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function setFrameworkRoot($path) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             self::$frameworkRoot = $path;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             $include_path = ini_get('include_path');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             if(strpos($include_path, ':' . $path) === false)</sourceline>
        <sourceline coveredcount="-1">                ini_set('include_path', $include_path . PATH_SEPARATOR . ':' . $path);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             //Log::debug('Initalizing framework with php include_path: ' . ini_get('include_path'));</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Gets the full system path to the location where AgilePHP resides.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return The full system path to the location of the AgilePHP framework.</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getFrameworkRoot() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">             return self::$frameworkRoot;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Sets the relative path to the web application from the server's document root.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $path The document root path</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function setDocumentRoot($path) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">              self::$documentRoot = $path;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns the relative path to the web application from the server's document root.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return The web applications relative path from the server's document root</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getDocumentRoot() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             if(!self::$documentRoot) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                $pieces = explode('.php', $_SERVER['SCRIPT_NAME']);</sourceline>
        <sourceline coveredcount="-1">                array_pop($pieces);</sourceline>
        <sourceline coveredcount="-1">                $docRootPieces = array();</sourceline>
        <sourceline coveredcount="-1">                $newPieces = explode('/', implode('/', $pieces));</sourceline>
        <sourceline coveredcount="-1">                for($i=0; $i&lt;(count($newPieces) - 1); $i++)</sourceline>
        <sourceline coveredcount="-1">                    $docRootPieces[$i] = $newPieces[$i];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                self::$documentRoot = implode('/', $docRootPieces);</sourceline>
        <sourceline coveredcount="-1">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             return self::$documentRoot;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns the base action url used to communicate with the</sourceline>
        <sourceline coveredcount="0">       * AgilePHP MVC component. Defaults to the name of the script</sourceline>
        <sourceline coveredcount="0">       * which initalizes the framework.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return The base action url used to communicate with the AgilePHP MVC component.</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getRequestBase() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             return self::$requestBase;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Sets the base action url used to communicate with the AgilePHP MVC component.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param $url The base url to be used to communicate with the AgilePHP MVC component.</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function setRequestBase($url) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             self::$requestBase = $url;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Sets the name of the AgilePHP web application.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $name The name of the AgilePHP application</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function setAppName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             self::$appName = $name;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns the name of the AgilePHP web application.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return AgilePHP web application name</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getAppName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="39">              if(!self::$appName)</sourceline>
        <sourceline coveredcount="39">                  self::$appName = (isset($_SERVER['HTTP_HOST'])) ? $_SERVER['HTTP_HOST'] : 'localhost';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="39">              return self::$appName;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Loads a class from the web application 'classes' or 'components' directory using a</sourceline>
        <sourceline coveredcount="0">       * package dot type notation. First the classes directory is searched, then components.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $classpath The dot notation classpath (my.package.ClassName)</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @throws FrameworkException If an error occurred loading the specified classpath</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function import($classpath) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             Log::debug('AgilePHP::import ' . $classpath);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             $file = preg_replace('/\./', DIRECTORY_SEPARATOR, $classpath);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             if(file_exists('classes' . DIRECTORY_SEPARATOR . $file . '.php'))</sourceline>
        <sourceline coveredcount="-1">                require_once('classes' . DIRECTORY_SEPARATOR . $file . '.php');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             else if(file_exists('components' . DIRECTORY_SEPARATOR . $file . '.php'))</sourceline>
        <sourceline coveredcount="-1">                require_once('components' . DIRECTORY_SEPARATOR . $file . '.php');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             else</sourceline>
        <sourceline coveredcount="-1">                throw new FrameworkException('Failed to import source from \'' . $classpath . '\'.');</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * By default PHP hides errors on production servers. Setting this to true enables PHP</sourceline>
        <sourceline coveredcount="0">       * 'display_errors', sets 'error_reporting' to 'E_ALL'.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param bool $bool True to turn on error reporting on (E_ALL)</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function setDisplayPhpErrors($bool = true) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             self::$displayPhpErrors = $bool;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             if(self::$displayPhpErrors) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                ini_set('display_errors', '1');</sourceline>
        <sourceline coveredcount="-1">                error_reporting(E_ALL);</sourceline>
        <sourceline coveredcount="-1">             }</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Enables or disables AgilePHP framework debug mode.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param bool $boolean True for debug mode, false for production mode. Default is production.</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function setDebugMode($boolean) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             self::$debugMode = ($boolean === true) ? true : false;</sourceline>
        <sourceline coveredcount="-1">             if(self::$debugMode) self::setDisplayPhpErrors(true);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Whether or not AgilePHP framework is running in debug mode.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function isInDebugMode() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             return self::$debugMode;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Calls PHP date_default_timezone_set function to set the current timezone.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $timezone The timezone to use as default.</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0">       * AgilePHP::setDefaultTimezone('America/New_York');</sourceline>
        <sourceline coveredcount="0">       * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function setDefaultTimezone($timezone) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             date_default_timezone_set($timezone);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Adds an Interception to the interceptions stack</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param Interception $interception The interception instance to add to the stack</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function addInterception(Interception $interception) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">             if($interception-&gt;getMethod()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">                $level = 'method';</sourceline>
        <sourceline coveredcount="4">                $from = $interception-&gt;getClass() . '::' . $interception-&gt;getMethod();</sourceline>
        <sourceline coveredcount="4">             }</sourceline>
        <sourceline coveredcount="3">             elseif($interception-&gt;getProperty()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                $level = 'property';</sourceline>
        <sourceline coveredcount="2">                $from = $interception-&gt;getClass() . '::' . $interception-&gt;getProperty();</sourceline>
        <sourceline coveredcount="2">             }</sourceline>
        <sourceline coveredcount="0">             else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                 $level = 'class';</sourceline>
        <sourceline coveredcount="2">                 $from = $interception-&gt;getClass();</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">             Log::debug('AgilePHP::addInterception Adding ' . $level . ' level #@' . get_class($interception-&gt;getInterceptor()) .</sourceline>
        <sourceline coveredcount="5">             		' interceptor for \'' . $from . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">             array_push(self::$interceptions, $interception);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns an array of Interceptions which have been loaded into the framework</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return Array of Interception instances</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getInterceptions() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="31">             return self::$interceptions;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns the agilephp.xml file as a SimpleXMLElement.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return SimpleXMLElement agilephp.xml configuration</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getConfiguration() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             return self::$xml;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Defines the error handler responsible for handling framework and application wide errors.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param mixed $function A standard PHP function or static method responsible for error handling</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function setErrorHandler($function) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             set_error_handler($function);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Handles PHP E_NOTICE, E_WARNING, E</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function handleErrors() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             set_error_handler('AgilePHP::ErrorHandler');</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Custom PHP error handling function which writes error to log instead of echoing it out.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param Integer $errno Error number</sourceline>
        <sourceline coveredcount="0">       * @param String $errmsg Error message</sourceline>
        <sourceline coveredcount="0">       * @param String $errfile The name of the file that caused the error</sourceline>
        <sourceline coveredcount="0">       * @param Integer $errline The line number that caused the error</sourceline>
        <sourceline coveredcount="0">       * @return false</sourceline>
        <sourceline coveredcount="0">       * @throws FrameworkException</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">       public static function ErrorHandler($errno, $errmsg, $errfile, $errline) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                $entry = PHP_EOL . 'Number: ' . $errno . PHP_EOL . 'Message: ' . $errmsg .</sourceline>
        <sourceline coveredcount="-1">                          PHP_EOL . 'File: ' . $errfile . PHP_EOL . 'Line: ' . $errline;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                switch($errno) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                    case E_NOTICE:</sourceline>
        <sourceline coveredcount="-1">                    case E_USER_NOTICE:</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                         Log::info($entry);</sourceline>
        <sourceline coveredcount="-1">                         break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                    case E_WARNING:</sourceline>
        <sourceline coveredcount="-1">                    case E_USER_WARNING:</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                         Log::warn($entry);</sourceline>
        <sourceline coveredcount="-1">                         break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                    case E_ERROR:</sourceline>
        <sourceline coveredcount="-1">                    case E_USER_ERROR:</sourceline>
        <sourceline coveredcount="-1">                    case E_RECOVERABLE_ERROR:</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                         Log::error($entry);</sourceline>
        <sourceline coveredcount="-1">                         break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                    default:</sourceline>
        <sourceline coveredcount="-1">                         Log::debug($entry);</sourceline>
        <sourceline coveredcount="-1">                }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Starts a timer. Useful for measuring how long a particular</sourceline>
        <sourceline coveredcount="0">       * operation takes.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function startClock() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             $mtime = microtime();</sourceline>
        <sourceline coveredcount="-1">             $mtime = explode(' ', $mtime);</sourceline>
        <sourceline coveredcount="-1">             $mtime = $mtime[1] + $mtime[0];</sourceline>
        <sourceline coveredcount="-1">             self::$startTime = $mtime;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Stops the timer and returns the elapsed time between startClock()</sourceline>
        <sourceline coveredcount="0">       * and stopClock().</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return Time elapsed time between startClock() and endClock()</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function stopClock() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             $mtime = microtime();</sourceline>
        <sourceline coveredcount="-1">             $mtime = explode(' ', $mtime);</sourceline>
        <sourceline coveredcount="-1">             $mtime = $mtime[1] + $mtime[0];</sourceline>
        <sourceline coveredcount="-1">             $endtime = $mtime;</sourceline>
        <sourceline coveredcount="-1">             $difference = ($endtime - self::$startTime);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             return $difference;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Retrieves the raw PHP source code for the specified class. The search</sourceline>
        <sourceline coveredcount="0">       * algorithm assumes the file is named after the class.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $class The class name</sourceline>
        <sourceline coveredcount="0">       * @return String The raw PHP source code for the specified class</sourceline>
        <sourceline coveredcount="0">       * @throws FrameworkException if the requested class could not be found</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getSource($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Serve from cache if enabled and present</sourceline>
        <sourceline coveredcount="20">             if(self::$cacher) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                $key = 'AGILEPHP_SOURCE_' . $class;</sourceline>
        <sourceline coveredcount="-1">                if($source = self::$cacher-&gt;get($key))</sourceline>
        <sourceline coveredcount="-1">                   return $source;</sourceline>
        <sourceline coveredcount="-1">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Search classmap</sourceline>
        <sourceline coveredcount="20">             if(isset(self::$classmap[$class])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                // Allow the application to override framework class paths</sourceline>
        <sourceline coveredcount="19">                if(file_exists(self::$webroot . self::$classmap[$class])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                   $source = file_get_contents(self::$webroot . self::$classmap[$class]);</sourceline>
        <sourceline coveredcount="-1">                   if(self::$cacher) self::$cacher-&gt;set($key, $source);</sourceline>
        <sourceline coveredcount="-1">                   return $source;</sourceline>
        <sourceline coveredcount="-2">                }</sourceline>
        <sourceline coveredcount="0">                else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="19">                    $source = file_get_contents(self::$frameworkRoot . self::$classmap[$class]);</sourceline>
        <sourceline coveredcount="19">                    if(self::$cacher) self::$cacher-&gt;set($key, $source);</sourceline>
        <sourceline coveredcount="19">                    return $source;</sourceline>
        <sourceline coveredcount="0">                }</sourceline>
        <sourceline coveredcount="-2">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // PHP namespace support</sourceline>
        <sourceline coveredcount="6">             $namespace = explode('\\', $class);</sourceline>
        <sourceline coveredcount="6">             $className = array_pop($namespace);</sourceline>
        <sourceline coveredcount="6">             $namespace = implode(DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // PHAR support</sourceline>
        <sourceline coveredcount="6">             if(strpos($class, 'phar://') !== false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                $source = file_get_contents($class);</sourceline>
        <sourceline coveredcount="-1">                if(self::$cacher) self::$cacher-&gt;set($key, $source);</sourceline>
        <sourceline coveredcount="-1">                return $source;</sourceline>
        <sourceline coveredcount="-2">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Search web application (one level using namespace as directory delimiter)</sourceline>
        <sourceline coveredcount="6">             $directories = glob(self::$webroot . DIRECTORY_SEPARATOR . '*', GLOB_ONLYDIR);</sourceline>
        <sourceline coveredcount="6">             foreach($directories as $directory) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">                 $path = $directory . DIRECTORY_SEPARATOR . $namespace . $className . '.php';</sourceline>
        <sourceline coveredcount="6">                 if(file_exists($path)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">                    $source = file_get_contents($path);</sourceline>
        <sourceline coveredcount="6">                    if(self::$cacher) self::$cacher-&gt;set($key, $source);</sourceline>
        <sourceline coveredcount="6">                    return $source;</sourceline>
        <sourceline coveredcount="-2">                 }</sourceline>
        <sourceline coveredcount="3">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Search web application (recursively - no namespace by class name)</sourceline>
        <sourceline coveredcount="2">		  	 $it = new RecursiveDirectoryIterator(self::$webroot);</sourceline>
        <sourceline coveredcount="2">			 foreach(new RecursiveIteratorIterator($it) as $file) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">  			   	     $pieces = explode(DIRECTORY_SEPARATOR, $file);</sourceline>
        <sourceline coveredcount="2">				 	 if(array_pop($pieces) == $className . '.php') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">    			   	    $source = file_get_contents($file);</sourceline>
        <sourceline coveredcount="2">    				    if(self::$cacher) self::$cacher-&gt;set($key, $source);</sourceline>
        <sourceline coveredcount="2">    			        return $source;</sourceline>
        <sourceline coveredcount="-2">    			   	 }</sourceline>
        <sourceline coveredcount="2">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             throw new FrameworkException('Failed to retrieve source code for class \'' . $class . '\'.');</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Lazy loads standard framework and web application classes. Parses each class</sourceline>
        <sourceline coveredcount="0">       * source file for the presense of AgilePHP interceptors.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $class The name of the class being loaded by __autoload</sourceline>
        <sourceline coveredcount="0">       * @param boolean $bypassInterceptors Flag used to enable/disable InterceptorFilter logic</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function autoload($class, $bypassInterceptors = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Parse class for AgilePHP interceptors if enabled</sourceline>
        <sourceline coveredcount="20">             if(!$bypassInterceptors) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	            // Filter for interceptors</sourceline>
        <sourceline coveredcount="20">                new InterceptorFilter($class);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                // Intercepted classes are loaded by the filter</sourceline>
        <sourceline coveredcount="20">                if(class_exists($class, false)) return;</sourceline>
        <sourceline coveredcount="18">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Use caching if enabled</sourceline>
        <sourceline coveredcount="18">             if(self::$cacher) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                $key = 'AGILEPHP_AUTOLOAD_' . $class;</sourceline>
        <sourceline coveredcount="-1">                if($clazz = self::$cacher-&gt;get($key)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                   require $clazz;</sourceline>
        <sourceline coveredcount="-1">                   return;</sourceline>
        <sourceline coveredcount="-2">                }</sourceline>
        <sourceline coveredcount="-1">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Search classmap</sourceline>
        <sourceline coveredcount="18">             if(isset(self::$classmap[$class])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                // Allow the application to override framework class paths</sourceline>
        <sourceline coveredcount="17">                if(file_exists(self::$webroot . self::$classmap[$class])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                    if(self::$cacher) self::$cacher-&gt;set($key, self::$webroot . self::$classmap[$class]);</sourceline>
        <sourceline coveredcount="-1">                    require self::$webroot . self::$classmap[$class];</sourceline>
        <sourceline coveredcount="-1">                    return;</sourceline>
        <sourceline coveredcount="-2">                }</sourceline>
        <sourceline coveredcount="0">                else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="17">                    if(self::$cacher) self::$cacher-&gt;set($key, self::$frameworkRoot . self::$classmap[$class]);</sourceline>
        <sourceline coveredcount="17">                    require self::$frameworkRoot . self::$classmap[$class];</sourceline>
        <sourceline coveredcount="17">                    return;</sourceline>
        <sourceline coveredcount="0">                }</sourceline>
        <sourceline coveredcount="-2">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // PHP namespace support</sourceline>
        <sourceline coveredcount="3">             $namespace = explode('\\', $class);</sourceline>
        <sourceline coveredcount="3">             $className = array_pop($namespace);</sourceline>
        <sourceline coveredcount="3">             $namespace = implode(DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Search web application (one level)</sourceline>
        <sourceline coveredcount="3">             $directories = glob(self::$webroot . DIRECTORY_SEPARATOR . '*', GLOB_ONLYDIR);</sourceline>
        <sourceline coveredcount="3">             foreach($directories as $directory) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">                 $path = $directory . $namespace . $className . '.php';</sourceline>
        <sourceline coveredcount="3">                 if(file_exists($path)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                    if(self::$cacher) self::$cacher-&gt;set($key, $path);</sourceline>
        <sourceline coveredcount="2">                    require $path;</sourceline>
        <sourceline coveredcount="2">                    return;</sourceline>
        <sourceline coveredcount="-2">                 }</sourceline>
        <sourceline coveredcount="3">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Search web application (recursively - as last resort effort)</sourceline>
        <sourceline coveredcount="2">		  	 $it = new RecursiveDirectoryIterator(self::$webroot);</sourceline>
        <sourceline coveredcount="2">			 foreach(new RecursiveIteratorIterator($it) as $file) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">		   	      	  $pieces = explode(DIRECTORY_SEPARATOR, $file);</sourceline>
        <sourceline coveredcount="2">			 		  if(array_pop($pieces) == $className . '.php') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">			 		     if(self::$cacher) self::$cacher-&gt;set($key, $file-&gt;getPathname());</sourceline>
        <sourceline coveredcount="2">		     	 		 require $file;</sourceline>
        <sourceline coveredcount="2">		     	 		 return;</sourceline>
        <sourceline coveredcount="-2">			 		  }</sourceline>
        <sourceline coveredcount="2">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             throw new FrameworkException('The requested class \'' . $class . '\' could not be auto loaded.');</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Lazy loads standard framework and web application classes.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $class The name of the class being loaded by __autoload</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function autoloadNoAnnotations($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             self::autoload($class, true);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Static classmap responsible for storing relationships between classes</sourceline>
        <sourceline coveredcount="0">       * and their physical location on disk.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @var array An associative array of class name keys with their physical disk location as the value.</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static $classmap = array(</sourceline>
        <sourceline coveredcount="0">          'Annotation' =&gt; '/Annotation.php',</sourceline>
        <sourceline coveredcount="0">          'Cache' =&gt; '/Cache.php',</sourceline>
        <sourceline coveredcount="0">          'Component' =&gt; '/Component.php',</sourceline>
        <sourceline coveredcount="0">          'Crypto' =&gt; '/Crypto.php',</sourceline>
        <sourceline coveredcount="0">          'Form' =&gt; '/Form.php',</sourceline>
        <sourceline coveredcount="0">          'FrameworkException' =&gt; '/FrameworkException.php',</sourceline>
        <sourceline coveredcount="0">          'i18n' =&gt; '/i18n.php',</sourceline>
        <sourceline coveredcount="0">          'Identity' =&gt; '/Identity.php',</sourceline>
        <sourceline coveredcount="0">          'Interception' =&gt; '/Interception.php',</sourceline>
        <sourceline coveredcount="0">          'Log' =&gt; '/Log.php',</sourceline>
        <sourceline coveredcount="0">          'Mailer' =&gt; '/Mailer.php',</sourceline>
        <sourceline coveredcount="0">          'MVC' =&gt; '/MVC.php',</sourceline>
        <sourceline coveredcount="0">          'ORM' =&gt; '/ORM.php',</sourceline>
        <sourceline coveredcount="0">          'Remoting' =&gt; '/Remoting.php',</sourceline>
        <sourceline coveredcount="0">          'Scope' =&gt; '/Scope.php',</sourceline>
        <sourceline coveredcount="0">          'Upload' =&gt; '/Upload.php',</sourceline>
        <sourceline coveredcount="0">          'Validator' =&gt; '/Validator.php',</sourceline>
        <sourceline coveredcount="0">          'AnnotatedClass' =&gt; '/annotation/AnnotatedClass.php',</sourceline>
        <sourceline coveredcount="0">          'AnnotatedMethod' =&gt; '/annotation/AnnotatedMethod.php',</sourceline>
        <sourceline coveredcount="0">          'AnnotatedProperty' =&gt; '/annotation/AnnotatedProperty.php',</sourceline>
        <sourceline coveredcount="0">          'AnnotationException' =&gt; '/annotation/AnnotationException.php',</sourceline>
        <sourceline coveredcount="0">          'AnnotationParser' =&gt; '/annotation/AnnotationParser.php',</sourceline>
        <sourceline coveredcount="0">          'ApcCacheProvider' =&gt; '/cache/ApcCacheProvider.php',</sourceline>
        <sourceline coveredcount="0">          'CacheException' =&gt; '/cache/CacheException.php',</sourceline>
        <sourceline coveredcount="0">          'CacheProvider' =&gt; '/cache/CacheProvider.php',</sourceline>
        <sourceline coveredcount="0">          'FileCacheProvider' =&gt; '/cache/FileCacheProvider.php',</sourceline>
        <sourceline coveredcount="0">          'XCacheProvider' =&gt; '/cache/XCacheProvider.php',</sourceline>
        <sourceline coveredcount="0">          'DataRenderer' =&gt; '/data/renderer/DataRenderer.php',</sourceline>
        <sourceline coveredcount="0">          'JsonRenderer' =&gt; '/data/renderer/JsonRenderer.php',</sourceline>
        <sourceline coveredcount="0">          'XmlRenderer' =&gt; '/data/renderer/XmlRenderer.php',</sourceline>
        <sourceline coveredcount="0">          'YamlRenderer' =&gt; '/data/renderer/YamlRenderer.php',</sourceline>
        <sourceline coveredcount="0">          'YesNoRenderer' =&gt; '/data/renderer/YesNoRenderer.php',</sourceline>
        <sourceline coveredcount="0">          'DataTransformer' =&gt; '/data/transformer/DataTransformer.php',</sourceline>
        <sourceline coveredcount="0">          'JsonToModel' =&gt; '/data/transformer/JsonToModel.php',</sourceline>
        <sourceline coveredcount="0">          'XmlToModel' =&gt; '/data/transformer/XmlToModel.php',</sourceline>
        <sourceline coveredcount="0">          'YamlToModel' =&gt; '/data/transformer/YamlToModel.php',</sourceline>
        <sourceline coveredcount="0">      	  'YesNoToBoolean' =&gt; '/data/transformer/YesNoToBoolean.php',</sourceline>
        <sourceline coveredcount="0">          'RequestParam' =&gt; '/form/RequestParam.php',</sourceline>
        <sourceline coveredcount="0">          'AccessDeniedException' =&gt; '/identity/AccessDeniedException.php',</sourceline>
        <sourceline coveredcount="0">          'Authentication' =&gt; '/identity/Authentication.php',</sourceline>
        <sourceline coveredcount="0">          'BasicAuthentication' =&gt; '/identity/BasicAuthentication.php',</sourceline>
        <sourceline coveredcount="0">          'BasicForgotPasswdMailer' =&gt; '/identity/BasicForgotPasswdMailer.php',</sourceline>
        <sourceline coveredcount="0">          'BasicRegistrationMailer' =&gt; '/identity/BasicRegistrationMailer.php',</sourceline>
        <sourceline coveredcount="0">          'BasicResetPasswdMailer' =&gt; '/identity/BasicResetPasswdMailer.php',</sourceline>
        <sourceline coveredcount="0">          'DefaultAuthenticator' =&gt; '/identity/DefaultAuthenticator.php',</sourceline>
        <sourceline coveredcount="0">          'IdentityManager' =&gt; '/identity/IdentityManager.php',</sourceline>
        <sourceline coveredcount="0">          'IdentityManagerFactory' =&gt; '/identity/IdentityManagerFactory.php',</sourceline>
        <sourceline coveredcount="0">          'IdentityManagerImpl' =&gt; '/identity/IdentityManagerImpl.php',</sourceline>
        <sourceline coveredcount="0">          'IdentityModel' =&gt; '/identity/IdentityModel.php',</sourceline>
        <sourceline coveredcount="0">          'IdentityUtils' =&gt; '/identity/IdentityUtils.php',</sourceline>
        <sourceline coveredcount="0">          'LoggedIn' =&gt; '/identity/LoggedIn.php',</sourceline>
        <sourceline coveredcount="0">          'NotLoggedInException' =&gt; '/identity/NotLoggedInException.php',</sourceline>
        <sourceline coveredcount="0">          'Password' =&gt; '/identity/Password.php',</sourceline>
        <sourceline coveredcount="0">          'Restrict' =&gt; '/identity/Restrict.php',</sourceline>
        <sourceline coveredcount="0">          'Role' =&gt; '/identity/Role.php',</sourceline>
        <sourceline coveredcount="0">          'User' =&gt; '/identity/User.php',</sourceline>
        <sourceline coveredcount="0">          'AfterInvoke' =&gt; '/interception/AfterInvoke.php',</sourceline>
        <sourceline coveredcount="0">          'AroundInvoke' =&gt; '/interception/AroundInvoke.php',</sourceline>
        <sourceline coveredcount="0">          'In' =&gt; '/interception/In.php',</sourceline>
        <sourceline coveredcount="0">          'InterceptionException', '/interception/InterceptionException.php',</sourceline>
        <sourceline coveredcount="0">          'Interceptor' =&gt; '/interception/Interceptor.php',</sourceline>
        <sourceline coveredcount="0">          'InterceptorFilter' =&gt; '/interception/InterceptorFilter.php',</sourceline>
        <sourceline coveredcount="0">          'InterceptorProxy' =&gt; '/interception/InterceptorProxy.php',</sourceline>
        <sourceline coveredcount="0">          'InvocationContext' =&gt; '/interception/InvocationContext.php',</sourceline>
        <sourceline coveredcount="0">          'Audit' =&gt; '/logger/Audit.php',</sourceline>
        <sourceline coveredcount="0">          'FileLogger' =&gt; '/logger/FileLogger.php',</sourceline>
        <sourceline coveredcount="0">          'LogFactory' =&gt; '/logger/LogFactory.php',</sourceline>
        <sourceline coveredcount="0">          'Logger' =&gt; '/logger/Logger.php',</sourceline>
        <sourceline coveredcount="0">          'LogProvider' =&gt; '/logger/LogProvider.php',</sourceline>
        <sourceline coveredcount="0">          'SysLogger' =&gt; '/logger/SysLogger.php',</sourceline>
        <sourceline coveredcount="0">          'AJAXRenderer' =&gt; '/mvc/AJAXRenderer.php',</sourceline>
        <sourceline coveredcount="0">          'BaseController' =&gt; '/mvc/BaseController.php',</sourceline>
        <sourceline coveredcount="0">          'BaseModelActionController' =&gt; '/mvc/BaseModelActionController.php',</sourceline>
        <sourceline coveredcount="0">          'BaseModelController' =&gt; '/mvc/BaseModelController.php',</sourceline>
        <sourceline coveredcount="0">          'BaseModelXmlController' =&gt; '/mvc/BaseModelXmlController.php',</sourceline>
        <sourceline coveredcount="0">          'BaseModelXslController' =&gt; '/mvc/BaseModelXslController.php',</sourceline>
        <sourceline coveredcount="0">          'BaseRenderer' =&gt; '/mvc/BaseRenderer.php',</sourceline>
        <sourceline coveredcount="0">      	  'ComponentModelActionController' =&gt; '/mvc/ComponentModelActionController.php',</sourceline>
        <sourceline coveredcount="0">          'ExtFormRenderer' =&gt; '/mvc/ExtFormRenderer.php',</sourceline>
        <sourceline coveredcount="0">          'PHTMLRenderer' =&gt; '/mvc/PHTMLRenderer.php',</sourceline>
        <sourceline coveredcount="0">          'XSLTRenderer' =&gt; '/mvc/XSLTRenderer.php',</sourceline>
        <sourceline coveredcount="0">          'BaseDialect' =&gt; '/orm/dialect/BaseDialect.php',</sourceline>
        <sourceline coveredcount="0">          'MSSQLDialect' =&gt; '/orm/dialect/MSSQLDialect.php',</sourceline>
        <sourceline coveredcount="0">          'MySQLDialect' =&gt; '/orm/dialect/MySQLDialect.php',</sourceline>
        <sourceline coveredcount="0">          'PGSQLDialect' =&gt; '/orm/dialect/PGSQLDialect.php',</sourceline>
        <sourceline coveredcount="0">          'SQLDialect' =&gt; '/orm/dialect/SQLDialect.php',</sourceline>
        <sourceline coveredcount="0">          'SQLiteDialect' =&gt; '/orm/dialect/SQLiteDialect.php',</sourceline>
        <sourceline coveredcount="0">      	  'Transactional' =&gt; '/orm/Transactional.php',</sourceline>
        <sourceline coveredcount="0">          'Column' =&gt; '/orm/Column.php',</sourceline>
        <sourceline coveredcount="0">          'Database' =&gt; '/orm/Database.php',</sourceline>
        <sourceline coveredcount="0">      	  'DomainModel' =&gt; '/orm/DomainModel.php',</sourceline>
        <sourceline coveredcount="0">          'ForeignKey' =&gt; '/orm/ForeignKey.php',</sourceline>
        <sourceline coveredcount="0">          'Id' =&gt; '/orm/Id.php',</sourceline>
        <sourceline coveredcount="0">          'IdentityMap' =&gt; '/orm/IdentityMap.php',</sourceline>
        <sourceline coveredcount="0">          'ORMException' =&gt; '/orm/ORMException.php',</sourceline>
        <sourceline coveredcount="0">          'ORMFactory' =&gt; '/orm/ORMFactory.php',</sourceline>
        <sourceline coveredcount="0">          'Procedure' =&gt; '/orm/Procedure.php',</sourceline>
        <sourceline coveredcount="0">          'ProcedureParam' =&gt;'/orm/ProcedureParam.php',</sourceline>
        <sourceline coveredcount="0">          'Table' =&gt; '/orm/Table.php',</sourceline>
        <sourceline coveredcount="0">          'ApplicationScope' =&gt; '/scope/ApplicationScope.php',</sourceline>
        <sourceline coveredcount="0">          'OrmSessionProvider' =&gt; '/scope/OrmSessionProvider.php',</sourceline>
        <sourceline coveredcount="0">          'PhpSessionProvider' =&gt; '/scope/PhpSessionProvider.php',</sourceline>
        <sourceline coveredcount="0">          'RequestScope' =&gt; '/scope/RequestScope.php',</sourceline>
        <sourceline coveredcount="0">          'Session' =&gt; '/scope/Session.php',</sourceline>
        <sourceline coveredcount="0">          'SessionProvider' =&gt; '/scope/SessionProvider.php',</sourceline>
        <sourceline coveredcount="0">          'SessionScope' =&gt; '/scope/SessionScope.php',</sourceline>
        <sourceline coveredcount="0">          'Stateful' =&gt; '/scope/Stateful.php',</sourceline>
        <sourceline coveredcount="0">          'ArrayValidator' =&gt; '/validator/ArrayValidator.php',</sourceline>
        <sourceline coveredcount="0">          'BitValidator' =&gt; '/validator/BitValidator.php',</sourceline>
        <sourceline coveredcount="0">          'BooleanValidator' =&gt; '/validator/BooleanValidator.php',</sourceline>
        <sourceline coveredcount="0">          'DateValidator' =&gt; '/validator/DateValidator.php',</sourceline>
        <sourceline coveredcount="0">          'EmailValidator' =&gt; '/validator/EmailValidator.php',</sourceline>
        <sourceline coveredcount="0">          'FloatValidator' =&gt; '/validator/FloatValidator.php',</sourceline>
        <sourceline coveredcount="0">          'IPv4Validator' =&gt; '/validator/IPv4Validator.php',</sourceline>
        <sourceline coveredcount="0">          'IPv6Validator' =&gt; '/validator/IPv6Validator.php',</sourceline>
        <sourceline coveredcount="0">          'LengthValidator' =&gt; '/validator/LengthValidator.php',</sourceline>
        <sourceline coveredcount="0">          'NumberValidator' =&gt; '/validator/NumberValidator.php',</sourceline>
        <sourceline coveredcount="0">          'ObjectValidator' =&gt; '/validator/ObjectValidator.php',</sourceline>
        <sourceline coveredcount="0">          'PasswordValidator' =&gt; '/validator/PasswordValidator.php',</sourceline>
        <sourceline coveredcount="0">          'StringValidator' =&gt; '/validator/StringValidator.php',</sourceline>
        <sourceline coveredcount="0">          'StrongPasswordValidator' =&gt; '/validator/StrongPasswordValidator.php',</sourceline>
        <sourceline coveredcount="0">          'RemoteMethod' =&gt; '/webservice/remoting/RemoteMethod.php',</sourceline>
        <sourceline coveredcount="0">          'RemotingException' =&gt; '/webservice/remoting/RemotingException.php',</sourceline>
        <sourceline coveredcount="0">          'ConsumeMime' =&gt; '/webservice/rest/ConsumeMime.php',</sourceline>
        <sourceline coveredcount="0">          'DELETE' =&gt; '/webservice/rest/DELETE.php',</sourceline>
        <sourceline coveredcount="0">          'GET' =&gt; '/webservice/rest/GET.php',</sourceline>
        <sourceline coveredcount="0">          'Path' =&gt; '/webservice/rest/Path.php',</sourceline>
        <sourceline coveredcount="0">          'POST' =&gt; '/webservice/rest/POST.php',</sourceline>
        <sourceline coveredcount="0">          'ProduceMime' =&gt; '/webservice/rest/ProduceMime.php',</sourceline>
        <sourceline coveredcount="0">          'PUT' =&gt; '/webservice/rest/PUT.php',</sourceline>
        <sourceline coveredcount="0">          'RestClient' =&gt; '/webservice/rest/RestClient.php',</sourceline>
        <sourceline coveredcount="0">          'RestClientException' =&gt; '/webservice/rest/RestClientException.php',</sourceline>
        <sourceline coveredcount="0">          'RestService' =&gt; '/webservice/rest/RestService.php',</sourceline>
        <sourceline coveredcount="0">          'RestServiceException' =&gt; '/webservice/rest/RestServiceException.php',</sourceline>
        <sourceline coveredcount="0">          'RestUtil' =&gt; '/webservice/rest/RestUtil.php',</sourceline>
        <sourceline coveredcount="0">          'SOAPBinding' =&gt; '/webservice/soap/SOAPBinding.php',</sourceline>
        <sourceline coveredcount="0">          'SOAPService' =&gt; '/webservice/soap/SOAPService.php',</sourceline>
        <sourceline coveredcount="0">          'WebMethod' =&gt; '/webservice/soap/WebMethod.php',</sourceline>
        <sourceline coveredcount="0">          'WebService' =&gt; '/webservice/soap/WebService.php',</sourceline>
        <sourceline coveredcount="0">          'WSDL' =&gt; '/webservice/soap/WSDL.php'</sourceline>
        <sourceline coveredcount="0">     );</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Interception" methodcount="11" methodscovered="8" statementcount="124" statementscovered="83" totalcount="135" totalcovered="91">
      <sourcefile name="Interception.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Interception.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">require 'interception/InterceptionException.php';</sourceline>
        <sourceline coveredcount="0">require 'interception/InterceptorFilter.php';</sourceline>
        <sourceline coveredcount="0">require 'interception/InterceptorProxy.php';</sourceline>
        <sourceline coveredcount="0">require 'interception/InvocationContext.php';</sourceline>
        <sourceline coveredcount="0">require 'interception/AroundInvoke.php';</sourceline>
        <sourceline coveredcount="0">require 'interception/AfterInvoke.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Performs interceptions by creating a dynamic proxy for intercepted</sourceline>
        <sourceline coveredcount="0"> * classes. The proxy invokes the intended calls after inspecting (and/or</sourceline>
        <sourceline coveredcount="0"> * intercepting) it according to the annotations in the intercepted object.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Interception {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $class;</sourceline>
        <sourceline coveredcount="0">	  private $method;</sourceline>
        <sourceline coveredcount="0">	  private $property;</sourceline>
        <sourceline coveredcount="0">	  private $interceptor;</sourceline>
        <sourceline coveredcount="0">	  private $static;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initalizes the Interception</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $class The target class name</sourceline>
        <sourceline coveredcount="0">	   * @param String $method The method name if this is a method level interception</sourceline>
        <sourceline coveredcount="0">	   * @param String $property The property name if this is a field level interception</sourceline>
        <sourceline coveredcount="0">	   * @param Object $interceptor The instance of the interceptor which will intercept calls</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct($class, $method, $property, $interceptor) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 $this-&gt;class = $class;</sourceline>
        <sourceline coveredcount="5">	  		 $this-&gt;method = $method;</sourceline>
        <sourceline coveredcount="5">	  		 $this-&gt;property = $property;</sourceline>
        <sourceline coveredcount="5">	  		 $this-&gt;interceptor = $interceptor;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the target class being intercepted</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The interception target class name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getClass() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="31">	  		 return $this-&gt;class;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the target method to intercept</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getMethod() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="31">	  		 return $this-&gt;method;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the property to intercept</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getProperty() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="27">	  		 return $this-&gt;property;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the interceptor instance which handles the intercepted</sourceline>
        <sourceline coveredcount="0">	   * call.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getInterceptor() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="26">	  		 return $this-&gt;interceptor;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean flag used to indicate whether or not the intercepted class</sourceline>
        <sourceline coveredcount="0">	   * is static.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return boolean True if the class is static, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isStatic() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	         return $this-&gt;static;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new intercepted target instance. The target is created by modifying</sourceline>
        <sourceline coveredcount="0">	   * the source code of the class being intercepted to *classname*_Intercepted.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Object The new intercepted target instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function createInterceptedTarget() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	         if(class_exists($this-&gt;class, false)) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         // Use cache if caching is enabled</sourceline>
        <sourceline coveredcount="5">		     if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		        $cacheKey = 'AGILEPHP_INTERCEPTION_TARGET_' . $this-&gt;class;</sourceline>
        <sourceline coveredcount="-1">		        if($cacher-&gt;exists($cacheKey)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		            $o = $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">    		        if(@eval($o-&gt;code) === false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        	  		   Log::error('Interception::createInterceptorProxy ' . PHP_EOL . $code);</sourceline>
        <sourceline coveredcount="-1">        	  		   throw new InterceptionException('Failed to create intercepted target');</sourceline>
        <sourceline coveredcount="-2">    	  		    }</sourceline>
        <sourceline coveredcount="-1">    	  		    return $o-&gt;prototype;</sourceline>
        <sourceline coveredcount="-2">		        }</sourceline>
        <sourceline coveredcount="-1">		     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 	  		 // php namespace support</sourceline>
        <sourceline coveredcount="5">			 $namespace = explode('\\', $this-&gt;class);</sourceline>
        <sourceline coveredcount="5">			 $className = array_pop($namespace);</sourceline>
        <sourceline coveredcount="5">			 $namespace = implode('\\', $namespace);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">		 	 if(strpos($className, 'phar://') !== false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 	     $code = file_get_contents($className);</sourceline>
        <sourceline coveredcount="-1">		 	 	 $namespace = explode('/', $className);</sourceline>
        <sourceline coveredcount="-1">		 	 	 $className = array_pop($namespace);</sourceline>
        <sourceline coveredcount="-1">		 	 	 $className = preg_replace('/\.php/', '', $className);</sourceline>
        <sourceline coveredcount="-1">		 	 }</sourceline>
        <sourceline coveredcount="0">		 	 else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 	 	 try {</sourceline>
        <sourceline coveredcount="5">		 	 	       $code = ($namespace) ? 'namespace ' . $namespace . ';' : '';</sourceline>
        <sourceline coveredcount="5">	  		 	 	   $code .= AgilePHP::getSource($this-&gt;class);</sourceline>
        <sourceline coveredcount="0">		 	 	 }</sourceline>
        <sourceline coveredcount="5">		 	 	 catch(FrameworkException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 	 	 		throw new InterceptionException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">		 	 	 }</sourceline>
        <sourceline coveredcount="0">		 	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">		 	 preg_match('/(class\s+.*){/', $code, $matches);</sourceline>
        <sourceline coveredcount="5">	  		 $code = str_replace('class ' . $className . ' ', 'class ' . $className . '_Intercepted ', $code);</sourceline>
        <sourceline coveredcount="5">			 $code = $this-&gt;clean($code);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 // Log::debug('Interception::createInterceptedTarget ' . PHP_EOL . $code);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 if(@eval($code) === false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    Log::error('Interception::createInterceptorProxy ' . PHP_EOL . $code);</sourceline>
        <sourceline coveredcount="-1">	  		 	throw new InterceptionException('Failed to create intercepted target');</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 if(isset($cacher)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    $o = new stdClass;</sourceline>
        <sourceline coveredcount="-1">	  		    $o-&gt;code = $code;</sourceline>
        <sourceline coveredcount="-1">	  		    $o-&gt;prototype = $matches[1];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    $cacher-&gt;set($cacheKey, $o);</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 return $matches[1];</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates and loads a dynamic proxy class which performs interceptions</sourceline>
        <sourceline coveredcount="0">	   * on the class created by Interception::createInterceptedTarget().</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws InterceptionException if there was an issue creating the InterceptorProxy</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function createInterceptorProxy($prototype) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	         if(class_exists($this-&gt;class, false)) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         // Use cache if caching is enabled</sourceline>
        <sourceline coveredcount="5">		     if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		        $cacheKey = 'AGILEPHP_INTERCEPTION_PROXY_' . $this-&gt;class;</sourceline>
        <sourceline coveredcount="-1">		        if($cacher-&gt;exists($cacheKey)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		            $code = $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">    		        if(@eval($code) === false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    	  		       Log::error('Interception::createInterceptorProxy ' . PHP_EOL . $code);</sourceline>
        <sourceline coveredcount="-1">    	  		 	   throw new InterceptionException('Failed to create interceptor proxy for \'' . $this-&gt;class . '\'.');</sourceline>
        <sourceline coveredcount="-2">    	  		    }</sourceline>
        <sourceline coveredcount="-1">    	  		    return;</sourceline>
        <sourceline coveredcount="-2">		        }</sourceline>
        <sourceline coveredcount="-1">		     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // php namespace support</sourceline>
        <sourceline coveredcount="5">			 $namespace = explode('\\', $this-&gt;class);</sourceline>
        <sourceline coveredcount="5">			 $className = array_pop($namespace);</sourceline>
        <sourceline coveredcount="5">			 $namespace = implode('\\', $namespace);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	 	     // Phar support</sourceline>
        <sourceline coveredcount="5">	  		 if(strpos($className, 'phar://') !== false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		     	 $className = str_replace('phar://', '', $className);</sourceline>
        <sourceline coveredcount="-1">		     	 $nspieces = explode('/', $className);</sourceline>
        <sourceline coveredcount="-1">		     	 array_pop($nspieces);</sourceline>
        <sourceline coveredcount="-1">		     	 $namespace = implode('\\', $nspieces);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	 $pieces = explode('/', $className);</sourceline>
        <sourceline coveredcount="-1">	  		 	 $className = array_pop($pieces);</sourceline>
        <sourceline coveredcount="-1">	  		 	 $className = str_replace('.php', '', $className);</sourceline>
        <sourceline coveredcount="-1">		     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		     // Create a new class using the intercepted target class prototype (class name and</sourceline>
        <sourceline coveredcount="0">		     // other associated keywords - namespace, extends, implements, etc).</sourceline>
        <sourceline coveredcount="0">	  	     try {</sourceline>
        <sourceline coveredcount="5">	  	            $code = ($namespace) ? 'namespace ' . $namespace . ';' : '';</sourceline>
        <sourceline coveredcount="5">	  		 		$code .= AgilePHP::getSource('InterceptorProxy');</sourceline>
        <sourceline coveredcount="0">	  	     }</sourceline>
        <sourceline coveredcount="5">	  	     catch(FrameworkException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     		throw new InterceptionException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">	  	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     // Replace the class declaration with that of the intercepted target's prototype</sourceline>
        <sourceline coveredcount="0">	  	     // so that keywords such as "extends" and "implements" and their parameters are</sourceline>
        <sourceline coveredcount="0">	  	     // preserved. This regex also copies the intercepted target's properties/fields</sourceline>
        <sourceline coveredcount="0">	  	     // into the proxy.</sourceline>
        <sourceline coveredcount="5">	  		 $code = preg_replace('/class\s.*{/',</sourceline>
        <sourceline coveredcount="5">	  		                      $prototype . '{' . PHP_EOL . PHP_EOL . "\t" . implode(PHP_EOL . "\t", $this-&gt;getPropertyStubs()),</sourceline>
        <sourceline coveredcount="5">	  		                      $code);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 $stubs = $this-&gt;getMethodStubs();</sourceline>
        <sourceline coveredcount="5">	  		 $proxyMethods = array('getInterceptedInstance', '__call', '__callstatic', '__initstatic');</sourceline>
        <sourceline coveredcount="5">	  		 $constructor = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Create method stubs in the proxy which match those in the intercepted class</sourceline>
        <sourceline coveredcount="5">	  		 for($i=0; $i&lt;count($stubs['signatures']); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 		if($stubs['methods'][$i] == '__construct') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 			$constructor = $stubs['signatures'][$i];</sourceline>
        <sourceline coveredcount="2">	  		 			continue;</sourceline>
        <sourceline coveredcount="-2">	  		 		}</sourceline>
        <sourceline coveredcount="5">	  		 		else if(in_array($stubs['methods'][$i], $proxyMethods)) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 		$call = preg_match('/static\s+/', $stubs['signatures'][$i]) ? 'self::__callstatic' : '$this-&gt;__call';</sourceline>
        <sourceline coveredcount="5">	  		 		$stub = $stubs['signatures'][$i] . ' { return ' . $call . '("' . $stubs['methods'][$i] . '", array' . $stubs['params'][$i] . '); } ';</sourceline>
        <sourceline coveredcount="5">	  		 		$code = preg_replace('/\}\s*\?&gt;/m', "\t" . $stub . PHP_EOL . '}' . PHP_EOL . '?&gt;', $code);</sourceline>
        <sourceline coveredcount="5">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Replace the InterceptorProxy constructor with that of the intercepted target.</sourceline>
        <sourceline coveredcount="5">	  		 if($constructor) $code = preg_replace('/(public|protected|private)?\sfunction\s__construct\(.*?\)\s{/sm', $constructor . ' {', $code);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 $code = $this-&gt;clean($code);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Log::debug('Interception::createInterceptorProxy ' . PHP_EOL . $code);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 if(@eval($code) === false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    Log::error('Interception::createInterceptorProxy ' . PHP_EOL . $code);</sourceline>
        <sourceline coveredcount="-1">	  		 	throw new InterceptionException('Failed to create interceptor proxy for \'' . $this-&gt;class . '\'.');</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Cache the source code for subsequent requests</sourceline>
        <sourceline coveredcount="5">	  		 if(isset($cacher)) $cacher-&gt;set($cacheKey, $code);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Extracts all property declarations from the intercepted target.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return mixed An array of property declarations or void if no properties could be extracted</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function getPropertyStubs() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	           $code = AgilePHP::getSource($this-&gt;class);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	           // If more than one class exists in the document, only the first class is parsed</sourceline>
        <sourceline coveredcount="5">	           preg_match('/^class\s.*?}.*?\n}\n/ms', $code, $classes);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	           if($classes[0]) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	               preg_match_all('/(private|protected|public|[^@]var)\s*(\$.*?;)/sm', $classes[0], $matches);</sourceline>
        <sourceline coveredcount="5">	               if(isset($matches[0])) return $matches[0];</sourceline>
        <sourceline coveredcount="-1">	           }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates public method stubs in the proxy class that match public methods</sourceline>
        <sourceline coveredcount="0">	   * in the intercepted target class. Without this in place, when using reflection</sourceline>
        <sourceline coveredcount="0">	   * on the intercepted target class name, the reflection results will actually be</sourceline>
        <sourceline coveredcount="0">	   * taking place on the InterceptorProxy class and not return expected results.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return array Returns an associative array which contains all method signatures,</sourceline>
        <sourceline coveredcount="0">	   * 			   methods, and their parameters for the intercepted class.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function getMethodStubs() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		  $code = AgilePHP::getSource($this-&gt;class);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		  preg_match_all('/[^static]\s(public\s+function\s+(.*?)(\(.*?\)))\s/sm', $code, $methods);</sourceline>
        <sourceline coveredcount="5">	  		  preg_match_all('/(static\s+.*function\s+(.*?)(\(.*\)))\s/', $code, $statics);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		  if(!isset($methods[1]) &amp;&amp; !isset($statics[1])) return array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		  $methods[1] = array_merge($methods[1], $statics[1]);</sourceline>
        <sourceline coveredcount="5">	  		  $methods[2] = array_merge($methods[2], $statics[2]);</sourceline>
        <sourceline coveredcount="5">	  		  $methods[3] = array_merge($methods[3], $statics[3]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  // Parameter names are gotten from the method signature</sourceline>
        <sourceline coveredcount="5">	  		  foreach($methods[3] as &amp;$params) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		       // Remove type hinting</sourceline>
        <sourceline coveredcount="5">	  		       preg_match_all('/\$[a-zA-Z0-9_]+/', $params, $args);</sourceline>
        <sourceline coveredcount="5">	  		       $params = '(' . implode(', ', $args[0]) . ')';</sourceline>
        <sourceline coveredcount="5">	  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		  $a['signatures'] = $methods[1];</sourceline>
        <sourceline coveredcount="5">	  		  $a['methods'] = $methods[2];</sourceline>
        <sourceline coveredcount="5">	  		  $a['params'] = $methods[3];</sourceline>
        <sourceline coveredcount="5">	  		  $this-&gt;static = count($methods[2]) == count($statics[2]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		  return $a;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Strips PHP open/close tags from source code document so it can be</sourceline>
        <sourceline coveredcount="0">	   * passed to PHP eval().</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $code The PHP code to clean</sourceline>
        <sourceline coveredcount="0">	   * @return The cleaned code</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function clean($code) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		  $code = str_replace('&lt;?php', '', $code);</sourceline>
        <sourceline coveredcount="5">	  		  $code = str_replace('?&gt;', '', $code);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		  return $code;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Validator" methodcount="1" methodscovered="1" statementcount="3" statementscovered="3" totalcount="4" totalcovered="4">
      <sourcefile name="Validator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Validator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Base implementation for validators</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">abstract class Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  protected $data;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new instance of Validator</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to validate</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 $this-&gt;data = $data;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Validates the data passed into the constructor.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return boolean True if the data is valid, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  abstract public function validate();</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Remoting" methodcount="13" methodscovered="0" statementcount="0" statementscovered="0" totalcount="13" totalcovered="0">
      <sourcefile name="Remoting.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Remoting.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">require_once 'webservice/remoting/RemotingException.php';</sourceline>
        <sourceline coveredcount="0">require_once 'webservice/remoting/RemoteMethod.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides client side JavaScript remoting to PHP objects. Handles</sourceline>
        <sourceline coveredcount="0"> * marshalling/unmarshalling of JSON objects between the client and server</sourceline>
        <sourceline coveredcount="0"> * as well as providing client side stubs for remote classes.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">abstract class Remoting extends BaseController {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 private $class;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Initalizes the Remoting instance when the extension class is created.</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @param String $class</sourceline>
        <sourceline coveredcount="0">	  	  * @return void</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">	  	 public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		    $this-&gt;createRenderer('AJAXRenderer');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				set_error_handler('Remoting::ErrorHandler');</sourceline>
        <sourceline coveredcount="0">				ob_start(array($this, 'captureErrors'));</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Loads a Remoting stub for the specified class and outputs it in JSON format</sourceline>
        <sourceline coveredcount="0">	      * to the client. If no class is specified a Remoting stub will be generated</sourceline>
        <sourceline coveredcount="0">	      * for the extension class.</sourceline>
        <sourceline coveredcount="0">	   	  *</sourceline>
        <sourceline coveredcount="0">	   	  * @param $class The class to remote</sourceline>
        <sourceline coveredcount="0">	   	  * @return void</sourceline>
        <sourceline coveredcount="0">	   	  * @throws RemotingException</sourceline>
        <sourceline coveredcount="0">	   	  */</sourceline>
        <sourceline coveredcount="0">	  	 public function index($class = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 		$clazz = ($class) ? $class : $this;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 		$c = new ReflectionClass($clazz);</sourceline>
        <sourceline coveredcount="0">	  	 		$this-&gt;class = $c-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 		$this-&gt;createStub();</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Sets the name of the class to remote</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @param String $class The class name to remote</sourceline>
        <sourceline coveredcount="0">	  	  * @return void</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">	  	 protected function setClass($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 		   $this-&gt;class = $class;</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Returns the name of the class being remoted</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @return The name of the class being remoted</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">	  	 protected function getClass() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 		   return $this-&gt;class;</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	   	  * Returns the current session id. If a session is not active a new</sourceline>
        <sourceline coveredcount="0">	   	  * session is created and the id is returned.</sourceline>
        <sourceline coveredcount="0">	   	  *</sourceline>
        <sourceline coveredcount="0">	   	  * @return String Session id for the current request</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">	  	 public function getSessionId() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		   $sessionId = Scope::getSessionScope()-&gt;getSessionId();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		   Log::debug('Remoting::getSessionId Returning session id \'' . $sessionId . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		   return $sessionId;</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Destroys the session used for stateful remoting</sourceline>
        <sourceline coveredcount="0">	 	  *</sourceline>
        <sourceline coveredcount="0">	   	  * @param String $sessionId The id of the session to destroy</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function destroySession($sessionId) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		    $session = Scope::getSessionScope()-&gt;setSessionId($sessionId);</sourceline>
        <sourceline coveredcount="0">	  		    $session-&gt;destroy();</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Creates a dynamic javascript proxy stub/interface used for remoting standard PHP classes.</sourceline>
        <sourceline coveredcount="0">		  * The generated code is output to the client in JSON format, intended for consumption from</sourceline>
        <sourceline coveredcount="0">		  * an HTML script src tag.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">	  	  * @return void</sourceline>
        <sourceline coveredcount="0">	  	  * @throws RemotingException</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 protected function createStub() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		   try {</sourceline>
        <sourceline coveredcount="0">		  		 		  $clazz = new AnnotatedClass($this-&gt;class);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 		  // Create javascript object w/ matching constructor parameters</sourceline>
        <sourceline coveredcount="0">		  		 		  $constructor = $clazz-&gt;getConstructor();</sourceline>
        <sourceline coveredcount="0">		  		 		  if($constructor) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 			  $js = 'function ' . $this-&gt;class . '(';</sourceline>
        <sourceline coveredcount="0">		  		 			  $params = $constructor-&gt;getParameters();</sourceline>
        <sourceline coveredcount="0">		  		 			  for($i=0; $i&lt;count($params); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 				   $js .= $params[$i]-&gt;getName();</sourceline>
        <sourceline coveredcount="0">		  		 				   $js .= ($i+1 &lt; count($params)) ? ', ' : '';</sourceline>
        <sourceline coveredcount="0">		  		 			  }</sourceline>
        <sourceline coveredcount="0">		  		 			  $js .= ") {\n";</sourceline>
        <sourceline coveredcount="0">		  		 			  for($i=0; $i&lt;count($params); $i++)</sourceline>
        <sourceline coveredcount="0">		  		 				   $js .= 'this.' . $params[$i]-&gt;getName() . ' = ' . $params[$i]-&gt;getName() . ";\n";</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 			  $js .= "}\n\n";</sourceline>
        <sourceline coveredcount="0">		  		 		  }</sourceline>
        <sourceline coveredcount="0">		  		 		  else</sourceline>
        <sourceline coveredcount="0">		  		 			  $js = 'function ' . $this-&gt;class . "() { }\n\n";</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 		  // create methods</sourceline>
        <sourceline coveredcount="0">		  		 		  $methods = $clazz-&gt;getMethods();</sourceline>
        <sourceline coveredcount="0">		  		 		  for($i=0; $i&lt;count($methods); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 				   if($methods[$i]-&gt;isAnnotated() &amp;&amp; $methods[$i]-&gt;hasAnnotation('RemoteMethod')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 				   	   // Make sure the remote class does not define a setCallback method</sourceline>
        <sourceline coveredcount="0">	  		 				   	   if($methods[$i]-&gt;getName() == 'setCallback')</sourceline>
        <sourceline coveredcount="0">	  		 				   	   	   throw new RemotingException('#@RemoteMethod setCallback is a reserved method and not allowed in class \'' . $this-&gt;class . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 				   	   // create function</sourceline>
        <sourceline coveredcount="0">		  		 				   $js .= $this-&gt;class . '.prototype.' . $methods[$i]-&gt;getName() . ' = function(';</sourceline>
        <sourceline coveredcount="0">		  		 				   $params = $methods[$i]-&gt;getParameters();</sourceline>
        <sourceline coveredcount="0">		  		 				   for($j=0; $j&lt;count($params); $j++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 				 	 	$js .= $params[$j]-&gt;getName();</sourceline>
        <sourceline coveredcount="0">		  		 				 	 	$js .= (($j+1) &lt; count($params)) ? ', ' : '';</sourceline>
        <sourceline coveredcount="0">		  		 				   }</sourceline>
        <sourceline coveredcount="0">		  		 				   $js .= ") {\n\n";</sourceline>
        <sourceline coveredcount="0">		  		 				   // function body</sourceline>
        <sourceline coveredcount="0">		  		 				   $js .= "\treturn AgilePHP.Remoting.invoke(this, '" . $methods[$i]-&gt;getName() . "', arguments);\n";</sourceline>
        <sourceline coveredcount="0">		  		 				   // function closure</sourceline>
        <sourceline coveredcount="0">	  		 				 	   $js .= "}\n\n";</sourceline>
        <sourceline coveredcount="0">	  		 				   }</sourceline>
        <sourceline coveredcount="0">		  		 		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 		  // Remoting internals - store class name and callback hook</sourceline>
        <sourceline coveredcount="0">		  		 		  $js .= $this-&gt;class . ".prototype._class = '" . $this-&gt;class . "';\n";</sourceline>
        <sourceline coveredcount="0">	 				 	  $js .= $this-&gt;class . ".prototype._callback = null;\n";</sourceline>
        <sourceline coveredcount="0">	  		 			  $js .= $this-&gt;class . ".prototype.setCallback = function(func) {\n" .</sourceline>
        <sourceline coveredcount="0">	  		 			  				"\tthis._callback = func;\n}\n";</sourceline>
        <sourceline coveredcount="0">		  		 		  echo $js;</sourceline>
        <sourceline coveredcount="0">		  		 }</sourceline>
        <sourceline coveredcount="0">		  		 catch(Exception $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 		throw new RemotingException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">		  		 }</sourceline>
        <sourceline coveredcount="0">		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  /**</sourceline>
        <sourceline coveredcount="0">	       * Invokes a non-persistent/stateful instance of the requested class/method</sourceline>
        <sourceline coveredcount="0">	       * passing in arguments if any were defined. This non-stateful approach is</sourceline>
        <sourceline coveredcount="0">	       * how most RPC web services work.</sourceline>
        <sourceline coveredcount="0">	       *</sourceline>
        <sourceline coveredcount="0">	   	   * @return mixed Returns the result of the invocation</sourceline>
        <sourceline coveredcount="0">	   	   * @throws RemotingException</sourceline>
        <sourceline coveredcount="0">	       */</sourceline>
        <sourceline coveredcount="0">	      public function invoke() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	     $request = Scope::getRequestScope();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	     $stateful = $request-&gt;getSanitized('stateful');</sourceline>
        <sourceline coveredcount="0">	    	     if($stateful) $this-&gt;invokeStateful();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	     $class = $request-&gt;getSanitized('class');</sourceline>
        <sourceline coveredcount="0">	    	     $method = $request-&gt;getSanitized('method');</sourceline>
        <sourceline coveredcount="0">	    	     $constructorArgs = $this-&gt;decode($request-&gt;getSanitized('constructorArgs'));</sourceline>
        <sourceline coveredcount="0">	    	     $args = $this-&gt;decode($request-&gt;getSanitized('parameters'));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	     // Security, Security, Security...</sourceline>
        <sourceline coveredcount="0">	    	     $clazz = new AnnotatedClass($class);</sourceline>
        <sourceline coveredcount="0">	    	     $methods = $clazz-&gt;getMethods();</sourceline>
        <sourceline coveredcount="0">	    	     for($i=0; $i&lt;count($methods); $i++)</sourceline>
        <sourceline coveredcount="0">	  		 		 if($methods[$i]-&gt;getName() == $method &amp;&amp; !$methods[$i]-&gt;hasAnnotation('RemoteMethod'))</sourceline>
        <sourceline coveredcount="0">	  		 		 	 throw new RemotingException('No hacking please...');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		     Log::debug('Remoting::invoke Invoking class \'' . $class . '\', method \'' . $method .</sourceline>
        <sourceline coveredcount="0">	  		 	   	 '\', constructorArgs \'' . print_r($constructorArgs, true) . '\', args \'' . print_r($args, true) . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		     try {</sourceline>
        <sourceline coveredcount="0">		  	           $clazz = new ReflectionClass($class);</sourceline>
        <sourceline coveredcount="0">		  	           $instance = $constructorArgs ? $clazz-&gt;newInstanceArgs((array)$constructorArgs) : $clazz-&gt;newInstance();</sourceline>
        <sourceline coveredcount="0">		  		       $m = $clazz-&gt;getMethod($method);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		       $this-&gt;getRenderer()-&gt;render($args ? $m-&gt;invokeArgs($instance, (array)$args) : $m-&gt;invoke($instance));</sourceline>
        <sourceline coveredcount="0">	  		     }</sourceline>
        <sourceline coveredcount="0">	  		     catch(Exception $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		    throw new RemotingException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">	  		     }</sourceline>
        <sourceline coveredcount="0">	      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  /**</sourceline>
        <sourceline coveredcount="0">		   * Overloads the getBaseJS method defined in BaseController to return the client side AgilePHP</sourceline>
        <sourceline coveredcount="0">		   * library with default AgilePHP.Remoting.controller value pre-defined according to the</sourceline>
        <sourceline coveredcount="0">		   * controller which invoked the call.</sourceline>
        <sourceline coveredcount="0">		   *</sourceline>
        <sourceline coveredcount="0">		   * @param bool $debug True to enable client side AgilePHP debugging.</sourceline>
        <sourceline coveredcount="0">		   * @return void</sourceline>
        <sourceline coveredcount="0">		   */</sourceline>
        <sourceline coveredcount="0">		  public function getBaseJS($debug = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 $js = file_get_contents(AgilePHP::getFrameworkRoot() . DIRECTORY_SEPARATOR . 'AgilePHP.js');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 if($debug) $js .= "\nAgilePHP.setDebug(true);";</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 $js .= "\nAgilePHP.setRequestBase('" . AgilePHP::getRequestBase() . "');";</sourceline>
        <sourceline coveredcount="0">		  		 $js .= "\nAgilePHP.Remoting.setController('" . MVC::getController() . "');";</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 header('content-type: application/json');</sourceline>
        <sourceline coveredcount="0">		  		 print $js;</sourceline>
        <sourceline coveredcount="0">		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  /**</sourceline>
        <sourceline coveredcount="0">		   * Decodes JSON formatted POST variables into a PHP object.</sourceline>
        <sourceline coveredcount="0">		   *</sourceline>
        <sourceline coveredcount="0">		   * @param String $data The client side JSON object to parse</sourceline>
        <sourceline coveredcount="0">		   * @return stdClass The JSON decoded stdClass object</sourceline>
        <sourceline coveredcount="0">		   * @throws RemotingException if the received data does not unmarshall into a PHP object</sourceline>
        <sourceline coveredcount="0">		   */</sourceline>
        <sourceline coveredcount="0">		  private function decode($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		  if(!$data) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		  Log::debug('Remoting::decode ' . $data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		  $o = json_decode(htmlspecialchars_decode(stripslashes(urldecode($data))));</sourceline>
        <sourceline coveredcount="0">		  		  if(!is_object($o)) throw new RemotingException('Malformed data');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		  return $o;</sourceline>
        <sourceline coveredcount="0">		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  /**</sourceline>
        <sourceline coveredcount="0">		   * Parses each PHP output buffer for php fatal error and converts to RemotingException if present.</sourceline>
        <sourceline coveredcount="0">		   *</sourceline>
        <sourceline coveredcount="0">		   * @param string $buffer PHP output buffer</sourceline>
        <sourceline coveredcount="0">		   * @return void</sourceline>
        <sourceline coveredcount="0">		   * throws RemotingException</sourceline>
        <sourceline coveredcount="0">		   */</sourceline>
        <sourceline coveredcount="0">		  public function captureErrors($buffer) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				 $matches = array();</sourceline>
        <sourceline coveredcount="0">				 $errors = '';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				 if(preg_match('/(error&lt;\/b&gt;:)(.+)(&lt;br)/', $buffer, $regs)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				 	 $err = preg_replace("/&lt;.*?&gt;/","",$regs[2]);</sourceline>
        <sourceline coveredcount="0">			         $buffer = json_encode(array('_class' =&gt; 'RemotingException', 'message' =&gt; $err, 'trace' =&gt; debug_backtrace()));</sourceline>
        <sourceline coveredcount="0">			     }</sourceline>
        <sourceline coveredcount="0">			     return $buffer;</sourceline>
        <sourceline coveredcount="0">		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  /**</sourceline>
        <sourceline coveredcount="0">		   * Custom PHP error handling function which throws an RemotingException instead of echoing.</sourceline>
        <sourceline coveredcount="0">		   *</sourceline>
        <sourceline coveredcount="0">		   * @param Integer $errno Error number</sourceline>
        <sourceline coveredcount="0">		   * @param String $errmsg Error message</sourceline>
        <sourceline coveredcount="0">		   * @param String $errfile The name of the file that caused the error</sourceline>
        <sourceline coveredcount="0">		   * @param Integer $errline The line number that caused the error</sourceline>
        <sourceline coveredcount="0">		   * @return false</sourceline>
        <sourceline coveredcount="0">		   * @throws FrameworkException</sourceline>
        <sourceline coveredcount="0">		   */</sourceline>
        <sourceline coveredcount="0">	 	  public static function ErrorHandler($errno, $errmsg, $errfile, $errline) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	 	  		 $entry = PHP_EOL . 'Number: ' . $errno . PHP_EOL . 'Message: ' . $errmsg .</sourceline>
        <sourceline coveredcount="0">	 	  		 		  PHP_EOL . 'File: ' . $errfile . PHP_EOL . 'Line: ' . $errline;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	 	  		 throw new RemotingException($errmsg, $errno, $errfile, $errline);</sourceline>
        <sourceline coveredcount="0">		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  /**</sourceline>
        <sourceline coveredcount="0">		   * Flush PHP output buffer and restore error handler</sourceline>
        <sourceline coveredcount="0">		   */</sourceline>
        <sourceline coveredcount="0">		  public function __destruct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 ob_end_flush();</sourceline>
        <sourceline coveredcount="0">		  		 restore_error_handler();</sourceline>
        <sourceline coveredcount="0">		  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="MVC" methodcount="18" methodscovered="0" statementcount="141" statementscovered="3" totalcount="159" totalcovered="3">
      <sourcefile name="MVC.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/MVC.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">require 'mvc/BaseController.php';</sourceline>
        <sourceline coveredcount="0">require 'mvc/BaseRenderer.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Model-View-Control (MVC) component</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">final class MVC {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private static $defaultController = 'IndexController';</sourceline>
        <sourceline coveredcount="0">	  private static $defaultAction = 'index';</sourceline>
        <sourceline coveredcount="0">	  private static $defaultRenderer = 'PHTMLRenderer';</sourceline>
        <sourceline coveredcount="0">	  private static $controller;</sourceline>
        <sourceline coveredcount="0">	  private static $action;</sourceline>
        <sourceline coveredcount="0">	  private static $parameters;</sourceline>
        <sourceline coveredcount="0">	  private static $sanitize = true;</sourceline>
        <sourceline coveredcount="0">	  private static $cacheables;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private function __construct() { }</sourceline>
        <sourceline coveredcount="0">	  private function __clone() {}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initalizes the MVC component with agilephp.xml configuration.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param SimpleXMLElement $config SimpleXMLElement containing the MVC configuration.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function init($controller, $action, $renderer, $sanitize, $cacheables) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if($controller) self::$defaultController = $controller;</sourceline>
        <sourceline coveredcount="-1">	  		 if($action) self::$defaultAction = $action;</sourceline>
        <sourceline coveredcount="-1">	  		 if($renderer) self::$defaultRenderer = $renderer;</sourceline>
        <sourceline coveredcount="-1">	  		 if($sanitize) self::$sanitize = $sanitize;</sourceline>
        <sourceline coveredcount="-1">	  		 if($cacheables) self::$cacheables = $cacheables;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the default controller which is used if one is not</sourceline>
        <sourceline coveredcount="0">	   * specified in the request URI. Default is 'IndexController'.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $name The name of the controller</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setDefaultController($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     self::$defaultController = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of a default controller if one is not specified</sourceline>
        <sourceline coveredcount="0">	   * in the request URI. Default is 'IndexController'.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The name of the default controller</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getDefaultController() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     return self::$defaultController;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the default action method if one is not specified</sourceline>
        <sourceline coveredcount="0">	   * in the request URI. Default is 'index'.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $name The name of the default action method</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setDefaultAction($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     self::$defaultAction = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of a default action method if one is not specified</sourceline>
        <sourceline coveredcount="0">	   * in the request URI. Default is 'index'.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The name of the default action method</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getDefaultAction() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     return self::$defaultAction;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the default view renderer. Default is 'PHTMLRenderer'.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $renderer The name of a view renderer to use as the default</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setDefaultRenderer($renderer) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     self::$defaultRenderer = $renderer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the default view renderer</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The default view renderer</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getDefaultRenderer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     return self::$defaultRenderer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the controller currently in use.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The name of the controller in use by the MVC component.</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getController() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return self::$controller;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the action currently being invoked.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The name of the action currently being invoked.</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getAction() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return self::$action;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the action parameters specified in the request</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Array Parameters passed to the invoked action</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getParameters() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return self::$parameters;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Parses the current request URI to obtain the controller, action method, and arguments</sourceline>
        <sourceline coveredcount="0">	   * present for this request and then performs the invocation. If these parameters ARE NOT</sourceline>
        <sourceline coveredcount="0">	   * present, the default controller and default action method are used instead.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * NOTE: The URI requirement to communicate with this MVC system is as follows</sourceline>
        <sourceline coveredcount="0">	   *       http://domain.com/ScriptName.php/ControllerName/ActionMethod/arg1/arg2/arg3/etc...</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function dispatch($controller = null, $action = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $path = (isset($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : '/';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if(self::$cacheables &amp;&amp; ($cacher = AgilePHP::getCacher())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    $cacheKey = 'AGILEPHP_MVC_' . $path;</sourceline>
        <sourceline coveredcount="-1">	  		    if($cacher-&gt;exists($cacheKey)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		           $data = $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">		           if($data['contentType']) header('content-type: ' . $data['contentType']);</sourceline>
        <sourceline coveredcount="-1">	  		       echo $data['html'];</sourceline>
        <sourceline coveredcount="-1">	  		       return;</sourceline>
        <sourceline coveredcount="-2">	  		    }</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if(!$controller) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    	  		// Capture everything after the first occurrence of '.php'</sourceline>
        <sourceline coveredcount="-1">    		  	preg_match('/^.*?\.php(.*)/si', $path, $matches);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    	  	    if(isset($matches[0])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		  	   $parameters = explode('/', $matches[count($matches)-1]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    			   // Assign controller and action</sourceline>
        <sourceline coveredcount="-1">    		  	   $controller = isset($parameters[1]) ? $parameters[1] : self::$defaultController;</sourceline>
        <sourceline coveredcount="-1">    		  	   $action = isset($parameters[2]) ? $parameters[2] : self::$defaultAction;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    		  	   // Remove empty element, controller and action values</sourceline>
        <sourceline coveredcount="-1">    		  	   array_splice($parameters, 0, 3);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    		  	   // Security, Security, Security....</sourceline>
        <sourceline coveredcount="-1">    		  	   $controller = addslashes(strip_tags($controller));</sourceline>
        <sourceline coveredcount="-1">    		  	   $action = addslashes(strip_tags($action));</sourceline>
        <sourceline coveredcount="-1">    	  	    }</sourceline>
        <sourceline coveredcount="-1">	  		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	    if(!$controller) $controller = self::$defaultController;</sourceline>
        <sourceline coveredcount="-1">	  	    if(!$action) $action = self::$defaultAction;</sourceline>
        <sourceline coveredcount="-1">	  	    if(!isset($parameters)) $parameters = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	    self::$controller = $controller;</sourceline>
        <sourceline coveredcount="-1">            self::$action = $action;</sourceline>
        <sourceline coveredcount="-1">            self::$parameters = $parameters;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	    if(!class_exists($controller, false)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	        $webroot = AgilePHP::getWebRoot();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	        // PHAR support</sourceline>
        <sourceline coveredcount="-1">	  	     	$phar = $webroot . DIRECTORY_SEPARATOR . 'control' .</sourceline>
        <sourceline coveredcount="-1">	  		  				DIRECTORY_SEPARATOR . $controller . '.phar';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  	if(file_exists($phar)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  	   require $phar;</sourceline>
        <sourceline coveredcount="-1">	  		  	   $oController = new $controller;</sourceline>
        <sourceline coveredcount="-1">	  		  	}</sourceline>
        <sourceline coveredcount="0">	  		  	else // web application controller</sourceline>
        <sourceline coveredcount="-1">	  	     	   $oController = self::loadController($webroot, $controller);</sourceline>
        <sourceline coveredcount="-1">	  	     }</sourceline>
        <sourceline coveredcount="0">	  	     else // controller already loaded</sourceline>
        <sourceline coveredcount="-1">	  	        $oController = new $controller;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     // Sanitize action arguments unless configured otherwise</sourceline>
        <sourceline coveredcount="-1">             if(self::$sanitize)</sourceline>
        <sourceline coveredcount="-1">     		    foreach($parameters as $key =&gt; $val)</sourceline>
        <sourceline coveredcount="-1">		  	 	   $parameters[$key] = addslashes(strip_tags($val));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     // Make sure requested action method exists</sourceline>
        <sourceline coveredcount="-1">		     if(!method_exists($controller, $action))</sourceline>
        <sourceline coveredcount="-1">		  	    throw new FrameworkException('The specified action \'' . $action . '\' does not exist.', 102);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	 // Cache the output if caching is enabled</sourceline>
        <sourceline coveredcount="-1">		     if(isset($cacher) &amp;&amp; self::$cacheables)</sourceline>
        <sourceline coveredcount="-1">		        if(self::cacheDispatch($oController, $cacher, $cacheKey)) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		     // Execute the controller action - caching is not enabled</sourceline>
        <sourceline coveredcount="-1">		     call_user_func_array(array($oController, $action), $parameters);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a new instance of the default view renderer</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Object An instance of the default renderer</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function createDefaultRenderer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     $path = AgilePHP::getFrameworkRoot() . '/mvc/' . self::$defaultRenderer . '.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     if(!file_exists($path))</sourceline>
        <sourceline coveredcount="-1">	  	     	throw new FrameworkException('Default framework renderer could not be loaded from: ' . $path, 103);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     require_once $path;</sourceline>
        <sourceline coveredcount="-1">	  	     return new self::$defaultRenderer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a new instance of the specified view renderer</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Object An instance of the specified renderer</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function createRenderer($renderer) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     $path = AgilePHP::getFrameworkRoot() . '/mvc/' . $renderer . '.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     Log::debug('MVC::createRenderer loading renderer: ' . $renderer);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if(!file_exists($path))</sourceline>
        <sourceline coveredcount="-1">	  	     	throw new FrameworkException('Framework renderer could not be loaded from: ' . $path, 104);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 require_once $path;</sourceline>
        <sourceline coveredcount="-1">	  		 return new $renderer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a new instance of the specified renderer. The renderer is loaded from</sourceline>
        <sourceline coveredcount="0">	   * the web app 'classes' directory.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $renderer The name of the custom view renderer</sourceline>
        <sourceline coveredcount="0">	   * @param $classpath A relative child path under the webapp's 'classes' folder where the renderer is located.</sourceline>
        <sourceline coveredcount="0">	   * @return Object A new instance of the custom renderer</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function createCustomRenderer($renderer, $classpath='') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     $path = AgilePHP::getWebRoot() . '/classes/' . $classpath . '/' . $renderer . '.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     Log::debug('MVC::createDefaultRenderer loading custom renderer: ' . $renderer);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     if(!file_exists($path))</sourceline>
        <sourceline coveredcount="-1">	  	     	 throw new FrameworkException('Custom renderer could not be loaded from: ' . $path, 105);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     require_once $path;</sourceline>
        <sourceline coveredcount="-1">	  	     return new $renderer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Dispatches the request to the appropriate controller/action using output buffering</sourceline>
        <sourceline coveredcount="0">	   * to capture and cache the response.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param BaseController $oController The controller instance to dispatch the request to</sourceline>
        <sourceline coveredcount="0">	   * @param CacheProvider $cacher The cache provider instance responsible for handling the cached data</sourceline>
        <sourceline coveredcount="0">	   * @param string $cacheKey The cache key used to store and retrieve the requested data</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private static function cacheDispatch(BaseController $oController, $cacher, $cacheKey) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	          foreach(self::$cacheables as $cacheable) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		            if($cacheable-&gt;attributes()-&gt;controller == self::$controller &amp;&amp;</sourceline>
        <sourceline coveredcount="-1">		               ($cacheable-&gt;attributes()-&gt;action == self::$action || $cacheable-&gt;attributes()-&gt;action == '*')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		                   // Cache according to parameter values if configured</sourceline>
        <sourceline coveredcount="-1">		                   if($parameters = $cacheable-&gt;attributes()-&gt;parameters) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		                      $xmlParams = explode('/', $parameters);</sourceline>
        <sourceline coveredcount="-1">		                      if(count($xmlParams) != count(self::$parameters)) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		                      for($i=0; $i&lt;count(self::$parameters); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    		                      // Regex comparison/support</sourceline>
        <sourceline coveredcount="-1">    		                      if($xmlParams[$i][0] == '^') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		                         if(!preg_match('/' . $xmlParams[$i] . '/', self::$parameters[$i]))</sourceline>
        <sourceline coveredcount="-1">    		                            $return = true;</sourceline>
        <sourceline coveredcount="0">    		                         else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		                            $return = false;</sourceline>
        <sourceline coveredcount="-1">    		                            break;</sourceline>
        <sourceline coveredcount="0">    		                         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		                         continue;</sourceline>
        <sourceline coveredcount="-2">    		                      }</sourceline>
        <sourceline coveredcount="0">    		                      // String literal comparison</sourceline>
        <sourceline coveredcount="0">    		                      else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		                          if(self::$parameters[$i] != $xmlParams[$i])</sourceline>
        <sourceline coveredcount="-1">    		                             $return = true;</sourceline>
        <sourceline coveredcount="0">    		                          else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		                             $return = false;</sourceline>
        <sourceline coveredcount="-1">    		                             break;</sourceline>
        <sourceline coveredcount="0">    		                          }</sourceline>
        <sourceline coveredcount="0">    		                          // $return = (self::$parameters[$i] == $xmlParams[$i]);</sourceline>
        <sourceline coveredcount="0">    		                      }</sourceline>
        <sourceline coveredcount="-1">		                      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		                      if($return) return false;</sourceline>
        <sourceline coveredcount="-1">		                   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		                   // Use content-type header if configured</sourceline>
        <sourceline coveredcount="-1">		                   if($contentType = (string)$cacheable-&gt;attributes()-&gt;contentType) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		                      if($contentType == 'HTTP_ACCEPT') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                    	  		  $clientMimes = array();</sourceline>
        <sourceline coveredcount="-1">                    			  foreach(explode(',', $_SERVER['HTTP_ACCEPT']) as $mimeType) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                    					  $item = explode(';', $mimeType);</sourceline>
        <sourceline coveredcount="-1">                    					  $clientMimes[$item[0]] = floatval(array_key_exists(1, $item) ? substr($item[1], 2) : 1);</sourceline>
        <sourceline coveredcount="-1">                    			  }</sourceline>
        <sourceline coveredcount="-1">                    			  arsort($clientMimes);</sourceline>
        <sourceline coveredcount="-1">                    			  $contentType = array_pop($clientMimes);</sourceline>
        <sourceline coveredcount="-1">		                      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		                      header('content-type: ' . $contentType);</sourceline>
        <sourceline coveredcount="-1">		                   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		                   $ttl = (int)$cacheable-&gt;attributes()-&gt;ttl;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		                   ob_start();</sourceline>
        <sourceline coveredcount="-1">              	     	   call_user_func_array(array($oController, self::$action), self::$parameters);</sourceline>
        <sourceline coveredcount="-1">              	     	   $data = array('html' =&gt; ob_get_flush(), 'contentType' =&gt; (isset($contentType) ? $contentType : null));</sourceline>
        <sourceline coveredcount="-1">              	     	   $cacher-&gt;set($cacheKey, $data, $ttl);</sourceline>
        <sourceline coveredcount="-1">              	     	   return true;</sourceline>
        <sourceline coveredcount="-2">		               }</sourceline>
        <sourceline coveredcount="-1">		        }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Loads the requested controller / class ONLY if it exists in the web application controller directory.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $controller The name of the controller to load.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws FrameworkException if the requested controller could not be found.</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private static function loadController($webroot, $controller) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	          // PHP namespace support</sourceline>
        <sourceline coveredcount="-1">	          $controller = str_replace('\\\\', '\\', $controller);</sourceline>
        <sourceline coveredcount="-1">	          $namespace = explode('\\', $controller);</sourceline>
        <sourceline coveredcount="-1">	  		  $className = array_pop($namespace);</sourceline>
        <sourceline coveredcount="-1">	  		  $namespace = implode(DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  // Load the controller from the application control directory</sourceline>
        <sourceline coveredcount="-1">	  		  if(file_exists($webroot . DIRECTORY_SEPARATOR . 'control' . DIRECTORY_SEPARATOR .</sourceline>
        <sourceline coveredcount="-1">	  		              $namespace . $className . '.php'))</sourceline>
        <sourceline coveredcount="-1">	  		     return new $controller;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  // Load the controller from component control directory</sourceline>
        <sourceline coveredcount="-1">	  		  if(strpos($controller, '\\') !== false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		     $path = $webroot . DIRECTORY_SEPARATOR . 'components' . DIRECTORY_SEPARATOR</sourceline>
        <sourceline coveredcount="-1">  		                 . $namespace . $className . '.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		         if(file_exists($path))</sourceline>
        <sourceline coveredcount="-1">	  		        return new $controller;</sourceline>
        <sourceline coveredcount="-1">	  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  // Perform deep scan of control directory</sourceline>
        <sourceline coveredcount="-1">		  	  $it = new RecursiveDirectoryIterator($webroot . DIRECTORY_SEPARATOR . 'control');</sourceline>
        <sourceline coveredcount="-1">			  foreach(new RecursiveIteratorIterator($it) as $file) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			   	      if(substr($file, -1) != '.' &amp;&amp; substr($file, -2) != '..') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			   	       	 $pieces = explode(DIRECTORY_SEPARATOR, $file);</sourceline>
        <sourceline coveredcount="-1">			   	      	 $item = array_pop($pieces);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			   	      	 if($item == $controller . '.php')</sourceline>
        <sourceline coveredcount="-1">				 		    return new $controller;</sourceline>
        <sourceline coveredcount="-1">				      }</sourceline>
        <sourceline coveredcount="-1">			  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  throw new FrameworkException('The requested controller \'' . $controller . '\' could not be found.', 106);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Mailer" methodcount="7" methodscovered="7" statementcount="14" statementscovered="14" totalcount="21" totalcovered="21">
      <sourcefile name="Mailer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Mailer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Sends simple plain text emails.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">abstract class Mailer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $to;</sourceline>
        <sourceline coveredcount="0">	  private $toName;</sourceline>
        <sourceline coveredcount="0">	  private $from;</sourceline>
        <sourceline coveredcount="0">	  private $fromName;</sourceline>
        <sourceline coveredcount="0">	  private $subject;</sourceline>
        <sourceline coveredcount="0">	  private $body;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the email address of the person receiving the email</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $email The recipients email address</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setTo($email) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;to = $email;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the person receiving the email</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The recipients name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setToName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the email of the person sending the email</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $email The senders email address</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setFrom($email) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;from = $email;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the person sending the email</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The senders name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setFromName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;fromName = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the subject line of the email</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $subject The text to display in the subject line</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setSubject($subject) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;subject = $subject;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the email message body</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $body The email message body</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setBody($body) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;body = $body;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sends the email</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws FrameworkException if there was an error sending</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function send() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $headers = 'From: ' . $this-&gt;fromName . ' &lt;' . $this-&gt;from . '&gt;' . "\n";</sourceline>
        <sourceline coveredcount="1">        	 $headers .= 'Reply-To: ' . $this-&gt;from . "\n";</sourceline>
        <sourceline coveredcount="1">          	 $headers .= 'Return-Path: ' . $this-&gt;from . "\n";</sourceline>
        <sourceline coveredcount="1">        	 $headers .= 'X-mailer: AgilePHP Framework on PHP (' . phpversion() . ')' . "\n";</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        	 if(!mail($this-&gt;to, $this-&gt;subject, $this-&gt;body, $headers))</sourceline>
        <sourceline coveredcount="1">        	 	 throw new FrameworkException('Error sending email');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Annotation" methodcount="9" methodscovered="0" statementcount="55" statementscovered="20" totalcount="64" totalcovered="20">
      <sourcefile name="Annotation.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Annotation.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Includes all annotation package dependencies</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">require_once 'annotation/AnnotationParser.php';</sourceline>
        <sourceline coveredcount="0">require_once 'annotation/AnnotatedClass.php';</sourceline>
        <sourceline coveredcount="0">require_once 'annotation/AnnotatedMethod.php';</sourceline>
        <sourceline coveredcount="0">require_once 'annotation/AnnotatedProperty.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Static facade for AgilePHP annotation data types.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class Annotation {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private function __construct() {}</sourceline>
        <sourceline coveredcount="0">	  private function __clone() {}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Static factory method used to retrieve AnnotatedClass instances. Uses</sourceline>
        <sourceline coveredcount="0">	   * AgilePHP CacheProvider if enabled.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $class The class name or instance to inspect</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws AnnotationException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getClass($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	         if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	            $cacheKey = 'AGILEPHP_ANNOTATION_CLASS_' . $class;</sourceline>
        <sourceline coveredcount="-1">	            if($cacher-&gt;exists($cacheKey))</sourceline>
        <sourceline coveredcount="-1">	               return $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">	         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	         $c = new AnnotatedClass($class);</sourceline>
        <sourceline coveredcount="4">	         if(isset($cacher)) $cacher-&gt;set($cacheKey, $c);</sourceline>
        <sourceline coveredcount="4">	  		 return $c;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Static factory method used to retrieve AnnotatedMethod instances. Uses</sourceline>
        <sourceline coveredcount="0">	   * AgilePHP CacheProvider if enabled.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $class The class name or instance to inspect.</sourceline>
        <sourceline coveredcount="0">	   * @param String $name The method name</sourceline>
        <sourceline coveredcount="0">	   * @return AnnotatedMethod</sourceline>
        <sourceline coveredcount="0">	   * @throws AnnotationException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getMethod($class, $method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	            $cacheKey = 'AGILEPHP_ANNOTATION_METHOD_' . $class . $method;</sourceline>
        <sourceline coveredcount="-1">	            if($cacher-&gt;exists($cacheKey))</sourceline>
        <sourceline coveredcount="-1">	               return $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">	         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         $m = new AnnotatedMethod($class, $method);</sourceline>
        <sourceline coveredcount="1">	         if(isset($cacher)) $cacher-&gt;set($cacheKey, $m);</sourceline>
        <sourceline coveredcount="1">	  		 return $m;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Static factory method used to retrieve AnnotatedProperty instances. Uses</sourceline>
        <sourceline coveredcount="0">	   * AgilePHP CacheProvider if enabled.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $class The class name or instance to inspect</sourceline>
        <sourceline coveredcount="0">	   * @param String $property The property name</sourceline>
        <sourceline coveredcount="0">	   * @return AnnotatedProperty</sourceline>
        <sourceline coveredcount="0">	   * @throws AnnotationException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getProperty($class, $property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	            $cacheKey = 'AGILEPHP_ANNOTATION_PROPERTY_' . $class . $property;</sourceline>
        <sourceline coveredcount="-1">	            if($cacher-&gt;exists($cacheKey))</sourceline>
        <sourceline coveredcount="-1">	               return $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">	         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         $p = new AnnotatedProperty($class, $property);</sourceline>
        <sourceline coveredcount="-1">	         if(isset($cacher)) $cacher-&gt;set($cacheKey, $p);</sourceline>
        <sourceline coveredcount="-1">	         return $p;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns true if the specified class contains and class, method, or</sourceline>
        <sourceline coveredcount="0">	   * property level annotations.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $class The class name or instance to inspect</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the class contains any class, method, or property</sourceline>
        <sourceline coveredcount="0">	   * 		 	   level annotations.</sourceline>
        <sourceline coveredcount="0">	   * @throws AnnotationException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function hasAnnotations($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $clazz = new AnnotatedClass($class);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if($clazz-&gt;isAnnotated()) return true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($clazz-&gt;getMethods() as $method)</sourceline>
        <sourceline coveredcount="-1">	  		 		  if($method-&gt;isAnnotated()) return true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($clazz-&gt;getProperties() as $property)</sourceline>
        <sourceline coveredcount="-1">	  		 		  if($property-&gt;isAnnotated()) return true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an array of class level annotations for the specified class.</sourceline>
        <sourceline coveredcount="0">	   * Tries to return a cached set of results first. If no annotations are</sourceline>
        <sourceline coveredcount="0">	   * found the specified class is then parsed and the new result is returned. Uses</sourceline>
        <sourceline coveredcount="0">	   * AgilePHP CacheProvider if enabled.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $class The class name or instance to inspect.</sourceline>
        <sourceline coveredcount="0">	   * @return array Array of class level annotations</sourceline>
        <sourceline coveredcount="0">	   * @throws AnnotationException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getClassAsArray($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">	        if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	            $cacheKey = 'AGILEPHP_ANNOTATION_CLASS_ARRAY_' . $class;</sourceline>
        <sourceline coveredcount="-1">	            if($cacher-&gt;exists($cacheKey))</sourceline>
        <sourceline coveredcount="-1">	               return $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">	         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">	  	     $annotes = AnnotationParser::getClassAnnotationsAsArray($class);</sourceline>
        <sourceline coveredcount="20">	  	     if(isset($cacher)) $cacher-&gt;set($cacheKey, $annotes);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">	  	     return $annotes;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an array of method level annotations for the specified class/method. Uses</sourceline>
        <sourceline coveredcount="0">	   * AgilePHP CacheProvider if enabled.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $class The class name or instance to inspect</sourceline>
        <sourceline coveredcount="0">	   * @return array Array of method level annotations</sourceline>
        <sourceline coveredcount="0">	   * @throws AnnotationException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getMethodsAsArray($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">	         if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	            $cacheKey = 'AGILEPHP_ANNOTATION_METHODS_ARRAY_' . $class;</sourceline>
        <sourceline coveredcount="-1">	            if($cacher-&gt;exists($cacheKey))</sourceline>
        <sourceline coveredcount="-1">	               return $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">	         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">	  	     $annotes = AnnotationParser::getMethodAnnotationsAsArray($class);</sourceline>
        <sourceline coveredcount="20">	  	     if(isset($cacher)) $cacher-&gt;set($cacheKey, $annotes);</sourceline>
        <sourceline coveredcount="20">	  	     return $annotes;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an array of property level annotations for the specified class/property.</sourceline>
        <sourceline coveredcount="0">	   * Tries to return a caches set of annotations first. If no annotations are</sourceline>
        <sourceline coveredcount="0">	   * found then the specified class is then parsed and the new result is returned. Uses</sourceline>
        <sourceline coveredcount="0">	   * AgilePHP CacheProvider if enabled.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $class The class name or instance to inspect</sourceline>
        <sourceline coveredcount="0">	   * @return Array of class level annotations</sourceline>
        <sourceline coveredcount="0">	   * @throws AnnotationException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getPropertiesAsArray($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">	         if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	            $cacheKey = 'AGILEPHP_ANNOTATION_PROPERTIES_ARRAY_' . $class;</sourceline>
        <sourceline coveredcount="-1">	            if($cacher-&gt;exists($cacheKey))</sourceline>
        <sourceline coveredcount="-1">	               return $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">	         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">	  	     $annotes = AnnotationParser::getPropertyAnnotationsAsArray($class);</sourceline>
        <sourceline coveredcount="20">	  	     if(isset($cacher)) $cacher-&gt;set($cacheKey, $annotes);</sourceline>
        <sourceline coveredcount="20">	  	     return $annotes;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Scope" methodcount="5" methodscovered="3" statementcount="9" statementscovered="9" totalcount="14" totalcovered="12">
      <sourcefile name="Scope.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Scope.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Includes all scope dependencies</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1">require_once 'scope/ApplicationScope.php';</sourceline>
        <sourceline coveredcount="1">require_once 'scope/RequestScope.php';</sourceline>
        <sourceline coveredcount="1">require_once 'scope/Session.php';</sourceline>
        <sourceline coveredcount="1">require_once 'scope/SessionScope.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Facade for AgilePHP scopes.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">abstract class Scope {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     private function __construct() {}</sourceline>
        <sourceline coveredcount="0">	     private function __clone() {}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	   	  * Returns a singleton instance of ApplicationScope.</sourceline>
        <sourceline coveredcount="0">	   	  *</sourceline>
        <sourceline coveredcount="0">	   	  * @return ApplicationScope A singleton instance of ApplicationScope</sourceline>
        <sourceline coveredcount="0">	      * @static</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public static function getApplicationScope() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	            return ApplicationScope::getInstance();</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	   	  * Returns a singleton instance of RequestScope.</sourceline>
        <sourceline coveredcount="0">	   	  *</sourceline>
        <sourceline coveredcount="0">	   	  * @return SessionScope A singleton instance of SessionScope</sourceline>
        <sourceline coveredcount="0">	   	  * @static</sourceline>
        <sourceline coveredcount="0">	   	  */</sourceline>
        <sourceline coveredcount="0">	     public static function getSessionScope() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">	            return SessionScope::getInstance();</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	   	  * Returns a singleton instance of RequestScope.</sourceline>
        <sourceline coveredcount="0">	   	  *</sourceline>
        <sourceline coveredcount="0">	   	  * @return RequestScope A singleton instance of RequestScope</sourceline>
        <sourceline coveredcount="0">	   	  * @static</sourceline>
        <sourceline coveredcount="0">	   	  */</sourceline>
        <sourceline coveredcount="0">	     public static function getRequestScope() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	        return RequestScope::getInstance();</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Cache" methodcount="4" methodscovered="0" statementcount="0" statementscovered="0" totalcount="4" totalcovered="0">
      <sourcefile name="Cache.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Cache.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">require_once 'cache/CacheProvider.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Allows caching dynamic data that doesn't require real-time rendering.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyClass {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@Cache</sourceline>
        <sourceline coveredcount="0"> * public function index() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // A call that might perform some process intensive operation</sourceline>
        <sourceline coveredcount="0"> * 		  // or a database call thats only needed once (like building</sourceline>
        <sourceline coveredcount="0"> * 		  // a CMS that looks up form input types to build a contact page, etc,</sourceline>
        <sourceline coveredcount="0"> * 		  // and once the site is live they dont change)</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@Cache(minutes = 5)</sourceline>
        <sourceline coveredcount="0"> * public function index() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // A call that might perform some processing intensive action</sourceline>
        <sourceline coveredcount="0"> * 		  // or a database call thats not really needed for every page request</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="0" startclass="1">class Cache {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Cache annotation argument containing the number of minutes to cache the intercepted content.</sourceline>
        <sourceline coveredcount="0">	   * Defaults to 0 (never expires).</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var String The number of minutes to store the cached content</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $minutes = 0;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Boolean flag used to indicate whether or not output buffering should be used to capture HTML data.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var boolean True to cache data using output buffering, false to cache method return value. Default</sourceline>
        <sourceline coveredcount="0">	   *              is to capture a method return value.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $html = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new Cache instance and initalizes object state</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         $xml = AgilePHP::getConfiguration();</sourceline>
        <sourceline coveredcount="0">	         $provider = (isset($xml-&gt;caching)) ? (string)$xml-&gt;caching-&gt;attributes()-&gt;provider : 'FileCacheProvider';</sourceline>
        <sourceline coveredcount="0">	         $this-&gt;provider = new $provider();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Performs decisions on whether to return cached content or carry out</sourceline>
        <sourceline coveredcount="0">	   * real time processing invocation.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The invocation context instance responsible for the interception</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function process(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $key = md5(serialize($ic));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Data not cached; process real-time, cache for next request, and return the data</sourceline>
        <sourceline coveredcount="0">	  		 if(!$this-&gt;provider-&gt;get($key))</sourceline>
        <sourceline coveredcount="0">	  		    return ($this-&gt;html) ? $this-&gt;cacheAndServeHtml($ic) : $this-&gt;cacheAndServe($ic);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Return cached data</sourceline>
        <sourceline coveredcount="0">	  		 if($this-&gt;html)</sourceline>
        <sourceline coveredcount="0">	  		    echo $this-&gt;provider-&gt;get($key);</sourceline>
        <sourceline coveredcount="0">	  		 else</sourceline>
        <sourceline coveredcount="0">	  		    return $this-&gt;provider-&gt;get($key);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Executes the intercepted call, caches the return value and returns the result.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The intercepted InvocationContext</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function cacheAndServe(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	          $key = md5(serialize($ic));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        	  $clsName = get_class($ic-&gt;getTarget());</sourceline>
        <sourceline coveredcount="0">        	  $o = new $clsName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        	  $class = new ReflectionClass($o);</sourceline>
        <sourceline coveredcount="0">        	  $m = $class-&gt;getMethod($ic-&gt;getMethod());</sourceline>
        <sourceline coveredcount="0">        	  $data = $ic-&gt;getParameters() ? $m-&gt;invokeArgs($o, $ic-&gt;getParameters()) : $m-&gt;invoke($o);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        	  $this-&gt;provider-&gt;set($key, $data, $this-&gt;minutes);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  return $data;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Executes the intercepted call using HTML buffering, caches the output, and flushes the buffer.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The intercepted InvocationContext</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function cacheAndServeHtml(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	          $key = md5(serialize($ic));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	          ob_start();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        	  $clsName = get_class($ic-&gt;getTarget());</sourceline>
        <sourceline coveredcount="0">	          $o = new $clsName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        	  $class = new ReflectionClass($o);</sourceline>
        <sourceline coveredcount="0">        	  $m = $class-&gt;getMethod($ic-&gt;getMethod());</sourceline>
        <sourceline coveredcount="0">        	  $data = $ic-&gt;getParameters() ? $m-&gt;invokeArgs($o, $ic-&gt;getParameters()) : $m-&gt;invoke($o);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        	  $data = ob_get_flush();</sourceline>
        <sourceline coveredcount="0">        	  $this-&gt;provider-&gt;set($key, $data, $this-&gt;minutes);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        	  return $data;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Log" methodcount="6" methodscovered="3" statementcount="19" statementscovered="15" totalcount="25" totalcovered="18">
      <sourcefile name="Log.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Log.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">require_once 'logger/LogProvider.php';</sourceline>
        <sourceline coveredcount="1">require_once 'logger/LogFactory.php';</sourceline>
        <sourceline coveredcount="1">require_once 'logger/FileLogger.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Performs application logging to #projectName#/logs/agilephp_MM-DD-YY.log</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">final class Log {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private function __construct() {}</sourceline>
        <sourceline coveredcount="0">	  private function __clone() {}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes a 'debug' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The debug message to log</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function debug($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="25">	         $logger = LogFactory::getLogger();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="25">	         if(LogFactory::getLevel() == 'debug')</sourceline>
        <sourceline coveredcount="25">  		 	      $logger-&gt;debug($message);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes a 'warn' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The warning message to log</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function warn($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         $logger = LogFactory::getLogger();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         if(LogFactory::getLevel() != 'error')</sourceline>
        <sourceline coveredcount="1">	  		    $logger-&gt;warn($message);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes an 'info' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The informative message to log</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function info($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         $logger = LogFactory::getLogger();</sourceline>
        <sourceline coveredcount="-1">	         $level = LogFactory::getLevel();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         if($level == 'info' || $level == 'debug')</sourceline>
        <sourceline coveredcount="-1">	  		    $logger-&gt;info($message);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes an 'error' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The error message to log.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function error($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         $logger = LogFactory::getLogger();</sourceline>
        <sourceline coveredcount="1">	         $level = LogFactory::getLevel();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         if($level == 'error' || $level == 'debug')</sourceline>
        <sourceline coveredcount="1">	  		    $logger-&gt;error($message);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Upload" methodcount="7" methodscovered="0" statementcount="0" statementscovered="0" totalcount="7" totalcovered="0">
      <sourcefile name="Upload.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Upload.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * File upload component</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class Upload {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $name;</sourceline>
        <sourceline coveredcount="0">	  private $directory;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function __construct() { }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name used in the file form field element.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $name The name attribute of the HTML file input element</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the file form name.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The name attribute of the HTML file input element</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the destination directory for the upload.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $directory The upload destination directory</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setDirectory($directory) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;directory = $directory;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if(!file_exists($directory))</sourceline>
        <sourceline coveredcount="0">	  		 	 if(!mkdir($directory, true))</sourceline>
        <sourceline coveredcount="0">	  		 	 	 throw new FrameworkException('Upload directory does not exist and an attempt to create it failed.');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the destination directory for uploads.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The destination directory path</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDirectory() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;directory;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Saves the upload contained in the $_FILES array for the specified</sourceline>
        <sourceline coveredcount="0">	   * file input $name.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $filename Optional file name to save the upload as. Defaults to the name of the uploaded file.</sourceline>
        <sourceline coveredcount="0">	   * @return String The uploaded file path.</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException if any errors occur</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function save($filename = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $name = ($filename) ? $filename : $_FILES[ $this-&gt;getName() ]['name'];</sourceline>
        <sourceline coveredcount="0">			 $target = $this-&gt;getDirectory() . DIRECTORY_SEPARATOR . $name;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 Log::debug('Upload::save Saving upload with name \'' . $this-&gt;getName() . '\' to target path \'' . $target . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 if(!move_uploaded_file($_FILES[ $this-&gt;getName() ]['tmp_name'], $target)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	 switch($_FILES[ $this-&gt;getName() ]['error']) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	 	case 1:</sourceline>
        <sourceline coveredcount="0">			 	 		$error = 'The uploaded file exceeds the upload_max_filesize directive in php.ini.';</sourceline>
        <sourceline coveredcount="0">			 	 		break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	 	case 2:</sourceline>
        <sourceline coveredcount="0">			 	 		 $error = 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.';</sourceline>
        <sourceline coveredcount="0">			 	 		 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	 	case 3:</sourceline>
        <sourceline coveredcount="0">			 	 		 $error = 'The uploaded file was only partially uploaded.';</sourceline>
        <sourceline coveredcount="0">			 	 		 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	 	case 4:</sourceline>
        <sourceline coveredcount="0">			 	 		 $error = 'No file was uploaded.';</sourceline>
        <sourceline coveredcount="0">			 	 		 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	 	case 5:</sourceline>
        <sourceline coveredcount="0">			 	 		 $error = 'Missing a temporary folder.'; // Introduced in PHP 4.3.10 and PHP 5.0.3</sourceline>
        <sourceline coveredcount="0">			 	 		 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	 	case 6:</sourceline>
        <sourceline coveredcount="0">			 	 		 $error = 'Failed to write file to disk.'; // Introduced in PHP 5.1.0</sourceline>
        <sourceline coveredcount="0">			 	 		 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	 	case 7:</sourceline>
        <sourceline coveredcount="0">			 	 		 $error = 'File upload stopped by extension.'; // Introduced in PHP 5.2.0</sourceline>
        <sourceline coveredcount="0">			 	 		 break;</sourceline>
        <sourceline coveredcount="0">			 	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	 if(!isset($error)) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	 Log::debug('Upload::save Upload failed with code \'' . $_FILES[ $this-&gt;getName() ]['error'] . '\' and message \'' . $error . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	 throw new FrameworkException($error, $_FILES[ $this-&gt;getName() ]['error']);</sourceline>
        <sourceline coveredcount="0">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 chmod($target, 0755);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 Log::debug('Upload::save Upload successfully saved');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 return $target;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Deletes the uploaded file and logs the event.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function delete() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if(!unlink($this-&gt;getDirectory() .'/' . $_FILES[ $this-&gt;getName() ]['name']))</sourceline>
        <sourceline coveredcount="0">	  		 	 Log::debug('Upload::delete Failed to delete upload');</sourceline>
        <sourceline coveredcount="0">	  		 else</sourceline>
        <sourceline coveredcount="0">	  		 	 Log::debug('Upload::delete Delete successful');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Crypto" methodcount="22" methodscovered="7" statementcount="55" statementscovered="22" totalcount="77" totalcovered="29">
      <sourcefile name="Crypto.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Crypto.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides one way hashing and encryption</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class Crypto {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private static $instance;</sourceline>
        <sourceline coveredcount="0">	  private $algorithm;</sourceline>
        <sourceline coveredcount="0">	  private $iv;</sourceline>
        <sourceline coveredcount="0">	  private $key;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initalizes the Crypto component with the hashing algorithm defined in agilephp.xml</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		 $agilephp_xml = AgilePHP::getWebRoot() . DIRECTORY_SEPARATOR . 'agilephp.xml';</sourceline>
        <sourceline coveredcount="15">	  		 $xml = simplexml_load_file($agilephp_xml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  	     if($xml-&gt;crypto) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		  	 $this-&gt;setAlgorithm((string)$xml-&gt;crypto-&gt;attributes()-&gt;algorithm);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		  	 if($xml-&gt;crypto-&gt;attributes()-&gt;iv)</sourceline>
        <sourceline coveredcount="15">	  		  	 	 $this-&gt;iv = (string)$xml-&gt;crypto-&gt;attributes()-&gt;iv;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		  	 if($xml-&gt;crypto-&gt;attributes()-&gt;key)</sourceline>
        <sourceline coveredcount="15">	  		  	 	 $this-&gt;key = (string)$xml-&gt;crypto-&gt;attributes()-&gt;key;</sourceline>
        <sourceline coveredcount="15">	  	     }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a singleton instance of Crypto</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Singleton instance of Crypto</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getInstance() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     if(self::$instance == null)</sourceline>
        <sourceline coveredcount="1">	  	         self::$instance = new self;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     return self::$instance;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the algorithm for the Crypto component for use with getDigest.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $algorithm The algorithm to perform the hashing operation with.</sourceline>
        <sourceline coveredcount="0">	   * 					      NOTE: getSupportedHashAlgorithms() will return a list of</sourceline>
        <sourceline coveredcount="0">	   * 						        algorithms available on the server.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws FrameworkException If passed a hashing name not available in</sourceline>
        <sourceline coveredcount="0">	   * 							getSupportedHashAlgorithms().</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setAlgorithm($algorithm) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		 if(in_array($algorithm, $this-&gt;getSupportedHashAlgorithms()))</sourceline>
        <sourceline coveredcount="15">	  		 	 $this-&gt;algorithm = $algorithm;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		 if(!$this-&gt;algorithm)</sourceline>
        <sourceline coveredcount="15">	  		 	 throw new FrameworkException('Unsupported hashing algorithm \'' . $algorithm . '\'.');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the algorithm the Crypto component is configured to perform</sourceline>
        <sourceline coveredcount="0">	   * a hashing operation with using the 'getDigest()' method.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The name of the hashing algorithm</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getAlgorithm() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 return $this-&gt;algorithm;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the iv as configured in agilephp.xml for the crypto component if one was defined.</sourceline>
        <sourceline coveredcount="0">	   * NOTE: The iv must be base64 encoded</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The base64 decoded iv configured in agilephp.xml</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getIV() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return base64_decode($this-&gt;iv);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the key as configured in agilephp.xml for the crypto component if one was defined.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The iv configured in agilephp.xml for the crypto component</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getKey() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;key;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the hashed $data. This operation requires either a valid configuration</sourceline>
        <sourceline coveredcount="0">	   * in agilephp.xml for the Crypto component or you must manually set the algorithm</sourceline>
        <sourceline coveredcount="0">	   * with a call to 'setAlgorithm()'.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to hash</sourceline>
        <sourceline coveredcount="0">	   * @return String The hashed string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDigest($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 return $this-&gt;hash($this-&gt;getAlgorithm(), $data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a hashed MD5 string.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to hash</sourceline>
        <sourceline coveredcount="0">	   * @return String The hashed MD5 string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function md5($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return md5($data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an SHA1 hashed string.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $data The data to hash</sourceline>
        <sourceline coveredcount="0">	   * @return String The hashed SHA1 string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function sha1($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return hash('sha1', $data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an SHA256 hashed string.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to hash</sourceline>
        <sourceline coveredcount="0">	   * @return String The hashed SHA256 string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function sha256($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return hash('sha256', $data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an SHA384 hashed string.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to hash</sourceline>
        <sourceline coveredcount="0">	   * @return String The hashed SHA384 string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function sha384($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return hash('sha384', $data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an SHA512 hashed string.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $data The data to hash</sourceline>
        <sourceline coveredcount="0">	   * @return String The hashed SHA512 string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function sha512($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return hash('sha512', $data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an CRC32 hashed string.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to hash</sourceline>
        <sourceline coveredcount="0">	   * @return String The hashed CRC32 string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function crc32($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return hash('crc32', $data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the hashed $data parameter according to the defined $algorithm</sourceline>
        <sourceline coveredcount="0">	   * parameter.</sourceline>
        <sourceline coveredcount="0">	   * String</sourceline>
        <sourceline coveredcount="0">	   * @param String $algorithm The algorithm to hash the defined data with. NOTE: You can get</sourceline>
        <sourceline coveredcount="0">	   * 						  a list of supported algorithms on the server with a call to</sourceline>
        <sourceline coveredcount="0">	   * 	    				  getSupportedHashAlgorithms().</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to hash</sourceline>
        <sourceline coveredcount="0">	   * @return String The hashed SHA1 string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function hash($algorithm, $data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 return hash($algorithm, $data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an array of supported hashing algorithms on the current</sourceline>
        <sourceline coveredcount="0">	   * PHP enabled web server.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return array An array of supported hashing algorithms available to PHP.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSupportedHashAlgorithms() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		 return hash_algos();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /* Cryptography */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates an IV suitable for the specified cipher using the MCRYPT_MODE_CBC module.</sourceline>
        <sourceline coveredcount="0">	   * NOTE: You can use this method to create an IV for use in agilephp.xml for the Crypto</sourceline>
        <sourceline coveredcount="0">	   * 	   component to use. Simply base64_encode the return value and place it in the crypto</sourceline>
        <sourceline coveredcount="0">	   * 	   components iv attribute in agilephp.xml.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param CONST $cipher The cipher to use. This depends on the encryption algorithm you are using:</sourceline>
        <sourceline coveredcount="0">	   * 					  encrypt/decrypt_3des     = MCRYPT_TripleDES</sourceline>
        <sourceline coveredcount="0">	   * 					  encrypt/decrypt_blowfish = MCRYPT_BLOWFISH</sourceline>
        <sourceline coveredcount="0">	   * 					  encrypt/decrypt_aes256   = MCRYPT_RIJNDAEL_256</sourceline>
        <sourceline coveredcount="0">	   * 					  Defaults to MCRYPT_TripleDES</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The initial value (iv) as created by mcrypt_create_iv.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function createIV($cipher = MCRYPT_TripleDES) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return mcrypt_create_iv(mcrypt_get_block_size($cipher, MCRYPT_MODE_CBC), MCRYPT_DEV_RANDOM);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Encrypts the specified data using Triple DES.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $iv The IV/salt</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The secret key used to encrypt the data</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to encrypt</sourceline>
        <sourceline coveredcount="0">	   * @return byte[] Triple DES encrypted string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function encrypt_3des($iv, $key, $data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $size = mcrypt_get_key_size(MCRYPT_TripleDES, MCRYPT_MODE_CBC);</sourceline>
        <sourceline coveredcount="-1">	  		 if(strlen($key) &gt; $size)</sourceline>
        <sourceline coveredcount="-1">	  		 	 $key = substr($key, 0, $size);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return mcrypt_cbc(MCRYPT_TripleDES, $key, $data, MCRYPT_ENCRYPT, $iv);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Decrypts Triple DES data</sourceline>
        <sourceline coveredcount="0">	   * @param String $iv The IV/salt</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The secret key used to encrypt the data</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to encrypt</sourceline>
        <sourceline coveredcount="0">	   * @return byte[] Plain text, decrypted data if a proper key was supplied</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function decrypt_3des($iv, $key, $data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $size = mcrypt_get_key_size(MCRYPT_TripleDES, MCRYPT_MODE_CBC);</sourceline>
        <sourceline coveredcount="-1">	  		 if(strlen($key) &gt; $size)</sourceline>
        <sourceline coveredcount="-1">	  		 	 $key = substr($key, 0, $size);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return trim(mcrypt_cbc(MCRYPT_TripleDES, $key, $data, MCRYPT_DECRYPT, $iv));</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Encrypts the specified data using Blowfish</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $iv The IV/salt</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The secret key used to encrypt the data</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to encrypt</sourceline>
        <sourceline coveredcount="0">	   * @return byte[] Blowfish encrypted string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function encrypt_blowfish($iv, $key, $data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $size = mcrypt_get_key_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC);</sourceline>
        <sourceline coveredcount="-1">	  		 if(strlen($key) &gt; $size)</sourceline>
        <sourceline coveredcount="-1">	  		 	 $key = substr($key, 0, $size);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return mcrypt_cbc(MCRYPT_BLOWFISH, $key, $data, MCRYPT_ENCRYPT, $iv);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Decrypts a string previously encrypted with encrypt_blowfish</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $iv The IV/salt</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The secret key used to encrypt the data</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to encrypt</sourceline>
        <sourceline coveredcount="0">	   * @return byte[] Plain text, decrypted data if a proper key was supplied</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function decrypt_blowfish($iv, $key, $data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $size = mcrypt_get_key_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC);</sourceline>
        <sourceline coveredcount="-1">	  		 if(strlen($key) &gt; $size)</sourceline>
        <sourceline coveredcount="-1">	  		 	 $key = substr($key, 0, $size);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return trim(mcrypt_cbc(MCRYPT_BLOWFISH, $key, $data, MCRYPT_DECRYPT, $iv));</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Encrypts the specified data using AES 256 encryption</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The secret key used to encrypt the data</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to encrypt</sourceline>
        <sourceline coveredcount="0">	   * @return byte[] AES 256 encrypted data</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function encrypt_aes256($iv, $key, $data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $size = mcrypt_get_key_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);</sourceline>
        <sourceline coveredcount="-1">	  		 if(strlen($key) &gt; $size)</sourceline>
        <sourceline coveredcount="-1">	  		 	 $key = substr($key, 0, $size);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return mcrypt_cbc(MCRYPT_RIJNDAEL_256, $key, $data, MCRYPT_ENCRYPT, $iv);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Decrypts the specified data which was previously encrypted using AES 256</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The secret key used to encrypt the data</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to encrypt</sourceline>
        <sourceline coveredcount="0">	   * @return byte[] AES 256 decrypted data if a proper key was supplied</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function decrypt_aes256($iv, $key, $data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $size = mcrypt_get_key_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);</sourceline>
        <sourceline coveredcount="-1">	  		 if(strlen($key) &gt; $size)</sourceline>
        <sourceline coveredcount="-1">	  		 	 $key = substr($key, 0, $size);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return trim(mcrypt_cbc(MCRYPT_RIJNDAEL_256, $key, $data, MCRYPT_DECRYPT, $iv));</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ORM" methodcount="44" methodscovered="10" statementcount="53" statementscovered="19" totalcount="97" totalcovered="29">
      <sourcefile name="ORM.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/ORM.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">require_once 'orm/ORMFactory.php';</sourceline>
        <sourceline coveredcount="1">require_once 'orm/Database.php';</sourceline>
        <sourceline coveredcount="1">require_once 'orm/Table.php';</sourceline>
        <sourceline coveredcount="1">require_once 'orm/Column.php';</sourceline>
        <sourceline coveredcount="1">require_once 'orm/ForeignKey.php';</sourceline>
        <sourceline coveredcount="1">require_once 'orm/dialect/SQLDialect.php';</sourceline>
        <sourceline coveredcount="1">require_once 'orm/dialect/BaseDialect.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * ORM Facade</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">final class ORM {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Connects the ORM to the specified Database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Database $db The database to establish a connection with</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function connect(Database $db) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return ORMFactory::connect($db);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#isConnected()</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public static function isConnected() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		 return ORMFactory::getDialect()-&gt;isConnected();</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the SQL dialect instance responsible for invoking SQL commands.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getDialect() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">	  	     return ORMFactory::getDialect();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the database object currently in use by the ORM framework.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getDatabase() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 	 return ORMFactory::getDialect()-&gt;getDatabase();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Adds an SQL distinct clause to 'find' operation.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $columnName The column name to get the distinct values for</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setDistinct($columnName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	   		 ORMFactory::getDialect()-&gt;setDistinct($columnName);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the 'distinct' column to use in an SQL SELECT statement</sourceline>
        <sourceline coveredcount="0">	   * if one has been defined.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The DISTINCT column name or null if a column name has not been defined.</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function isDistinct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     return ORMFactory::getDialect()-&gt;isDistinct();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the maximum number of records to return in a result list</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $count Maximum number of records to return</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setMaxResults($maxResults = 25) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     	 ORMFactory::getDialect()-&gt;setMaxResults($maxResults);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the maximum number of results to retrieve. This translates</sourceline>
        <sourceline coveredcount="0">	   * to an SQL LIMIT clause during SELECT operations.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The maximum number of results to retrieve during SELECT operations.</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getMaxResults() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	   		 return ORMFactory::getDialect()-&gt;getMaxResults();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">       * Returns boolean flag indicating whether or not a transaction is in progress.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return bool True if a transaction is in progress, false otherwise.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">	  public static function hasTransactionInProgress() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         return ORMFactory::getDialect()-&gt;hasTransactionInProgress();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Begins a transaction</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   * @see http://us2.php.net/manual/en/pdo.transactions.php</sourceline>
        <sourceline coveredcount="0">	   * @see http://usphp.com/manual/en/function.PDO-beginTransaction.php</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function beginTransaction() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     ORMFactory::getDialect()-&gt;beginTransaction();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Commits an already started transaction.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   * @see http://us2.php.net/manual/en/pdo.transactions.php</sourceline>
        <sourceline coveredcount="0">	   * @see http://usphp.com/manual/en/function.PDO-commit.php</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function commit() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 ORMFactory::getDialect()-&gt;commit();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Rolls back a transaction.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $message Error/reason why the transaction was rolled back</sourceline>
        <sourceline coveredcount="0">	   * @param $code An error/reason code</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   * @see http://us2.php.net/manual/en/pdo.transactions.php</sourceline>
        <sourceline coveredcount="0">	   * @see http://usphp.com/manual/en/function.PDO-rollBack.php</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function rollBack($message = null, $code = 0) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     ORMFactory::getDialect()-&gt;rollBack($message, $code);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Prepares an SQL prepared statement</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $statement The SQL statement to prepare</sourceline>
        <sourceline coveredcount="0">	   * @return False if the statement could not execute successfully</sourceline>
        <sourceline coveredcount="0">	   * @see http://usphp.com/manual/en/function.PDO-prepare.php</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function prepare($statement) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     return ORMFactory::getDialect()-&gt;prepare($statement);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Executes a prepared statement (with parameters)</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $inputParameters An array of input parameters</sourceline>
        <sourceline coveredcount="0">	   * @return True if successful, false on fail</sourceline>
        <sourceline coveredcount="0">	   * @see http://usphp.com/manual/en/function.PDOStatement-execute.php</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function execute(array $inputParameters = array()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     return ORMFactory::getDialect()-&gt;execute($inputParameters);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Executes an SQL statement and returns the number of rows affected by the query.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $statement The SQL statement to execute.</sourceline>
        <sourceline coveredcount="0">	   * @return The number of rows affected by the query.</sourceline>
        <sourceline coveredcount="0">	   * @see http://usphp.com/manual/en/function.PDO-exec.php</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function exec($statement) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return ORMFactory::getDialect()-&gt;exec($statement);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Quotes a string so its theoretically safe to pass into a statement</sourceline>
        <sourceline coveredcount="0">	   * without the worry of SQL injection.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $data The data to quote</sourceline>
        <sourceline coveredcount="0">	   * @return The quoted data</sourceline>
        <sourceline coveredcount="0">	   * @see http://www.php.net/manual/en/pdo.quote.php</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function quote($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return ORMFactory::getDialect()-&gt;quote($data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Executes a raw SQL query using PDO::query</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $sql The SQL statement to execute</sourceline>
        <sourceline coveredcount="0">	   * @return PDO::PDOStatement as returned by PDO::query</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function query($sql) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  	     return ORMFactory::getDialect()-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * Sets WHERE clause restrictions</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $restrictions An associative array containing WHERE clause restrictions. (For example: array('id' =&gt; 21))</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setRestrictions(array $restrictions) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         ORMFactory::getDialect()-&gt;setRestrictions($restrictions);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the restriction operator (and|or) used in SQL WHERE clause.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $operator The logical operator 'and'/'or' to be used in SQL WHERE clause. Default is 'AND'.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setRestrictionsLogicOperator($operator) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     	 ORMFactory::getDialect()-&gt;setRestrictionsLogicOperator($operator);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the comparison operator (&lt;|&gt;|=|LIKE) used in SQL WHERE clause.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $operator The logical comparison operator used is SQL where clauses (&lt;|&gt;|=|LIKE). Default is '='.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setComparisonLogicOperator($operator) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     	 ORMFactory::getDialect()-&gt;setComparisonLogicOperator($operator);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the SQL 'group by' clause.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $column The column name to group the result set by</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setGroupBy($column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         ORMFactory::getDialect()-&gt;setGroupBy($column);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns SQL GROUP BY clause.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String GROUP BY value</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getGroupBy() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         return ORMFactory::getDialect()-&gt;getGroupBy();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the SQL 'order by' clause.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $column The column name to order the result set by</sourceline>
        <sourceline coveredcount="0">	   * @param $direction The direction to sort the result set (ASC|DESC).</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setOrderBy($column, $direction) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     	 ORMFactory::getDialect()-&gt;setOrderBy($column, $direction);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an associative array containing the current 'orderBy' clause. The results</sourceline>
        <sourceline coveredcount="0">	   * are returned with the name of the column as the index and the direction as the value.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return An associative array containing the name of the column to sort as the key/index</sourceline>
        <sourceline coveredcount="0">	   * 		and the direction of the sort order (ASC|DESC) as the value.</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getOrderBy() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     	 return ORMFactory::getDialect()-&gt;getOrderBy();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the offset used in a SQL LIMIT clause.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Integer $offset The limit offset.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setOffset($offset) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	 		 ORMFactory::getDialect()-&gt;setOffset($offset);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the SQL LIMIT offset value.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Integer The LIMIT offset.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getOffset() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 return ORMFactory::getDialect()-&gt;setOffset($offset);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the 'Table' object which is mapped to the specified $model.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $model The domain model object to retrieve the table element for. Defaults to the model</sourceline>
        <sourceline coveredcount="0">	   * 			   currently being managed by the 'ORM'.</sourceline>
        <sourceline coveredcount="0">	   * @return The 'Table' object responsible for the model's ORM or null if a table</sourceline>
        <sourceline coveredcount="0">	   * 		 could not be located for the specified $model.</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getTableByModel($model = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">		     return ORMFactory::getDialect()-&gt;getTableByModel($model);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a 'Table' object representing the table configured in orm.xml as</sourceline>
        <sourceline coveredcount="0">	   * the AgilePHP 'Identity' table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The 'Table' object which represents the AgilePHP 'Identity' table, or null</sourceline>
        <sourceline coveredcount="0">	   * 		 if an 'Identity' table has not been configured.</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getTableByModelName($modelName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">			 return ORMFactory::getDialect()-&gt;getTableByModelName($modelName);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a 'Table' object by its name as configured in orm.xml</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $tableName The value of the table's 'name' attribute</sourceline>
        <sourceline coveredcount="0">	   * @return The 'Table' object or null if the table was not found</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getTableByName($tableName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="29">	  		 return ORMFactory::getDialect()-&gt;getTableByName($tableName);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the column 'name' attribute value configured in orm.xml for the specified</sourceline>
        <sourceline coveredcount="0">	   * column 'property' attribute.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $table The 'Table' object to search</sourceline>
        <sourceline coveredcount="0">	   * @param $property The property attributes value</sourceline>
        <sourceline coveredcount="0">	   * @return The column name or null if the $property could not be found in the table</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getColumnNameForProperty($table, $property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 return ORMFactory::getDialect()-&gt;getColumnNameForProperty($table, $property);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the 'property' name configured in orm.xml for the specified</sourceline>
        <sourceline coveredcount="0">	   * column 'name' attribute.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $table The 'Table' object to search</sourceline>
        <sourceline coveredcount="0">	   * @param $columnName The column name to search</sourceline>
        <sourceline coveredcount="0">	   * @return The column name or null if the $property could not be found in the table</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getPropertyNameForColumn($table, $columnName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 return ORMFactory::getDialect()-&gt;getPropertyNameForColumn($table, $columnName);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates the database context as defined in orm.xml.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0"> 	   * @return void</sourceline>
        <sourceline coveredcount="0"> 	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function create() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		     ORMFactory::getDialect()-&gt;create();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0"> 	   *</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#createTable(Table $table)</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0"> 	   */</sourceline>
        <sourceline coveredcount="0">	  public static function createTable(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		     ORMFactory::getDialect()-&gt;createTable($table);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Drops the database specified in orm.xml</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function drop() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     ORMFactory::getDialect()-&gt;drop();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#dropTable(Table $table)</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function dropTable(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	 ORMFactory::getDialect()-&gt;dropTable($table);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	  /**</sourceline>
        <sourceline coveredcount="0">	   * Persists a domain model object</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $model The model object to persist</sourceline>
        <sourceline coveredcount="0">	   * @return PDOStatement</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function persist($model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     return ORMFactory::getDialect()-&gt;persist($model);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Merges/updates a persisted domain model object</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $model The model object to merge/update</sourceline>
        <sourceline coveredcount="0">	   * @return PDOStatement</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">  	  public static function merge($model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	  	     return ORMFactory::getDialect()-&gt;merge($model);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Deletes a persisted domain model object</sourceline>
        <sourceline coveredcount="0">   	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $model The domain model object to delete</sourceline>
        <sourceline coveredcount="0">	   * @return PDOStatement</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function delete($model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">  	     	 return ORMFactory::getDialect()-&gt;delete($model);</sourceline>
        <sourceline coveredcount="0">  	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	  /**</sourceline>
        <sourceline coveredcount="0">	   * Truncates the table for the specified domain model object</sourceline>
        <sourceline coveredcount="0">   	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $model A domain model object</sourceline>
        <sourceline coveredcount="0">	   * @return PDOStatement</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	 public static function truncate($model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		    return ORMFactory::getDialect()-&gt;truncate($model);</sourceline>
        <sourceline coveredcount="0">  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	 /**</sourceline>
        <sourceline coveredcount="0">   	  * Attempts to locate the specified model by primary key value.</sourceline>
        <sourceline coveredcount="0">      *</sourceline>
        <sourceline coveredcount="0">   	  * @param Object $model A domain model object with its primary key field set</sourceline>
        <sourceline coveredcount="0">      * @return Returns the same model which was passed (populated with the</sourceline>
        <sourceline coveredcount="0">      * 		 database values) or null if a matching record could not be found.</sourceline>
        <sourceline coveredcount="0">      * @throws ORMException</sourceline>
        <sourceline coveredcount="0">      * @static</sourceline>
        <sourceline coveredcount="0">      */</sourceline>
        <sourceline coveredcount="0">  	 public static function find($model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">  		    return ORMFactory::getDialect()-&gt;find($model);</sourceline>
        <sourceline coveredcount="0">  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	 /**</sourceline>
        <sourceline coveredcount="0">	  * Returns the total number of records in the database for the specified model.</sourceline>
        <sourceline coveredcount="0">	  *</sourceline>
        <sourceline coveredcount="0">	  * @param Object $model The model to get the count for.</sourceline>
        <sourceline coveredcount="0">	  * @return Integer The total number of records in the table.</sourceline>
        <sourceline coveredcount="0">	  */</sourceline>
        <sourceline coveredcount="0">  	 public static function count($model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		return ORMFactory::getDialect()-&gt;count($model);</sourceline>
        <sourceline coveredcount="0">	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	 /**</sourceline>
        <sourceline coveredcount="0">  	  * Returns AgilePHP ORM database structure for the current database.</sourceline>
        <sourceline coveredcount="0">  	  *</sourceline>
        <sourceline coveredcount="0">  	  * @return Array Multi-dimensional array representing the current database structure.</sourceline>
        <sourceline coveredcount="0">  	  * @static</sourceline>
        <sourceline coveredcount="0">  	  */</sourceline>
        <sourceline coveredcount="0">  	 public static function reverseEngineer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 		return ORMFactory::getDialect()-&gt;reverseEngineer();</sourceline>
        <sourceline coveredcount="0">  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     /**</sourceline>
        <sourceline coveredcount="0">      * Returns an SQL formatted string containing a WHERE clause built from setRestrictions and setRestrictionsLogicOperator.</sourceline>
        <sourceline coveredcount="0">      *</sourceline>
        <sourceline coveredcount="0">      * @return The formatted SQL string</sourceline>
        <sourceline coveredcount="0">      * @static</sourceline>
        <sourceline coveredcount="0">      */</sourceline>
        <sourceline coveredcount="0">     public static function createRestrictSQL() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		return ORMFactory::getDialect()-&gt;createRestrictSQL();</sourceline>
        <sourceline coveredcount="0">     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     /**</sourceline>
        <sourceline coveredcount="0">      * Calls a stored procedure</sourceline>
        <sourceline coveredcount="0">      */</sourceline>
        <sourceline coveredcount="0">     public static function call($model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		return ORMFactory::getDialect()-&gt;call($model);</sourceline>
        <sourceline coveredcount="0">     }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Component" methodcount="10" methodscovered="0" statementcount="0" statementscovered="0" totalcount="10" totalcovered="0">
      <sourcefile name="Component.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Component.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides base logic for AgilePHP components. Read/transform component.xml</sourceline>
        <sourceline coveredcount="0"> * to native PHP objects upon construction and provides helper methods for</sourceline>
        <sourceline coveredcount="0"> * accessing configuration parameters and dispatching requests for component</sourceline>
        <sourceline coveredcount="0"> * front controller.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">abstract class Component extends BaseController {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $name;</sourceline>
        <sourceline coveredcount="0">	  private $type;</sourceline>
        <sourceline coveredcount="0">	  private $version;</sourceline>
        <sourceline coveredcount="0">	  private $enabled;</sourceline>
        <sourceline coveredcount="0">	  private $params = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Component constructor parses component.xml and populates base component properties.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         $class = preg_replace('/_Intercepted/', '', get_class($this));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         // Retrieve the component.xml configuration (Use caching if enabled)</sourceline>
        <sourceline coveredcount="0">             if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                $key = 'AGILEPHP_COMPONENT_XML_' . $class;</sourceline>
        <sourceline coveredcount="0">                if($cacher-&gt;exists($key))</sourceline>
        <sourceline coveredcount="0">                   $xml = simplexml_load_string($cacher-&gt;get($key));</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0">             if(!isset($xml)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    	  		 $componentXml = 'components' . DIRECTORY_SEPARATOR . $class . DIRECTORY_SEPARATOR . 'component.xml';</sourceline>
        <sourceline coveredcount="0">     			 if(!file_exists($componentXml))</sourceline>
        <sourceline coveredcount="0">     				throw new FrameworkException($componentXml . ' does not exist');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			 $xml = simplexml_load_file($componentXml);</sourceline>
        <sourceline coveredcount="0">     			 if($cacher) $cacher-&gt;set($key, $xml-&gt;asXML());</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Set the component params (Use caching if enabled)</sourceline>
        <sourceline coveredcount="0">             if($cacher) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                $key = 'AGILEPHP_COMPONENT_PARAMS_' . $class;</sourceline>
        <sourceline coveredcount="0">                if($cacher-&gt;exists($key))</sourceline>
        <sourceline coveredcount="0">                   $this-&gt;params = $cacher-&gt;get($key);</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0">             if(!isset($this-&gt;params[0]) &amp;&amp; !$cacher) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			$dom = new DOMDocument();</sourceline>
        <sourceline coveredcount="0">     			$dom-&gt;Load($componentXml);</sourceline>
        <sourceline coveredcount="0">    			if(!@$dom-&gt;validate()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    			   $error = error_get_last();</sourceline>
        <sourceline coveredcount="0">    			   throw new FrameworkException('component.xml Document Object Model validation failed. ' . $error['message']);</sourceline>
        <sourceline coveredcount="0">    			}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			$properties = array();</sourceline>
        <sourceline coveredcount="0">     			$types = array();</sourceline>
        <sourceline coveredcount="0">     			foreach($xml-&gt;component-&gt;param as $param) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     					$properties[(string)$param-&gt;attributes()-&gt;name] = (string)$param-&gt;attributes()-&gt;value;</sourceline>
        <sourceline coveredcount="0">     					$types[(string)$param-&gt;attributes()-&gt;name] = (string)$param-&gt;attributes()-&gt;type;</sourceline>
        <sourceline coveredcount="0">     			}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			$this-&gt;name = (string)$xml-&gt;component-&gt;attributes()-&gt;name;</sourceline>
        <sourceline coveredcount="0">     			$this-&gt;type = (string)$xml-&gt;component-&gt;attributes()-&gt;type;</sourceline>
        <sourceline coveredcount="0">     			$this-&gt;version = (string)$xml-&gt;component-&gt;attributes()-&gt;version;</sourceline>
        <sourceline coveredcount="0">     			$this-&gt;enabled = (string)$xml-&gt;component-&gt;attributes()-&gt;enabled;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			foreach($xml-&gt;component-&gt;param as $param) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     				    $cp = new ComponentParam();</sourceline>
        <sourceline coveredcount="0">     					$cp-&gt;setName((string)$param-&gt;attributes()-&gt;name);</sourceline>
        <sourceline coveredcount="0">     					$cp-&gt;setType((string)$param-&gt;attributes()-&gt;type);</sourceline>
        <sourceline coveredcount="0">     					$cp-&gt;setValue((string)$param-&gt;attributes()-&gt;value);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     					array_push($this-&gt;params, $cp);</sourceline>
        <sourceline coveredcount="0">     			}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			if($cacher) $cacher-&gt;set($key, $this-&gt;params);</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Add orm configs to ORM Database object if present</sourceline>
        <sourceline coveredcount="0"> 			 if(isset($xml-&gt;component-&gt;orm-&gt;table)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 			    // @todo Implement logic in Studio to check for conflicting table and</sourceline>
        <sourceline coveredcount="0"> 			    //       model names during install to eliminate runtime validation overhead.</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 			    $database = ORMFactory::getDialect()-&gt;getDatabase();</sourceline>
        <sourceline coveredcount="0"> 			    foreach($xml-&gt;component-&gt;orm-&gt;table as $table)</sourceline>
        <sourceline coveredcount="0"> 			         $database-&gt;addTable(new Table($table));</sourceline>
        <sourceline coveredcount="0"> 			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 			 // Prepend component autoloader</sourceline>
        <sourceline coveredcount="0"> 			 spl_autoload_register('Component::autoload', true, true);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Component autoloader responsible for loading classes from the component</sourceline>
        <sourceline coveredcount="0">	   * space (components/#componentName# for source components, phar://#componentName#</sourceline>
        <sourceline coveredcount="0">	   * for phar components).</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $class The class to load</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function autoload($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     // Use caching if enabled</sourceline>
        <sourceline coveredcount="0">             if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                $key = 'AGILEPHP_COMPONENT_AUTOLOAD_' . $class;</sourceline>
        <sourceline coveredcount="0">                if($clazz = $cacher-&gt;get($key)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                   if(AgilePHP::getConfiguration()-&gt;annotations) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                      new InterceptorFilter($class);</sourceline>
        <sourceline coveredcount="0">                      if(class_exists($class, false)) return;</sourceline>
        <sourceline coveredcount="0">                   }</sourceline>
        <sourceline coveredcount="0">                   require $clazz;</sourceline>
        <sourceline coveredcount="0">                   return;</sourceline>
        <sourceline coveredcount="0">                }</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // PHP namespace support</sourceline>
        <sourceline coveredcount="0">             $namespace = explode('\\', $class);</sourceline>
        <sourceline coveredcount="0">             $className = array_pop($namespace);</sourceline>
        <sourceline coveredcount="0">             $namespace = implode(DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $phar = 'phar://' . $namespace . $className . '.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             if(file_exists($phar)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                if(AgilePHP::getConfiguration()-&gt;annotations) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                   new InterceptorFilter($phar);</sourceline>
        <sourceline coveredcount="0">                   if(class_exists($class, false)) return;</sourceline>
        <sourceline coveredcount="0">                }</sourceline>
        <sourceline coveredcount="0">                require $phar;</sourceline>
        <sourceline coveredcount="0">                return;</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Search component directory</sourceline>
        <sourceline coveredcount="0">             $component = AgilePHP::getWebRoot() . DIRECTORY_SEPARATOR . 'components' .</sourceline>
        <sourceline coveredcount="0">                             DIRECTORY_SEPARATOR . $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">		  	 $it = new RecursiveDirectoryIterator($component);</sourceline>
        <sourceline coveredcount="0">			 foreach(new RecursiveIteratorIterator($it) as $file) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		   	     	  $pieces = explode(DIRECTORY_SEPARATOR, $file);</sourceline>
        <sourceline coveredcount="0">			 		  if(array_pop($pieces) == $className . '.php') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 		     if($cacher) $cacher-&gt;set($key, $file-&gt;getPathname());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 		     if(AgilePHP::getConfiguration()-&gt;annotations) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                            new InterceptorFilter($class);</sourceline>
        <sourceline coveredcount="0">                            if(class_exists($class, false)) return;</sourceline>
        <sourceline coveredcount="0">                         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		     	 		 require $file-&gt;getPathname();</sourceline>
        <sourceline coveredcount="0">		     	 		 return;</sourceline>
        <sourceline coveredcount="0">			 		  }</sourceline>
        <sourceline coveredcount="0">			 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the component</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The friendly name of the component</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function setName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	$this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the name of the component</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The name of the component</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the version of the component</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $version The version of the component</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function setVersion($version) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	$this-&gt;version = $version;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the version of the component</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The version of the component</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function getVersion() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	return $this-&gt;version;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets enabled flag indicating whether or not this component is enabled/disabled.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param boolean $enabled True or 1 to set enabled, false or 0 otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function setEnabled($enabled) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	$this-&gt;enabled = $enabled;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns whether or not this component is enabled</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return boolean True if the component is enabled, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function isEnabled() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	return $this-&gt;enabled == true ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the configuration &lt;param&gt;'s for the component</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return array Configuraiton params</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function getParams() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	            return $this-&gt;params;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Delegates component front controller actions to the specified controller / action.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param BaseController $controller The controller instance responsible for the delegation.</sourceline>
        <sourceline coveredcount="0">	   * @param string $action Optional delegate action method. Defaults to the front controller action name.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function delegate(BaseController $controller, $action = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	            $parameters = MVC::getParameters();</sourceline>
        <sourceline coveredcount="0">	            if($action) return call_user_func_array(array($controller, $action), $parameters);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	            if(isset($parameters[0])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	               $action = $parameters[0];</sourceline>
        <sourceline coveredcount="0">	               array_shift($parameters);</sourceline>
        <sourceline coveredcount="0">	            }</sourceline>
        <sourceline coveredcount="0">	            else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	               $action =  MVC::getDefaultAction();</sourceline>
        <sourceline coveredcount="0">	               $parameters = array();</sourceline>
        <sourceline coveredcount="0">	            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	            // Make sure requested action method exists</sourceline>
        <sourceline coveredcount="0">	            if(!method_exists($controller, $action))</sourceline>
        <sourceline coveredcount="0">		  	       throw new FrameworkException('The specified action \'' . $action . '\' does not exist.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  	return call_user_func_array(array($controller, $action), $parameters);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides model for component.xml &lt;param&gt; element</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">class ComponentParam {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $name;</sourceline>
        <sourceline coveredcount="0">	  private $type;</sourceline>
        <sourceline coveredcount="0">	  private $value;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Constructor for ComponentParam</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The parameter name</sourceline>
        <sourceline coveredcount="0">	   * @param string $type The parameter data type</sourceline>
        <sourceline coveredcount="0">	   * @param string $value The parameter value</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct($name = null, $type = null, $value = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;type = $type;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;value = $value;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the parameter name</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The parameter name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the parameter name</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The parameter name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the parameter type</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $type Sets the parameter data type</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setType($type) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;type = $type;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the parameter data type</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The parameter data type</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getType() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;type;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the parameter value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $value The parameter value</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setValue($value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;value = $value;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the parameter value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The parameter value</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getValue() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;value;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ComponentParam" methodcount="7" methodscovered="0" statementcount="0" statementscovered="0" totalcount="7" totalcovered="0">
      <sourcefile name="Component.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Component.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides base logic for AgilePHP components. Read/transform component.xml</sourceline>
        <sourceline coveredcount="0"> * to native PHP objects upon construction and provides helper methods for</sourceline>
        <sourceline coveredcount="0"> * accessing configuration parameters and dispatching requests for component</sourceline>
        <sourceline coveredcount="0"> * front controller.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">abstract class Component extends BaseController {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $name;</sourceline>
        <sourceline coveredcount="0">	  private $type;</sourceline>
        <sourceline coveredcount="0">	  private $version;</sourceline>
        <sourceline coveredcount="0">	  private $enabled;</sourceline>
        <sourceline coveredcount="0">	  private $params = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Component constructor parses component.xml and populates base component properties.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         $class = preg_replace('/_Intercepted/', '', get_class($this));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         // Retrieve the component.xml configuration (Use caching if enabled)</sourceline>
        <sourceline coveredcount="0">             if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                $key = 'AGILEPHP_COMPONENT_XML_' . $class;</sourceline>
        <sourceline coveredcount="0">                if($cacher-&gt;exists($key))</sourceline>
        <sourceline coveredcount="0">                   $xml = simplexml_load_string($cacher-&gt;get($key));</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0">             if(!isset($xml)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    	  		 $componentXml = 'components' . DIRECTORY_SEPARATOR . $class . DIRECTORY_SEPARATOR . 'component.xml';</sourceline>
        <sourceline coveredcount="0">     			 if(!file_exists($componentXml))</sourceline>
        <sourceline coveredcount="0">     				throw new FrameworkException($componentXml . ' does not exist');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			 $xml = simplexml_load_file($componentXml);</sourceline>
        <sourceline coveredcount="0">     			 if($cacher) $cacher-&gt;set($key, $xml-&gt;asXML());</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Set the component params (Use caching if enabled)</sourceline>
        <sourceline coveredcount="0">             if($cacher) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                $key = 'AGILEPHP_COMPONENT_PARAMS_' . $class;</sourceline>
        <sourceline coveredcount="0">                if($cacher-&gt;exists($key))</sourceline>
        <sourceline coveredcount="0">                   $this-&gt;params = $cacher-&gt;get($key);</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0">             if(!isset($this-&gt;params[0]) &amp;&amp; !$cacher) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			$dom = new DOMDocument();</sourceline>
        <sourceline coveredcount="0">     			$dom-&gt;Load($componentXml);</sourceline>
        <sourceline coveredcount="0">    			if(!@$dom-&gt;validate()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    			   $error = error_get_last();</sourceline>
        <sourceline coveredcount="0">    			   throw new FrameworkException('component.xml Document Object Model validation failed. ' . $error['message']);</sourceline>
        <sourceline coveredcount="0">    			}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			$properties = array();</sourceline>
        <sourceline coveredcount="0">     			$types = array();</sourceline>
        <sourceline coveredcount="0">     			foreach($xml-&gt;component-&gt;param as $param) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     					$properties[(string)$param-&gt;attributes()-&gt;name] = (string)$param-&gt;attributes()-&gt;value;</sourceline>
        <sourceline coveredcount="0">     					$types[(string)$param-&gt;attributes()-&gt;name] = (string)$param-&gt;attributes()-&gt;type;</sourceline>
        <sourceline coveredcount="0">     			}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			$this-&gt;name = (string)$xml-&gt;component-&gt;attributes()-&gt;name;</sourceline>
        <sourceline coveredcount="0">     			$this-&gt;type = (string)$xml-&gt;component-&gt;attributes()-&gt;type;</sourceline>
        <sourceline coveredcount="0">     			$this-&gt;version = (string)$xml-&gt;component-&gt;attributes()-&gt;version;</sourceline>
        <sourceline coveredcount="0">     			$this-&gt;enabled = (string)$xml-&gt;component-&gt;attributes()-&gt;enabled;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			foreach($xml-&gt;component-&gt;param as $param) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     				    $cp = new ComponentParam();</sourceline>
        <sourceline coveredcount="0">     					$cp-&gt;setName((string)$param-&gt;attributes()-&gt;name);</sourceline>
        <sourceline coveredcount="0">     					$cp-&gt;setType((string)$param-&gt;attributes()-&gt;type);</sourceline>
        <sourceline coveredcount="0">     					$cp-&gt;setValue((string)$param-&gt;attributes()-&gt;value);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     					array_push($this-&gt;params, $cp);</sourceline>
        <sourceline coveredcount="0">     			}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			if($cacher) $cacher-&gt;set($key, $this-&gt;params);</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Add orm configs to ORM Database object if present</sourceline>
        <sourceline coveredcount="0"> 			 if(isset($xml-&gt;component-&gt;orm-&gt;table)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 			    // @todo Implement logic in Studio to check for conflicting table and</sourceline>
        <sourceline coveredcount="0"> 			    //       model names during install to eliminate runtime validation overhead.</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 			    $database = ORMFactory::getDialect()-&gt;getDatabase();</sourceline>
        <sourceline coveredcount="0"> 			    foreach($xml-&gt;component-&gt;orm-&gt;table as $table)</sourceline>
        <sourceline coveredcount="0"> 			         $database-&gt;addTable(new Table($table));</sourceline>
        <sourceline coveredcount="0"> 			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 			 // Prepend component autoloader</sourceline>
        <sourceline coveredcount="0"> 			 spl_autoload_register('Component::autoload', true, true);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Component autoloader responsible for loading classes from the component</sourceline>
        <sourceline coveredcount="0">	   * space (components/#componentName# for source components, phar://#componentName#</sourceline>
        <sourceline coveredcount="0">	   * for phar components).</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $class The class to load</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function autoload($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     // Use caching if enabled</sourceline>
        <sourceline coveredcount="0">             if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                $key = 'AGILEPHP_COMPONENT_AUTOLOAD_' . $class;</sourceline>
        <sourceline coveredcount="0">                if($clazz = $cacher-&gt;get($key)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                   if(AgilePHP::getConfiguration()-&gt;annotations) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                      new InterceptorFilter($class);</sourceline>
        <sourceline coveredcount="0">                      if(class_exists($class, false)) return;</sourceline>
        <sourceline coveredcount="0">                   }</sourceline>
        <sourceline coveredcount="0">                   require $clazz;</sourceline>
        <sourceline coveredcount="0">                   return;</sourceline>
        <sourceline coveredcount="0">                }</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // PHP namespace support</sourceline>
        <sourceline coveredcount="0">             $namespace = explode('\\', $class);</sourceline>
        <sourceline coveredcount="0">             $className = array_pop($namespace);</sourceline>
        <sourceline coveredcount="0">             $namespace = implode(DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $phar = 'phar://' . $namespace . $className . '.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             if(file_exists($phar)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                if(AgilePHP::getConfiguration()-&gt;annotations) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                   new InterceptorFilter($phar);</sourceline>
        <sourceline coveredcount="0">                   if(class_exists($class, false)) return;</sourceline>
        <sourceline coveredcount="0">                }</sourceline>
        <sourceline coveredcount="0">                require $phar;</sourceline>
        <sourceline coveredcount="0">                return;</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Search component directory</sourceline>
        <sourceline coveredcount="0">             $component = AgilePHP::getWebRoot() . DIRECTORY_SEPARATOR . 'components' .</sourceline>
        <sourceline coveredcount="0">                             DIRECTORY_SEPARATOR . $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">		  	 $it = new RecursiveDirectoryIterator($component);</sourceline>
        <sourceline coveredcount="0">			 foreach(new RecursiveIteratorIterator($it) as $file) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		   	     	  $pieces = explode(DIRECTORY_SEPARATOR, $file);</sourceline>
        <sourceline coveredcount="0">			 		  if(array_pop($pieces) == $className . '.php') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 		     if($cacher) $cacher-&gt;set($key, $file-&gt;getPathname());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 		     if(AgilePHP::getConfiguration()-&gt;annotations) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                            new InterceptorFilter($class);</sourceline>
        <sourceline coveredcount="0">                            if(class_exists($class, false)) return;</sourceline>
        <sourceline coveredcount="0">                         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		     	 		 require $file-&gt;getPathname();</sourceline>
        <sourceline coveredcount="0">		     	 		 return;</sourceline>
        <sourceline coveredcount="0">			 		  }</sourceline>
        <sourceline coveredcount="0">			 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the component</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The friendly name of the component</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function setName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	$this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the name of the component</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The name of the component</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the version of the component</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $version The version of the component</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function setVersion($version) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	$this-&gt;version = $version;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the version of the component</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The version of the component</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function getVersion() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	return $this-&gt;version;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets enabled flag indicating whether or not this component is enabled/disabled.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param boolean $enabled True or 1 to set enabled, false or 0 otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function setEnabled($enabled) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	$this-&gt;enabled = $enabled;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns whether or not this component is enabled</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return boolean True if the component is enabled, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function isEnabled() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	return $this-&gt;enabled == true ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the configuration &lt;param&gt;'s for the component</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return array Configuraiton params</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function getParams() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	            return $this-&gt;params;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Delegates component front controller actions to the specified controller / action.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param BaseController $controller The controller instance responsible for the delegation.</sourceline>
        <sourceline coveredcount="0">	   * @param string $action Optional delegate action method. Defaults to the front controller action name.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function delegate(BaseController $controller, $action = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	            $parameters = MVC::getParameters();</sourceline>
        <sourceline coveredcount="0">	            if($action) return call_user_func_array(array($controller, $action), $parameters);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	            if(isset($parameters[0])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	               $action = $parameters[0];</sourceline>
        <sourceline coveredcount="0">	               array_shift($parameters);</sourceline>
        <sourceline coveredcount="0">	            }</sourceline>
        <sourceline coveredcount="0">	            else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	               $action =  MVC::getDefaultAction();</sourceline>
        <sourceline coveredcount="0">	               $parameters = array();</sourceline>
        <sourceline coveredcount="0">	            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	            // Make sure requested action method exists</sourceline>
        <sourceline coveredcount="0">	            if(!method_exists($controller, $action))</sourceline>
        <sourceline coveredcount="0">		  	       throw new FrameworkException('The specified action \'' . $action . '\' does not exist.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  	return call_user_func_array(array($controller, $action), $parameters);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides model for component.xml &lt;param&gt; element</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class ComponentParam {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $name;</sourceline>
        <sourceline coveredcount="0">	  private $type;</sourceline>
        <sourceline coveredcount="0">	  private $value;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Constructor for ComponentParam</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The parameter name</sourceline>
        <sourceline coveredcount="0">	   * @param string $type The parameter data type</sourceline>
        <sourceline coveredcount="0">	   * @param string $value The parameter value</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct($name = null, $type = null, $value = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;type = $type;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;value = $value;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the parameter name</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The parameter name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the parameter name</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The parameter name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the parameter type</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $type Sets the parameter data type</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setType($type) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;type = $type;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the parameter data type</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The parameter data type</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getType() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;type;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the parameter value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $value The parameter value</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setValue($value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;value = $value;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the parameter value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The parameter value</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getValue() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;value;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Identity" methodcount="33" methodscovered="17" statementcount="40" statementscovered="23" totalcount="73" totalcovered="40">
      <sourcefile name="Identity.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/Identity.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * Includes all identity package dependencies</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1">require_once 'identity/IdentityModel.php';</sourceline>
        <sourceline coveredcount="1">require_once 'identity/IdentityManager.php';</sourceline>
        <sourceline coveredcount="1">require_once 'identity/IdentityManagerImpl.php';</sourceline>
        <sourceline coveredcount="1">require_once 'identity/IdentityManagerFactory.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides a means for tracking a users identity throughout the</sourceline>
        <sourceline coveredcount="0"> * web application. The Identity component is responsible for</sourceline>
        <sourceline coveredcount="0"> * persistence, authentication, roles, sessions, password management</sourceline>
        <sourceline coveredcount="0"> * and email tasks.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class Identity {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setModel($model)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setModel($model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 IdentityManagerFactory::getManager()-&gt;setModel($model);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getModel()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getModel() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return IdentityManagerFactory::getManager()-&gt;getModel();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setUsername($username)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setUsername($username) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 IdentityManagerFactory::getManager()-&gt;setUsername($username);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see  src/identity/IdentityManager#setPassword($password)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setPassword($password) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 IdentityManagerFactory::getManager()-&gt;setPassword($password);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getUsername()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getUsername() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return IdentityManagerFactory::getManager()-&gt;getUsername();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getPassword()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getPassword() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return IdentityManagerFactory::getManager()-&gt;getPassword();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setEmail($email)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setEmail($email) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 IdentityManagerFactory::getManager()-&gt;setEmail($email);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getEmail()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getEmail() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return IdentityManagerFactory::getManager()-&gt;getEmail();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setCreated($dateTime)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setCreated($dateTime) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 IdentityManagerFactory::getManager()-&gt;setCreated($dateTime);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getCreated()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getCreated() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return IdentityManagerFactory::getManager()-&gt;getCreated();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setLastLogin($dateTime)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setLastLogin($dateTime) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 IdentityManagerFactory::getManager()-&gt;setLastLogin($dateTime);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getLastLogin()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getLastLogin() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return IdentityManagerFactory::getManager()-&gt;getLastLogin();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setEnabled($value)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setEnabled($value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 IdentityManagerFactory::getManager()-&gt;setEnabled($value);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getEnabled()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getEnabled() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return IdentityManagerFactory::getManager()-&gt;getEnabled();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setRole(Role $role)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function setRole(Role $role) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 IdentityManagerFactory::getManager()-&gt;setRole($role);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getRole()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getRole() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return IdentityManagerFactory::getManager()-&gt;getRole();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setRoles()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setRoles(array $roles) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         IdentityManagerFactory::getManager()-&gt;setRoles($roles);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getRoles()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getRoles() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         return IdentityManagerFactory::getManager()-&gt;getRoles();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#addRole(Role $role)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function addRole(Role $role) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         IdentityManagerFactory::getManager()-&gt;addRole($role);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#hasRole(Role $role)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function hasRole(Role $role) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return IdentityManagerFactory::getManager()-&gt;hasRole($role);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#revokeRole()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function revokeRole(Role $role) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 IdentityManagerFactory::getManager()-&gt;revokeRole($role);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#login($username, $password)</sourceline>
        <sourceline coveredcount="0">	   * @throws AccessDeniedException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function login($username, $password) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return IdentityManagerFactory::getManager()-&gt;login($username, $password);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#resetPassword($token, $sessionId)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function resetPassword($token, $sessionId) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     IdentityManagerFactory::getManager()-&gt;resetPassword($token, $sessionId);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#forgotPassword()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function forgotPassword() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     IdentityManagerFactory::getManager()-&gt;forgotPassword();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#register()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function register() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 IdentityManagerFactory::getManager()-&gt;register();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#confirm($token, $sessionId)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function confirm($token, $sessionId) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 IdentityManagerFactory::getManager()-&gt;confirm($token, $sessionId);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#logout()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function logout() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 Log::debug('Identity::logout');</sourceline>
        <sourceline coveredcount="-1">	  		 Scope::getSessionScope()-&gt;destroy();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#isLoggedIn()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function isLoggedIn() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return IdentityManagerFactory::getManager()-&gt;isLoggedIn();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#persist()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function persist() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 IdentityManagerFactory::getManager()-&gt;persist();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#merge()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function merge() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 IdentityManagerFactory::getManager()-&gt;merge();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#delete()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function delete() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     IdentityManagerFactory::getManager()-&gt;delete();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#refresh()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function refresh() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 IdentityManagerFactory::getManager()-&gt;refresh();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Destructor prints log debug entry notifying that the identity instance has been destroyed.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __destruct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 Log::debug('Identity::__destruct Instance destroyed');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="i18n" methodcount="7" methodscovered="4" statementcount="24" statementscovered="12" totalcount="31" totalcovered="16">
      <sourcefile name="i18n.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/i18n.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Internationalization using the GNU gettext library.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class i18n {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private static $instance;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $locale;</sourceline>
        <sourceline coveredcount="0">	  private $domain = 'messages';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initalizes the language/locale based on HTTP langauge header</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  if(isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  	  $httpLang = $_SERVER['HTTP_ACCEPT_LANGUAGE'];</sourceline>
        <sourceline coveredcount="-1">	  		 	  $pieces = explode(';', $httpLang);</sourceline>
        <sourceline coveredcount="-1">	  		 	  $dirty = (count($pieces) &gt; 0) ? substr($pieces[0], 0, 5) : null;</sourceline>
        <sourceline coveredcount="-1">	  		 	  $locale = str_replace('-', '_', $dirty);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	  if(file_exists(AgilePHP::getWebRoot() .</sourceline>
        <sourceline coveredcount="-1">	  		 	  			DIRECTORY_SEPARATOR . 'locale' . $this-&gt;getLocale())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	  	  $this-&gt;setLocale($locale);</sourceline>
        <sourceline coveredcount="-1">	  		 	  	  $this-&gt;setDomain($this-&gt;domain);</sourceline>
        <sourceline coveredcount="-1">	  		 	  }</sourceline>
        <sourceline coveredcount="-1">	  		  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a singleton instance of i18n</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return i18n Singleton instance of i18n</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getInstance() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 if(self::$instance == null)</sourceline>
        <sourceline coveredcount="3">	  		 	 self::$instance = new self;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return self::$instance;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the messaging domain. This is the name of your .PO/.MO files.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $domain The messaging domain. Defaults to 'messages'.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setDomain($domain) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;domain = $domain;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 bindtextdomain($domain, AgilePHP::getWebRoot() . DIRECTORY_SEPARATOR . 'locale');</sourceline>
        <sourceline coveredcount="3">			 textdomain($domain);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the messaging domain.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The messaging domain</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDomain() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;domain;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the language locale.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $locale The two letter_TWO LETTER language local. (ie. en_US, en_ES, ...)</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setLocale($locale) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;locale = $locale;</sourceline>
        <sourceline coveredcount="3">	  		 setlocale(LC_ALL, $locale);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the language locale being used to translate</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The language locale</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getLocale() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;locale;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Performs language translation based on the configured locale.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $text The text to translate</sourceline>
        <sourceline coveredcount="0">	   * @return string The translated text</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function translate($text) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return _($text);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.webservice.soap" methodcount="15" methodscovered="0" statementcount="0" statementscovered="0" totalcount="15" totalcovered="0">
    <class name="SOAPService" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="SOAPService.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/soap/SOAPService.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Exposes PHP classes via SOAP. This may be replaced in the future with</sourceline>
        <sourceline coveredcount="0"> * #@WebMethod interceptor. Currently #@WebMethod is just an annotation</sourceline>
        <sourceline coveredcount="0"> * that causes the method to be included during WSDL generation.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">abstract class SOAPService extends BaseController {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Invokes the requested SOAP method.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @return void</sourceline>
        <sourceline coveredcount="0">		  * @see src/mvc/BaseController#index()</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 public function index() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 		$wsdlMethod = 'wsdl';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 		$class = new AnnotatedClass($this);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 		// Provide default targetNamespace in case #@WebService annotation is missing</sourceline>
        <sourceline coveredcount="0">		 		$targetNamespace = 'http://' . $_SERVER['HTTP_HOST'] . AgilePHP::getRequestBase() . '/' . MVC::getController();</sourceline>
        <sourceline coveredcount="0">	  		    $annotations = Annotation::getClassAsArray($class-&gt;getName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		// Initalize web service configuration from #@WebService annotation if present</sourceline>
        <sourceline coveredcount="0">	  		 	if(count($annotations)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 	foreach($annotations as $annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 	 	if($annotation instanceof WebService) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 	 		if($annotation-&gt;serviceName)</sourceline>
        <sourceline coveredcount="0">		  		 	 			$serviceName = $annotation-&gt;serviceName;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 	 		if($annotation-&gt;targetNamespace)</sourceline>
        <sourceline coveredcount="0">		  		 	 			$targetNamespace = $annotation-&gt;targetNamespace;</sourceline>
        <sourceline coveredcount="0">	  		 	 		}</sourceline>
        <sourceline coveredcount="0">		  		 	}</sourceline>
        <sourceline coveredcount="0">	  		 	}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	// Get method annotated with WSDL interceptor</sourceline>
        <sourceline coveredcount="0">	  		 	$methods = $class-&gt;getMethods();</sourceline>
        <sourceline coveredcount="0">	  		 	foreach($methods as $method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		foreach($method-&gt;getAnnotations() as $annotes) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 			foreach($annotes as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 				if($annote instanceof WSDL) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 					$wsdlMethod = $method-&gt;getName();</sourceline>
        <sourceline coveredcount="0">	  		 					break;</sourceline>
        <sourceline coveredcount="0">	  		 				}</sourceline>
        <sourceline coveredcount="0">	  		 			}</sourceline>
        <sourceline coveredcount="0">	  		 		}</sourceline>
        <sourceline coveredcount="0">	  		 	}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 		if(AgilePHP::isInDebugMode())</sourceline>
        <sourceline coveredcount="0">					ini_set('soap.wsdl_cache_enabled', '0');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				$server = new SoapServer($targetNamespace . '/' . $wsdlMethod);</sourceline>
        <sourceline coveredcount="0">				$server-&gt;setClass($class-&gt;getName());</sourceline>
        <sourceline coveredcount="0">				$server-&gt;handle();</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="WebService" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="WebService.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/soap/WebService.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">require_once 'webservice/soap/SOAPBinding.php';</sourceline>
        <sourceline coveredcount="0">require_once 'webservice/soap/SOAPService.php';</sourceline>
        <sourceline coveredcount="0">require_once 'webservice/soap/WebMethod.php';</sourceline>
        <sourceline coveredcount="0">require_once 'webservice/soap/WSDL.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Annotation responsible for exposing standard PHP classes via SOAP.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@WebService(serviceName = 'MyAPIService', targetNameSpace = 'http://www.mydomain.com/index.php/MyAPI')</sourceline>
        <sourceline coveredcount="0"> * class MyAPI {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class WebService {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * @var String The SOAP web service name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $serviceName;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * @var String The target namespace of the web service. This is be the location to your web service. (http://api.example.org/index.php/TestAPI)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $targetNamespace;</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="WebMethod" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="WebMethod.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/soap/WebMethod.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Annotation which authorizes a method for inclusion during #@WSDL generation.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@WebService(serviceName = 'MyAPIService', targetNameSpace = 'http://www.mydomain.com/index.php/MyAPI')</sourceline>
        <sourceline coveredcount="0"> * class MyAPI {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 #@WSDL</sourceline>
        <sourceline coveredcount="0"> * 		 public function wsdl() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 				// When this method gets requested the #@WSDL interceptor</sourceline>
        <sourceline coveredcount="0"> * 				// will reverse engineer this class and output a WSDL</sourceline>
        <sourceline coveredcount="0"> * 				// file any SOAP client can consume to execute a #@WebMethod.</sourceline>
        <sourceline coveredcount="0"> * 		 }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 #@WebMethod</sourceline>
        <sourceline coveredcount="0"> * 		 public function someMethod() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 				// I will get included during WSDL generation</sourceline>
        <sourceline coveredcount="0"> * 		 }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 public function someMethod2() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 				// I will not get included during WSDL generation</sourceline>
        <sourceline coveredcount="0"> * 		 }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class WebMethod {}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="SOAPBinding" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="SOAPBinding.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/soap/SOAPBinding.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Annotation that describes the SOAP web service binding style and usage.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@WebService(serviceName = 'MyAPIService', targetNameSpace = 'http://www.mydomain.com/index.php/MyAPI')</sourceline>
        <sourceline coveredcount="0"> * #@SOAPBinding(style = SOAPStyle::RPC, use = SOAPStyle::ENCODED)</sourceline>
        <sourceline coveredcount="0"> * class MyAPI {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // I am a RPC/Encoded SOAP web service and can be easily changed into</sourceline>
        <sourceline coveredcount="0"> * 		 // RPC/Literal or Document Literal Wrapped by simply changing the #@SOAPBinding</sourceline>
        <sourceline coveredcount="0"> * 		 // values.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class SOAPBinding {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * @var String The SOAP style used in the WSDL. (STYLE_DOCUMENT|STYLE_RPC) Default is STYLE_DOCUMENT.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $style = SoapStyle::DOCUMENT;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * @var String Specifies the encoding rules of the SOAP message. (USE_ENCODED|USE_LITERAL). Default is USE_LITERAL.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $use = SoapStyle::LITERAL;</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * SOAP binding constants class that represents the SOAP web service style and usage.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">class SOAPStyle {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  const RPC = 'rpc';</sourceline>
        <sourceline coveredcount="0">	  const DOCUMENT = 'document';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  const ENCODED = 'encoded';</sourceline>
        <sourceline coveredcount="0">	  const LITERAL = 'literal';</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="SOAPStyle" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="SOAPBinding.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/soap/SOAPBinding.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Annotation that describes the SOAP web service binding style and usage.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@WebService(serviceName = 'MyAPIService', targetNameSpace = 'http://www.mydomain.com/index.php/MyAPI')</sourceline>
        <sourceline coveredcount="0"> * #@SOAPBinding(style = SOAPStyle::RPC, use = SOAPStyle::ENCODED)</sourceline>
        <sourceline coveredcount="0"> * class MyAPI {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // I am a RPC/Encoded SOAP web service and can be easily changed into</sourceline>
        <sourceline coveredcount="0"> * 		 // RPC/Literal or Document Literal Wrapped by simply changing the #@SOAPBinding</sourceline>
        <sourceline coveredcount="0"> * 		 // values.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">class SOAPBinding {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * @var String The SOAP style used in the WSDL. (STYLE_DOCUMENT|STYLE_RPC) Default is STYLE_DOCUMENT.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $style = SoapStyle::DOCUMENT;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * @var String Specifies the encoding rules of the SOAP message. (USE_ENCODED|USE_LITERAL). Default is USE_LITERAL.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $use = SoapStyle::LITERAL;</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * SOAP binding constants class that represents the SOAP web service style and usage.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class SOAPStyle {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  const RPC = 'rpc';</sourceline>
        <sourceline coveredcount="0">	  const DOCUMENT = 'document';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  const ENCODED = 'encoded';</sourceline>
        <sourceline coveredcount="0">	  const LITERAL = 'literal';</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="WSDL" methodcount="14" methodscovered="0" statementcount="0" statementscovered="0" totalcount="14" totalcovered="0">
      <sourcefile name="WSDL.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/soap/WSDL.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Interceptor responsible for generating a WSDL file for the implementing web service.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.soap</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@WSDL</sourceline>
        <sourceline coveredcount="0"> * public function wsdl() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // I will generate a WSDL file with xml content header when invoked</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="0" startclass="1">class WSDL {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $class;</sourceline>
        <sourceline coveredcount="0">	  private $serviceName;</sourceline>
        <sourceline coveredcount="0">	  private $targetNamespace;</sourceline>
        <sourceline coveredcount="0">	  private $SOAPBinding;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $types = '';</sourceline>
        <sourceline coveredcount="0">	  private $messages = '';</sourceline>
        <sourceline coveredcount="0">	  private $ptOperations = '';</sourceline>
        <sourceline coveredcount="0">	  private $bOperations = '';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $processedComplexArrays = array();</sourceline>
        <sourceline coveredcount="0">	  private $processedComplexObjects = array();</sourceline>
        <sourceline coveredcount="0">	  private $wrappedTypes = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Generates and outputs a WSDL file according to the #@SOAPBinding in the</sourceline>
        <sourceline coveredcount="0">	   * implementing #@WebService.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The intercepted call context</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function generateWSDL(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $callee = $ic-&gt;getCallee();</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;class = $callee['class']; // The PHP standard class to expose via SOAP</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Supply default web service configuration values</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;serviceName = $this-&gt;class . 'Service';</sourceline>
        <sourceline coveredcount="0">	 		 $this-&gt;targetNamespace = 'http://' . $_SERVER['HTTP_HOST'] . AgilePHP::getRequestBase() . '/' . MVC::getController();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $annotations = Annotation::getClassAsArray($this-&gt;class);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Initalize web service configuration from #@WebService annotation if present</sourceline>
        <sourceline coveredcount="0">	  		 if(count($annotations)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 foreach($annotations as $annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 		if($annotation instanceof WebService) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 			if($annotation-&gt;serviceName)</sourceline>
        <sourceline coveredcount="0">	  		 	 				$serviceName = $annotation-&gt;serviceName;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 			if($annotation-&gt;targetNamespace)</sourceline>
        <sourceline coveredcount="0">	  		 	 				$this-&gt;targetNamespace = $annotation-&gt;targetNamespace;</sourceline>
        <sourceline coveredcount="0">	  		 	 		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 		if($annotation instanceof SOAPBinding)</sourceline>
        <sourceline coveredcount="0">	  		 	 			$this-&gt;SOAPBinding = $annotation;</sourceline>
        <sourceline coveredcount="0">	  		 	 }</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Set default SOAPBinding if not explicitly defined</sourceline>
        <sourceline coveredcount="0">	  		 if(!$this-&gt;SOAPBinding)</sourceline>
        <sourceline coveredcount="0">	  		 	 $this-&gt;SOAPBinding = new SOAPBinding();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $clazz = new ReflectionClass($ic-&gt;getTarget());</sourceline>
        <sourceline coveredcount="0">	  		 $methods = Annotation::getMethodsAsArray($this-&gt;class);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 foreach($methods as $method =&gt; $annotations) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		  $isWSDLMethod = false;</sourceline>
        <sourceline coveredcount="0">	  		 		  $isWebMethod = false;</sourceline>
        <sourceline coveredcount="0">	  		 		  $parts = '';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		  $m = $clazz-&gt;getMethod($method);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 	    	  foreach($annotations as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 	    	  		if($annote instanceof WSDL) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 	    	  			$isWSDLMethod = true;</sourceline>
        <sourceline coveredcount="0">		 	    	  			break;</sourceline>
        <sourceline coveredcount="0">		 	    	  		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 	    	  		// Include only methods annotated with #@WebMethod annotation</sourceline>
        <sourceline coveredcount="0">		 	    	  		$isWebMethod = ($annote instanceof WebMethod || $isWebMethod == $method) ? $method : false;</sourceline>
        <sourceline coveredcount="0">		 	    	  		if(!$isWebMethod) continue;</sourceline>
        <sourceline coveredcount="0">		 	    	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 	    	  if($isWSDLMethod) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 	    	  // Document/Literal Wrapped</sourceline>
        <sourceline coveredcount="0">	  		 		  if($this-&gt;SOAPBinding-&gt;style == SOAPStyle::DOCUMENT &amp;&amp;</sourceline>
        <sourceline coveredcount="0">		 	    	  				$this-&gt;SOAPBinding-&gt;use == SOAPStyle::LITERAL) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 	    	  			$this-&gt;createWrappedMethod($m);</sourceline>
        <sourceline coveredcount="0">			 	    		 	$this-&gt;createWrappedMessage($method);</sourceline>
        <sourceline coveredcount="0">			 	    		 	$this-&gt;createPortTypeOperation($method);</sourceline>
        <sourceline coveredcount="0">				      			$this-&gt;createBindingOperation($method);</sourceline>
        <sourceline coveredcount="0">			 	    		 	continue;</sourceline>
        <sourceline coveredcount="0">		 	    	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 	    	  // RPC/ENCODED/LITERAL</sourceline>
        <sourceline coveredcount="0">		 	    	  foreach($m-&gt;getParameters() as $param) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 	    	  		$dataType = $this-&gt;getParameterTypeFromDocBlock($m, $param);</sourceline>
        <sourceline coveredcount="0">		 	    	  		$ns = $this-&gt;getTypeNamespace($param-&gt;name, $param-&gt;name);</sourceline>
        <sourceline coveredcount="0">		 	    	  		if(preg_match('/\[\]/', $dataType)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 	    	  			$ns = 'tns';</sourceline>
        <sourceline coveredcount="0">		 	    	  			$dataType = preg_replace('/\[\]/', 'Array', $dataType);</sourceline>
        <sourceline coveredcount="0">		 	    	  			$this-&gt;arrayToComplexType($dataType, $ns, $param-&gt;name);</sourceline>
        <sourceline coveredcount="0">		 	    	  		}</sourceline>
        <sourceline coveredcount="0">		 	    	  		$parts .= "\t\t&lt;part name=\"" . $param-&gt;name . "\" type=\"$ns:" . $dataType . '"/&gt;' . PHP_EOL;</sourceline>
        <sourceline coveredcount="0"> 	    		 	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 	    		 	  $returnType = $this-&gt;getReturnTypeFromDocBlock($m);</sourceline>
        <sourceline coveredcount="0"> 	    		 	  $ns = $this-&gt;getTypeNamespace($returnType, 'return');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				      $this-&gt;createMessage($method, $parts, $returnType, $ns);</sourceline>
        <sourceline coveredcount="0">				      $this-&gt;createPortTypeOperation($method);</sourceline>
        <sourceline coveredcount="0">				      $this-&gt;createBindingOperation($method);</sourceline>
        <sourceline coveredcount="0">      		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    		  $xml = $this-&gt;assemble();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	  header('content-type: text/xml');</sourceline>
        <sourceline coveredcount="0">			  header('content-length: ' . strlen($xml));</sourceline>
        <sourceline coveredcount="0">			  print($xml);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Adds all of the generated pieces together to form the complete WSDL document.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The WSDL document</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function assemble() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $types = $this-&gt;getTypes();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $xml = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "&lt;definitions name=\"" . $this-&gt;class . "\" targetNamespace=\"" . $this-&gt;targetNamespace . "\"" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\txmlns:tns=\"" . $this-&gt;targetNamespace . "\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\txmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap-enc=\"http://schemas.xmlsoap.org/soap/encoding/\"" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\txmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns=\"http://schemas.xmlsoap.org/wsdl/\"&gt;" . PHP_EOL . PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  if($types) $xml .= $types;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $xml .= $this-&gt;messages;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= PHP_EOL . "\t&lt;portType name=\"" . $this-&gt;class . "PortType\"&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= $this-&gt;ptOperations;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\t&lt;/portType&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $xml .= PHP_EOL . "\t&lt;binding name=\"" . $this-&gt;class . 'Binding" type="tns:' . $this-&gt;class . "PortType\"&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\t\t&lt;soap:binding style=\"" . $this-&gt;SOAPBinding-&gt;style . "\" transport=\"http://schemas.xmlsoap.org/soap/http\"/&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= $this-&gt;bOperations;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\t&lt;/binding&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= PHP_EOL . "\t&lt;service name=\"" . $this-&gt;serviceName . "\"&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\t\t&lt;port name=\"" . $this-&gt;class . "Port\" binding=\"tns:" . $this-&gt;class . "Binding\"&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\t\t\t&lt;soap:address location=\"" . $this-&gt;targetNamespace . "\"/&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\t\t&lt;/port&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\t&lt;/service&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= '&lt;/definitions&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  return $xml;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a single messages part and appends it to the messages class property.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $method The name of the message part</sourceline>
        <sourceline coveredcount="0">	   * @param string $part The request part</sourceline>
        <sourceline coveredcount="0">	   * @param string $returnType The PHP data type being returned from this message part (extracted from PHP-doc Comment)</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createMessage($method, $part, $returnType, $ns) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  if(stristr($returnType, '[]'))</sourceline>
        <sourceline coveredcount="0">	  		  	  $returnType = preg_replace('/\[\]/', 'Array', $returnType);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $messages = "\t&lt;message name=\"" . $method . "Request\"&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $messages .= $part;</sourceline>
        <sourceline coveredcount="0">	  		  $messages .= "\t&lt;/message&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $messages .= "\t&lt;message name=\"" . $method . "Response\"&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  if($returnType) $messages .= "\t\t&lt;part name=\"" . $method . "Return\" type=\"$ns:$returnType\" /&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $messages .= "\t&lt;/message&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $this-&gt;messages .= $messages;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a single message and its part for use with Document/Literal (wrapeed) and appends it to the messages property.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $method The name of the message part</sourceline>
        <sourceline coveredcount="0">	   * @param string $part The request part</sourceline>
        <sourceline coveredcount="0">	   * @param string $returnType The PHP data type being returned from this message part (extracted from PHP-doc Comment)</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createWrappedMessage($method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $messages = "\t&lt;message name=\"" . $method . "\"&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $messages .= "\t\t&lt;part name=\"parameters\" element=\"tns:" . $method . "\"/&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $messages .= "\t&lt;/message&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $messages .= "\t&lt;message name=\"" . $method . "Response\"&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $messages .= "\t\t&lt;part name=\"parameters\" element=\"tns:" . $method . "Response\"/&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $messages .= "\t&lt;/message&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $this-&gt;messages .= $messages;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new wsdl binding operation and appends it to the operations class property.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $method The name of the operation to bind</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createBindingOperation($method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $operation = "\t\t&lt;wsdl:operation name=\"$method\"&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $operation .= "\t\t\t&lt;soap:operation/&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $operation .= "\t\t\t\t&lt;input&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $operation .= "\t\t\t\t\t&lt;soap:body use=\"" . $this-&gt;SOAPBinding-&gt;use . "\"" . (($this-&gt;SOAPBinding-&gt;use == SOAPStyle::ENCODED) ? ' encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"' : '') . "/&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">			  $operation .= "\t\t\t\t&lt;/input&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">			  $operation .= "\t\t\t\t&lt;output&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">			  $operation .= "\t\t\t\t\t&lt;soap:body use=\"" . $this-&gt;SOAPBinding-&gt;use . "\"" . (($this-&gt;SOAPBinding-&gt;use == SOAPStyle::ENCODED) ? ' encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"' : '') . "/&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">      		  $operation .= "\t\t\t\t&lt;/output&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">      		  $operation .= "\t\t&lt;/wsdl:operation&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      		  $this-&gt;bOperations .= $operation;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a Port Type operation and appends it to the class property ptOperations.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $method The name of the port type operation</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createPortTypeOperation($method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  $operation = "\t\t&lt;wsdl:operation name=\"$method\"&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">			  $operation .= "\t\t\t&lt;input message=\"tns:" . $method . "" .</sourceline>
        <sourceline coveredcount="0">			  		 (($this-&gt;SOAPBinding-&gt;style == SOAPStyle::DOCUMENT &amp;&amp;</sourceline>
        <sourceline coveredcount="0">			  		 	 $this-&gt;SOAPBinding-&gt;use == SOAPStyle::LITERAL) ? '" name="' . $method . '' : 'Request') . "\"/&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">			  $operation .= "\t\t\t&lt;output message=\"tns:" . $method . "" .</sourceline>
        <sourceline coveredcount="0">			  		 (($this-&gt;SOAPBinding-&gt;style == SOAPStyle::DOCUMENT &amp;&amp;</sourceline>
        <sourceline coveredcount="0">			  		 	 $this-&gt;SOAPBinding-&gt;use == SOAPStyle::LITERAL) ? 'Response" name="' . $method . 'Response' : 'Response') . "\"/&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">			  $operation .= "\t\t&lt;/wsdl:operation&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  $this-&gt;ptOperations .= $operation;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates the wsdl:types node containing each of the complexType's used in the web service</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The complexType elements represented in XML</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function getTypes() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  if(!$this-&gt;types) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $xml = "\t&lt;wsdl:types&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\t\t&lt;xsd:schema targetNamespace=\"" . $this-&gt;targetNamespace . "\"&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">			  $xml .= $this-&gt;types;</sourceline>
        <sourceline coveredcount="0">			  $xml .= "\t\t&lt;/xsd:schema&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\t&lt;/wsdl:types&gt;" . PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  return $xml;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new complex type node for the specified class / data type.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $class The name of the data type</sourceline>
        <sourceline coveredcount="0">	   * @param string $ns The namespace used for this data type</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function objectToComplexType($class, $ns, $isWrapped = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  if(in_array($class, $this-&gt;processedComplexObjects)) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $eol = PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $reflClass = new ReflectionClass($class);</sourceline>
        <sourceline coveredcount="0">			  $xml = "\t\t\t&lt;xsd:complexType name=\"" . $reflClass-&gt;getName() . "\"&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">			  $xml .= "\t\t\t\t&lt;xsd:sequence&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  foreach($reflClass-&gt;getProperties() as $property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		   $type = $this-&gt;getPropertyTypeFromDocBlock($property);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		   if($this-&gt;SOAPBinding-&gt;use == SOAPStyle::LITERAL &amp;&amp;	preg_match('/\[\]/', $type)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		   	   $type = preg_replace('/\[\]/', '', $type);</sourceline>
        <sourceline coveredcount="0">			  		   	   $ns = $this-&gt;getTypeNamespace($type, $property-&gt;name);</sourceline>
        <sourceline coveredcount="0">			  		   	   $xml .= "\t\t\t\t\t&lt;xsd:element name=\"" . $property-&gt;name . "\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"" . $ns . ":" . $type . "\"/&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">			  		   }</sourceline>
        <sourceline coveredcount="0">			  		   else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		   	   $ns = $this-&gt;getTypeNamespace($type, $property-&gt;name);</sourceline>
        <sourceline coveredcount="0">					   	   $xml .= "\t\t\t\t\t&lt;xsd:element name=\"" . $property-&gt;name . "\" type=\"" . $ns . ":" . $type . "\"/&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">			  		   }</sourceline>
        <sourceline coveredcount="0">			  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  $xml .= "\t\t\t\t&lt;/xsd:sequence&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">			  $xml .= "\t\t\t&lt;/xsd:complexType&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  $this-&gt;types .= $xml;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  array_push($this-&gt;processedComplexObjects, $class);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a Document/Literal wrapped complex type</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createWrappedMethod(ReflectionMethod $method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $this-&gt;getTypeNamespace($method-&gt;getName(), $method-&gt;getName());</sourceline>
        <sourceline coveredcount="0">	  		  $this-&gt;getTypeNamespace($method-&gt;getName() . 'Response', $method-&gt;getName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $eol = PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $xml = "\t\t\t&lt;xsd:element name=\"" . $method-&gt;getName() . "\" type=\"tns:" . $method-&gt;getName() . "\"/&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">	  		  $xml .= "\t\t\t&lt;xsd:element name=\"" . $method-&gt;getName() . "Response\" type=\"tns:" . $method-&gt;getName() . "Response\"/&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">	  		  $this-&gt;types .= $xml;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  return;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new complex type node for the specified array.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The complexType name</sourceline>
        <sourceline coveredcount="0">	   * @param string $ns The namespace to use as a reference for the data type</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function arrayToComplexType($name, $ns, $paramName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  if(in_array($name, $this-&gt;processedComplexArrays)) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $eol = PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  if($this-&gt;SOAPBinding-&gt;use == SOAPStyle::ENCODED) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  	  $type = preg_replace('/Array/', '[]', $name);</sourceline>
        <sourceline coveredcount="0">	  		      $name = preg_replace('/\[\]/', '', $name);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				  $xml = "\t\t\t&lt;xsd:complexType name=\"" . $name . "\"&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">				  $xml .= "\t\t\t\t&lt;xsd:complexContent&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">				  $xml .= "\t\t\t\t\t&lt;xsd:restriction base=\"soap-enc:Array\"&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">				  $xml .= "\t\t\t\t\t\t&lt;xsd:attribute ref=\"soap-enc:arrayType\" wsdl:arrayType=\"" . $ns . ":" . $type . "\"/&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">				  $xml .= "\t\t\t\t\t&lt;/xsd:restriction&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">				  $xml .= "\t\t\t\t&lt;/xsd:complexContent&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">				  $xml .= "\t\t\t&lt;/xsd:complexType&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">	  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  else if($this-&gt;SOAPBinding-&gt;use == SOAPStyle::LITERAL) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  	  $type = $name;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  	  $xsdTypes = array('string', 'int', 'float', 'double', 'boolean');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  	  preg_match_all('/Array/', $name, $matches);</sourceline>
        <sourceline coveredcount="0">	  		  	  if(count($matches[0]) == 1) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		  	  $rawType = preg_replace('/Array/', '', $name);</sourceline>
        <sourceline coveredcount="0">		  		  	  if(in_array($rawType, $xsdTypes)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		  	  	  $type = $rawType;</sourceline>
        <sourceline coveredcount="0">		  		  	  	  $ns = 'xsd';</sourceline>
        <sourceline coveredcount="0">		  		  	  }</sourceline>
        <sourceline coveredcount="0">		  		  	  else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		  	  	  $type = $rawType;</sourceline>
        <sourceline coveredcount="0">		  		  	  	  $ns = 'tns';</sourceline>
        <sourceline coveredcount="0">		  		  	  }</sourceline>
        <sourceline coveredcount="0">	  		  	  }</sourceline>
        <sourceline coveredcount="0">	  		  	  else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  	  	  $type = preg_replace('/Array/', '', $name, 1);</sourceline>
        <sourceline coveredcount="0">	  		  	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  	  $xml = "\t\t\t&lt;xsd:complexType name=\"" . $name . "\"&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">				  $xml .= "\t\t\t\t&lt;xsd:sequence&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">				  $xml .= "\t\t\t\t\t\t&lt;xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"$paramName\" type=\"" . $ns . ":" . $type . "\"/&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">				  $xml .= "\t\t\t\t&lt;/xsd:sequence&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">				  $xml .= "\t\t\t&lt;/xsd:complexType&gt;" . $eol;</sourceline>
        <sourceline coveredcount="0">	  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  $this-&gt;types .= $xml;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  array_push($this-&gt;processedComplexArrays, $name);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets a property / field level data type from the web service PHP-doc comments block for the specified property</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param ReflectionProperty $property A PHP ReflectionProperty instance representing the property to extract the data type for.</sourceline>
        <sourceline coveredcount="0">	   * @return string The extracted PHP data type</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function getPropertyTypeFromDocBlock(ReflectionProperty $property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  preg_match('/@var\\s*(.*?)\\s/i', $property-&gt;getDocComment(), $matches);</sourceline>
        <sourceline coveredcount="0">	  		  return (isset($matches[1])) ? trim($matches[1]) : 'anyType';</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">       * Gets a param data type from the web service PHP-doc comments block for the method being inspected.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param ReflectionMethod $method A PHP ReflectionMethod instance representing the method to extract the parameter data type for.</sourceline>
        <sourceline coveredcount="0">       * @return string The extracted PHP data type</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function getParameterTypeFromDocBlock(ReflectionMethod $method, $param) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  preg_match('/@param\\s*(.*?\\[?\\]?)\\s*\$' . $param-&gt;name . '/i', $method-&gt;getDocComment(), $matches);</sourceline>
        <sourceline coveredcount="0">	  		  return (isset($matches[1])) ? trim($matches[1]) : 'anyType';</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">       * Gets a web servie method return type from the PHP-doc comments block on the method being inspected.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param ReflectionMethod $method A PHP ReflectionMethod instance representing the method to extract the parameter data type for.</sourceline>
        <sourceline coveredcount="0">       * @return string The extracted PHP data type</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function getReturnTypeFromDocBlock(ReflectionMethod $method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  preg_match('/@return\\s*(.*?)\\s/i', $method-&gt;getDocComment(), $matches);</sourceline>
        <sourceline coveredcount="0">	  		  return (isset($matches[1])) ? trim($matches[1]) : null;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the WSDL namespace value based on data type.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $type The data type to inspect</sourceline>
        <sourceline coveredcount="0">	   * @return string The namespace value to assign</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function getTypeNamespace($type, $paramName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  // This is an array</sourceline>
        <sourceline coveredcount="0">	  		  if(preg_match('/\[\]/', $type)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		  $type = preg_replace('/\[\]/', 'Array', $type);</sourceline>
        <sourceline coveredcount="0">		  		  $ns = 'tns';</sourceline>
        <sourceline coveredcount="0">		  		  $this-&gt;arrayToComplexType($type, $ns, $paramName);</sourceline>
        <sourceline coveredcount="0">		  		  return $ns;</sourceline>
        <sourceline coveredcount="0">	  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  // The type is not an array</sourceline>
        <sourceline coveredcount="0">	  		  if(class_exists($type, false)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  	  // The type is an object</sourceline>
        <sourceline coveredcount="0">		  		  $ns = 'tns';</sourceline>
        <sourceline coveredcount="0">		  		  $this-&gt;objectToComplexType($type, $ns);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		  return $ns;</sourceline>
        <sourceline coveredcount="0">		  	  }</sourceline>
        <sourceline coveredcount="0">		  	  else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	  	  // The type is primitive</sourceline>
        <sourceline coveredcount="0">		  	  	  return 'xsd';</sourceline>
        <sourceline coveredcount="0">	  		  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.webservice.rest" methodcount="19" methodscovered="10" statementcount="51" statementscovered="42" totalcount="70" totalcovered="52">
    <class name="POST" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="POST.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/rest/POST.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for processing POST (create) requests for a REST resource.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyClassRemote {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@POST</sourceline>
        <sourceline coveredcount="0"> * #@Path(resource = '/{id}')</sourceline>
        <sourceline coveredcount="0"> * public function createObject($id) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // This is invoked only when the resource is requested using HTTP POST request method.</sourceline>
        <sourceline coveredcount="0">  * }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="0" startclass="1">class POST {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Liason between REST client and service to handle data transformations and providing</sourceline>
        <sourceline coveredcount="0">	   * appropriate "201 Created" HTTP status code header. Missing content-type header result</sourceline>
        <sourceline coveredcount="0">	   * in a 406 Not Acceptable.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The intercepted call state</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function process(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $callee = $ic-&gt;getCallee();</sourceline>
        <sourceline coveredcount="0">			 $class = $callee['class'];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 // Get the negotiated mime types used to format the request and response data</sourceline>
        <sourceline coveredcount="0">			 $negotiation = RestUtil::negotiate($class, $ic-&gt;getMethod());</sourceline>
        <sourceline coveredcount="0">			 $ProduceMime = $negotiation['ProduceMime'];</sourceline>
        <sourceline coveredcount="0">			 $ConsumeMime = $negotiation['ConsumeMime'];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Read the PUT data</sourceline>
        <sourceline coveredcount="0">	  		 $data = trim(file_get_contents('php://input'));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Transform data if the REST service resource has a #@ConsumeMime annotation</sourceline>
        <sourceline coveredcount="0">	  		 if($ConsumeMime) $data = RestUtil::consumeTransform($data, $ConsumeMime);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Add the data to the parameters passed into the intercepted REST resource action method</sourceline>
        <sourceline coveredcount="0">	  		 $params = $ic-&gt;getParameters();</sourceline>
        <sourceline coveredcount="0">	  		 array_push($params, $data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Execute the REST service resource and store the return value</sourceline>
        <sourceline coveredcount="0">	  		 $return = call_user_func_array(array($ic-&gt;getTarget(), $ic-&gt;getMethod()), $params);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Format the return value according to the negotiated mime type and exit the application.</sourceline>
        <sourceline coveredcount="0">	  		 $out = RestUtil::serverTransform($return, $ProduceMime);</sourceline>
        <sourceline coveredcount="0">	  		 header('HTTP/1.1 201 Created');</sourceline>
        <sourceline coveredcount="0">	  		 die($out);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="RestUtil" methodcount="3" methodscovered="0" statementcount="0" statementscovered="0" totalcount="3" totalcovered="0">
      <sourcefile name="RestUtil.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/rest/RestUtil.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * REST utility/helper class for handling mime negotiation and data transformations.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class RestUtil {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Responsible for negotiating a mime type used to send data from the server</sourceline>
        <sourceline coveredcount="0">	   * to the client. This is done by first checking the client preferred mime types</sourceline>
        <sourceline coveredcount="0">	   * and ensuring one of the following mimes is supported:</sourceline>
        <sourceline coveredcount="0">	   * 1) application/xml</sourceline>
        <sourceline coveredcount="0">	   * 2) application/json</sourceline>
        <sourceline coveredcount="0">	   * 3) application/xhtml+xml</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * The first mime type to match according to the clients preferred list is used.</sourceline>
        <sourceline coveredcount="0">	   * Finally, the REST service action method is introspected in search of a #@ProduceMime</sourceline>
        <sourceline coveredcount="0">	   * annotation. If #@ProduceMime::type is accepted by the client this mime type is returned,</sourceline>
        <sourceline coveredcount="0">	   * otherwise a 406 "Not Acceptable" is returned to the client.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $class The service to negotiate with</sourceline>
        <sourceline coveredcount="0">	   * @param string $method The service method to negotiate with</sourceline>
        <sourceline coveredcount="0">	   * @return string The negotiated mime type</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function negotiate($class, $method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $supportedMimes = array('application/xml', 'application/json', 'application/x-yaml', 'application/xhtml+xml', '*/*');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  // Get the mime types the client desires from the HTTP_ACCEPT header.</sourceline>
        <sourceline coveredcount="0">	  		  // NOTE: This is very primitive/"light-weight" and does not provide full support for RFC 2616 Accept headers,</sourceline>
        <sourceline coveredcount="0">	  		  //       however, does support basic content negotiation none the less.</sourceline>
        <sourceline coveredcount="0">	  		  $clientMimes = array();</sourceline>
        <sourceline coveredcount="0">			  foreach(explode(',', $_SERVER['HTTP_ACCEPT']) as $mimeType) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  $item = explode(';', $mimeType);</sourceline>
        <sourceline coveredcount="0">					  $clientMimes[$item[0]] = floatval(array_key_exists(1, $item) ? substr($item[1], 2) : 1);</sourceline>
        <sourceline coveredcount="0">			  }</sourceline>
        <sourceline coveredcount="0">			  arsort($clientMimes);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  // Find the first preferred client mime type which the REST service supports.</sourceline>
        <sourceline coveredcount="0">			  foreach($clientMimes as $mimeType =&gt; $index) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					  if(in_array($mimeType, $supportedMimes)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					     $mime = ($mimeType == '*/*') ? 'application/xml' : $mimeType;</sourceline>
        <sourceline coveredcount="0">					 	 break;</sourceline>
        <sourceline coveredcount="0">					  }</sourceline>
        <sourceline coveredcount="0">			  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  // If the client does not accept one of the supported mime types, throw a 406.</sourceline>
        <sourceline coveredcount="0">			  if(!isset($mime)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  	 Log::error('RestUtil::negotiate Client does not accept any of the supported mime types.');</sourceline>
        <sourceline coveredcount="0">			  	 throw new RestServiceException(406);</sourceline>
        <sourceline coveredcount="0">			  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  // Store the consume and produce mime values if present. Assume application/xml if the client does not specify content type</sourceline>
        <sourceline coveredcount="0">			  $response = array();</sourceline>
        <sourceline coveredcount="0">			  $response['ConsumeMime'] = (@$_SERVER['CONTENT_TYPE']) ? $_SERVER['CONTENT_TYPE'] : 'application/xml';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  // Parse #@ProduceMime and #@ConsumeMime values from the REST service method if present</sourceline>
        <sourceline coveredcount="0">	  		  $annotes = Annotation::getMethodsAsArray($class);</sourceline>
        <sourceline coveredcount="0">	  		  foreach($annotes[$method] as $annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		  if($annotation instanceof ProduceMime) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		     // If the REST service has a #@ProduceMime::type defined which the client does not accept, send a 406 and exit.</sourceline>
        <sourceline coveredcount="0">	  		 		     if(!array_key_exists($annotation-&gt;type, $clientMimes)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		        Log::error('RestUtil::negotiate Client does not accept mime type defined by #@ProduceMime::type');</sourceline>
        <sourceline coveredcount="0">	  		 		   	   	throw new RestServiceException(406);</sourceline>
        <sourceline coveredcount="0">	  		 		   	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		   	 $mime = $annotation-&gt;type;</sourceline>
        <sourceline coveredcount="0">	  		 		   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		   if($annotation instanceof ConsumeMime)</sourceline>
        <sourceline coveredcount="0">	  		 		   	  $response['ConsumeMime'] = $annotation-&gt;type;</sourceline>
        <sourceline coveredcount="0">	  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  $response['ProduceMime'] = $mime;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  return $response;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms data being produced by a REST service into a new mime/data type</sourceline>
        <sourceline coveredcount="0">	   * for presentation to the client.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data produced by the REST service. THIS DATA MUST BE EITHER AN OBJECT OR AN ARRAY!</sourceline>
        <sourceline coveredcount="0">	   * @param string $mime The mime type which describes the new data formatting.</sourceline>
        <sourceline coveredcount="0">	   * 					 (application/xml|application/json|application/x-yaml|application/xhtml+xml)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function serverTransform($data, $mime) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if(!is_object($data) &amp;&amp; !is_array($data)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	Log::debug('RestUtil::serverTransform The specified data must be either an object or array at \'' . $data . '\.');</sourceline>
        <sourceline coveredcount="0">	  		 	throw new RestServiceException(500);</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 switch($mime) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	case 'application/xml':</sourceline>
        <sourceline coveredcount="0">	  		 		 header('content-type: application/xml');</sourceline>
        <sourceline coveredcount="0">	  		 	 	 return XmlRenderer::render($data);</sourceline>
        <sourceline coveredcount="0"> 		 		break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	case 'application/json':</sourceline>
        <sourceline coveredcount="0">	  		 		 header('content-type: application/json');</sourceline>
        <sourceline coveredcount="0">	  		 		 return JsonRenderer::render($data);</sourceline>
        <sourceline coveredcount="0">	  		 	break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	case 'application/x-yaml':</sourceline>
        <sourceline coveredcount="0">	  		 		  header('content-type: application/x-yaml');</sourceline>
        <sourceline coveredcount="0">	  		 		  return YamlRenderer::render($data);</sourceline>
        <sourceline coveredcount="0">	  		 	break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	case 'application/xhtml+xml':</sourceline>
        <sourceline coveredcount="0">	  		 	      if(is_array($data)) {</sourceline>
        <sourceline coveredcount="0">	  		 	         if(!isset($data[0])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	            Log::error('RestUtil::serverTransform Received null data');</sourceline>
        <sourceline coveredcount="0">	  		 	            throw new RestServiceException(500);</sourceline>
        <sourceline coveredcount="0">	  		 	         }</sourceline>
        <sourceline coveredcount="0">	  		 	         $className = get_class($data[0]);</sourceline>
        <sourceline coveredcount="0">	  		 	      }</sourceline>
        <sourceline coveredcount="0">	  		 	      else</sourceline>
        <sourceline coveredcount="0">	  		 	         $className = get_class($data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	      $class = new ReflectionClass($className);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	      $namespace = explode('\\', $class-&gt;getName());</sourceline>
        <sourceline coveredcount="0">                      $className = array_pop($namespace);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		  // Perform XSLT transformation if a model xsl view exists</sourceline>
        <sourceline coveredcount="0">	  		 		  $renderer = new XSLTRenderer();</sourceline>
        <sourceline coveredcount="0">	  		 		  if(file_exists(AgilePHP::getWebRoot() . '/view/' . $className . '.xsl')) {</sourceline>
        <sourceline coveredcount="0">	  		 		  	  return $renderer-&gt;transformXsl($className, XmlRenderer::render($data));</sourceline>
        <sourceline coveredcount="0">	  		 		  }</sourceline>
        <sourceline coveredcount="0">	  		 		  else {</sourceline>
        <sourceline coveredcount="0">	  		 		  	  // Otherwise send the response as XML</sourceline>
        <sourceline coveredcount="0">	  		 		  	  header('content-type: application/xml');</sourceline>
        <sourceline coveredcount="0">	  		 		  	  return XmlRenderer::render($data);</sourceline>
        <sourceline coveredcount="0">	  		 		  }</sourceline>
        <sourceline coveredcount="0">	  		 	break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	default:</sourceline>
        <sourceline coveredcount="0">	  		 		Log::debug('RestUtil::serverTransform Could not produce unsupported mime type \'' . $mime . '\'.');</sourceline>
        <sourceline coveredcount="0">	  		 		throw new RestServiceException(500);</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms the data consumed from the client request into</sourceline>
        <sourceline coveredcount="0">	   * an object which represents the specified mime type. This data</sourceline>
        <sourceline coveredcount="0">	   * is then presented to the requsted REST service resource.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * 1) application/xml       = SimpleXMLElement</sourceline>
        <sourceline coveredcount="0">	   * 2) application/json      = JSON unserialized string</sourceline>
        <sourceline coveredcount="0">	   * 3) application/x-yaml    = YAML unserialized string</sourceline>
        <sourceline coveredcount="0">	   * 4) application/xhtml+xml = Data is returned untouched</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $data The data being consume from a cilent HTTP request (PUT|POST|DELETE)</sourceline>
        <sourceline coveredcount="0">	   * @param string $mime The mime type which describes the data.</sourceline>
        <sourceline coveredcount="0">	   * 					 (application/xml|application/json|application/x-yaml|application/xhtml+xml)</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function consumeTransform($data, $mime) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         try {</sourceline>
        <sourceline coveredcount="0">        			 switch($mime) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        			 	case 'application/xml':</sourceline>
        <sourceline coveredcount="0">        			 		return XmlToModel::transform($data);</sourceline>
        <sourceline coveredcount="0">        			 	break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        			 	case 'application/json':</sourceline>
        <sourceline coveredcount="0">        			 		return JsonToModel::transform($data);</sourceline>
        <sourceline coveredcount="0">        			 	break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        			 	case 'application/x-yaml':</sourceline>
        <sourceline coveredcount="0">        			 		 return YamlToModel::transform($data);</sourceline>
        <sourceline coveredcount="0">        			 	break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        			 	case 'application/xhtml+xml':</sourceline>
        <sourceline coveredcount="0">        			 		 return $data;</sourceline>
        <sourceline coveredcount="0">        		 		break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        			 	default:</sourceline>
        <sourceline coveredcount="0">        			 		Log::debug('RestUtil::consumeTransform Could not transform consumed data type \'' . $mime . '\'. Using raw data as last resort.');</sourceline>
        <sourceline coveredcount="0">        			 		return $data;</sourceline>
        <sourceline coveredcount="0">        			 }</sourceline>
        <sourceline coveredcount="0">	         }</sourceline>
        <sourceline coveredcount="0">	         catch(FrameworkException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	               throw new RestServiceException(400, $e-&gt;getMessage());</sourceline>
        <sourceline coveredcount="0">	         }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ProduceMime" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="ProduceMime.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/rest/ProduceMime.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Forces the REST method processor (#@GET|#@POST|#@PUT|#@DELETE) to transform</sourceline>
        <sourceline coveredcount="0"> * data returned by the service to the specified mime type before passing the response</sourceline>
        <sourceline coveredcount="0"> * back to the client. This annotation also overrides the client HTTP Accept header. If</sourceline>
        <sourceline coveredcount="0"> * the client does not list the specified #@ProduceMime::type then a "406 Not Acceptable"</sourceline>
        <sourceline coveredcount="0"> * is returned to the client. The returned service resource data is transformed and sent</sourceline>
        <sourceline coveredcount="0"> * to the client based on the specified #@ProduceMime::type as follows:</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 1) application/xml       = Well formed XML		(expects SimpleXMLElement returned)</sourceline>
        <sourceline coveredcount="0"> * 2) application/json      = Well formed JSON		(any return type supported)</sourceline>
        <sourceline coveredcount="0"> * 3) application/x-yaml    = Well formed YAML		(any return type supported)</sourceline>
        <sourceline coveredcount="0"> * 4) application/xhtml+xml = raw data passed from the service resource</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@ProduceMime(type = 'application/xml')</sourceline>
        <sourceline coveredcount="0"> * public function updateObject($id, $data) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // code here to process the request</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  return $response; // $response is a SimpleXMLElement that will be transformed to well formed XML</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class ProduceMime {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * A supported AgilePHP REST mime type. The following mime types are supported:</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * 1) application/xml</sourceline>
        <sourceline coveredcount="0">	   * 2) application/json</sourceline>
        <sourceline coveredcount="0">	   * 3) application/x-yaml</sourceline>
        <sourceline coveredcount="0">	   * 4) application/xhtml+xml</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var string $type A supported mime type used to produce and transform service return data</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $type;</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ConsumeMime" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="ConsumeMime.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/rest/ConsumeMime.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Tells the REST request processing interceptor (#@GET|#@POST|#@PUT|#@DELETE) to</sourceline>
        <sourceline coveredcount="0"> * transform received HTTP data into a PHP data type before passing into the REST service</sourceline>
        <sourceline coveredcount="0"> * method. Conversions occur based on the specified #@ConsumeMime::type as follows:</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 1) application/xml       = SimpleXMLElement</sourceline>
        <sourceline coveredcount="0"> * 2) application/json      = json_decoded data</sourceline>
        <sourceline coveredcount="0"> * 3) application/x-yaml    = yaml_parsed data</sourceline>
        <sourceline coveredcount="0"> * 4) application/xhtml+xml = raw data passed from the client</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@ConsumeMime(type = 'application/xml')</sourceline>
        <sourceline coveredcount="0"> * public function updateObject($id, $data) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 	     // $data is a SimpleXMLElement</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class ConsumeMime {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * A supported AgilePHP REST mime type. The following mime types are supported:</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * 1) application/xml</sourceline>
        <sourceline coveredcount="0">	   * 2) application/json</sourceline>
        <sourceline coveredcount="0">	   * 3) application/x-yaml</sourceline>
        <sourceline coveredcount="0">	   * 4) application/xhtml+xml</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var string $type A supported mime type used to consume and transform client data</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $type;</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="RestServiceException" methodcount="1" methodscovered="0" statementcount="10" statementscovered="1" totalcount="11" totalcovered="1">
      <sourcefile name="RestServiceException.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/rest/RestServiceException.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Send a valid RFC 2616 response header to the client and</sourceline>
        <sourceline coveredcount="0"> * terminate the application.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> * @throws RestServiceException</sourceline>
        <sourceline coveredcount="0"> * @throws FrameworkException if the specified error code is not</sourceline>
        <sourceline coveredcount="0"> * 		   a valid RFC 2616 status code.</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class RestServiceException extends FrameworkException {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  protected $codes = array(</sourceline>
        <sourceline coveredcount="0">             100 =&gt; 'Continue',</sourceline>
        <sourceline coveredcount="0">             101 =&gt; 'Switching Protocols',</sourceline>
        <sourceline coveredcount="0">             200 =&gt; 'OK',</sourceline>
        <sourceline coveredcount="0">             201 =&gt; 'Created',</sourceline>
        <sourceline coveredcount="0">             202 =&gt; 'Accepted',</sourceline>
        <sourceline coveredcount="0">             203 =&gt; 'Non-Authoritative Information',</sourceline>
        <sourceline coveredcount="0">             204 =&gt; 'No Content',</sourceline>
        <sourceline coveredcount="0">             205 =&gt; 'Reset Content',</sourceline>
        <sourceline coveredcount="0">             206 =&gt; 'Partial Content',</sourceline>
        <sourceline coveredcount="0">             300 =&gt; 'Multiple Choices',</sourceline>
        <sourceline coveredcount="0">             301 =&gt; 'Moved Permanently',</sourceline>
        <sourceline coveredcount="0">             302 =&gt; 'Found',</sourceline>
        <sourceline coveredcount="0">             303 =&gt; 'See Other',</sourceline>
        <sourceline coveredcount="0">             304 =&gt; 'Not Modified',</sourceline>
        <sourceline coveredcount="0">             305 =&gt; 'Use Proxy',</sourceline>
        <sourceline coveredcount="0">             306 =&gt; '(Unused)',</sourceline>
        <sourceline coveredcount="0">             307 =&gt; 'Temporary Redirect',</sourceline>
        <sourceline coveredcount="0">             400 =&gt; 'Bad Request',</sourceline>
        <sourceline coveredcount="0">             401 =&gt; 'Unauthorized',</sourceline>
        <sourceline coveredcount="0">             402 =&gt; 'Payment Required',</sourceline>
        <sourceline coveredcount="0">             403 =&gt; 'Forbidden',</sourceline>
        <sourceline coveredcount="0">             404 =&gt; 'Not Found',</sourceline>
        <sourceline coveredcount="0">             405 =&gt; 'Method Not Allowed',</sourceline>
        <sourceline coveredcount="0">             406 =&gt; 'Not Acceptable',</sourceline>
        <sourceline coveredcount="0">             407 =&gt; 'Proxy Authentication Required',</sourceline>
        <sourceline coveredcount="0">             408 =&gt; 'Request Timeout',</sourceline>
        <sourceline coveredcount="0">             409 =&gt; 'Conflict',</sourceline>
        <sourceline coveredcount="0">             410 =&gt; 'Gone',</sourceline>
        <sourceline coveredcount="0">             411 =&gt; 'Length Required',</sourceline>
        <sourceline coveredcount="0">             412 =&gt; 'Precondition Failed',</sourceline>
        <sourceline coveredcount="0">             413 =&gt; 'Request Entity Too Large',</sourceline>
        <sourceline coveredcount="0">             414 =&gt; 'Request-URI Too Long',</sourceline>
        <sourceline coveredcount="0">             415 =&gt; 'Unsupported Media Type',</sourceline>
        <sourceline coveredcount="0">             416 =&gt; 'Requested Range Not Satisfiable',</sourceline>
        <sourceline coveredcount="0">             417 =&gt; 'Expectation Failed',</sourceline>
        <sourceline coveredcount="0">             500 =&gt; 'Internal Server Error',</sourceline>
        <sourceline coveredcount="0">             501 =&gt; 'Not Implemented',</sourceline>
        <sourceline coveredcount="0">             502 =&gt; 'Bad Gateway',</sourceline>
        <sourceline coveredcount="0">             503 =&gt; 'Service Unavailable',</sourceline>
        <sourceline coveredcount="0">             504 =&gt; 'Gateway Timeout',</sourceline>
        <sourceline coveredcount="0">             505 =&gt; 'HTTP Version Not Supported'</sourceline>
        <sourceline coveredcount="0">     );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Accepts a valid RFC 2616 HTTP status code and sends the appropriate</sourceline>
        <sourceline coveredcount="0">	   * RFC 2616 response header to the client.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Integer $code The HTTP status code to send.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct($code = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if(!array_key_exists($code, $this-&gt;codes))</sourceline>
        <sourceline coveredcount="-1">	  		 	 throw new FrameworkException('Invalid HTTP Response code \'' . $code . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;code = $code;</sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;message = $code . ' ' . $this-&gt;codes[$code];</sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;trace = debug_backtrace();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 header('HTTP/1.1 ' . $code . ' ' . $this-&gt;codes[$code]);</sourceline>
        <sourceline coveredcount="-1">	  		 Log::error('RestServiceException ' . $this-&gt;message);</sourceline>
        <sourceline coveredcount="-1">	  		 echo $this-&gt;message;</sourceline>
        <sourceline coveredcount="-1">	  		 exit;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="PUT" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="PUT.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/rest/PUT.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for processing PUT (update) requests for a REST resource.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyClassRemote {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@PUT</sourceline>
        <sourceline coveredcount="0"> * public function updateObject() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // This is invoked only when the resource is requested using HTTP PUT request method.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="0" startclass="1">class PUT {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Liason between REST client and service to handle data transformations and providing</sourceline>
        <sourceline coveredcount="0">	   * appropriate "202 Accepted" HTTP status code header. Missing content-type header result</sourceline>
        <sourceline coveredcount="0">	   * in a 406 Not Acceptable.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The intercepted call state</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function process(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $callee = $ic-&gt;getCallee();</sourceline>
        <sourceline coveredcount="0">			 $class = $callee['class'];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 // Get the negotiated mime type thats used to format the response data</sourceline>
        <sourceline coveredcount="0">			 $negotiation = RestUtil::negotiate($class, $ic-&gt;getMethod());</sourceline>
        <sourceline coveredcount="0">			 $ProduceMime = $negotiation['ProduceMime'];</sourceline>
        <sourceline coveredcount="0">			 $ConsumeMime = $negotiation['ConsumeMime'];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Read the PUT data</sourceline>
        <sourceline coveredcount="0">	  		 $data = trim(file_get_contents('php://input'));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Transform data if the REST service resource has a #@ConsumeMime annotation</sourceline>
        <sourceline coveredcount="0">	  		 if($ConsumeMime) $data = RestUtil::consumeTransform($data, $ConsumeMime);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Add the data to the parameters passed into the intercepted REST resource action method</sourceline>
        <sourceline coveredcount="0">	  		 $params = $ic-&gt;getParameters();</sourceline>
        <sourceline coveredcount="0">	  		 array_push($params, $data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Execute the REST service resource and store the return value</sourceline>
        <sourceline coveredcount="0">	  		 $return = call_user_func_array(array($ic-&gt;getTarget(), $ic-&gt;getMethod()), $params);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Format the return value according to the negotiated mime type and exit the application.</sourceline>
        <sourceline coveredcount="0">	  		 $out = RestUtil::serverTransform($return, $ProduceMime);</sourceline>
        <sourceline coveredcount="0">	  		 header('HTTP/1.1 202 Accepted');</sourceline>
        <sourceline coveredcount="0">	  		 die($out);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="DELETE" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="DELETE.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/rest/DELETE.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for processing DELETE requests for a REST resource.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyRestAPI {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@DELETE</sourceline>
        <sourceline coveredcount="0"> * public function deleteObject() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // This is invoked only when the resource is requested using HTTP DELETE request method.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="0" startclass="1">class DELETE {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Liason between REST client and service to handle data transformations and providing</sourceline>
        <sourceline coveredcount="0">	   * appropriate "204 No Content" HTTP status code header.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The intercepted call state</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function process(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Execute the REST service resource and return 204</sourceline>
        <sourceline coveredcount="0">	  		 call_user_func_array(array($ic-&gt;getTarget(), $ic-&gt;getMethod()), $ic-&gt;getParameters());</sourceline>
        <sourceline coveredcount="0">	  		 header('HTTP/1.1 204 No Content');</sourceline>
        <sourceline coveredcount="0">	  		 exit;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="GET" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="GET.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/rest/GET.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for processing REST GET requests</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyRestAPI {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@GET</sourceline>
        <sourceline coveredcount="0"> * public function getObject() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // This is invoked only when the resource is requested using HTTP GET request method.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="0" startclass="1">class GET {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Liason between REST client and service to handle data transformations and providing</sourceline>
        <sourceline coveredcount="0">	   * appropriate "200 OK" HTTP status code header.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The intercepted call state</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function invoke(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     $callee = $ic-&gt;getCallee();</sourceline>
        <sourceline coveredcount="0">	  		 $class = $callee['class'];</sourceline>
        <sourceline coveredcount="0">	  		 $target = $ic-&gt;getTarget();</sourceline>
        <sourceline coveredcount="0">	  		 $method = $ic-&gt;getMethod();</sourceline>
        <sourceline coveredcount="0">	  		 $parameters = $ic-&gt;getParameters();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $return = ($parameters) ? call_user_func_array(array($target, $method), $parameters):</sourceline>
        <sourceline coveredcount="0">	  		  				call_user_func(array($target, $method));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $negotiation = RestUtil::negotiate($class, $ic-&gt;getMethod());</sourceline>
        <sourceline coveredcount="0">			 $ProduceMime = $negotiation['ProduceMime'];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 // Format the return value according to the negotiated mime type and exit the application.</sourceline>
        <sourceline coveredcount="0">	  		 $out = RestUtil::serverTransform($return, $ProduceMime);</sourceline>
        <sourceline coveredcount="0">	  		 header('HTTP/1.1 200 OK');</sourceline>
        <sourceline coveredcount="0">	  		 die($out);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="RestClient" methodcount="9" methodscovered="9" statementcount="36" statementscovered="36" totalcount="45" totalcovered="45">
      <sourcefile name="RestClient.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/rest/RestClient.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for requesting resources from a remote REST service.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class RestClient {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $curl;</sourceline>
        <sourceline coveredcount="0">	  private $resource;</sourceline>
        <sourceline coveredcount="0">	  private $headers = array();</sourceline>
        <sourceline coveredcount="0">	  private $responseCode;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Constructs a new RestClient instance.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $endpoint A URL pointing to a REST service resource.</sourceline>
        <sourceline coveredcount="0">	   * @param string $useragent Optional User-Agent header value to include in the request</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct($endpoint, $useragent = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 $this-&gt;curl = curl_init($endpoint);</sourceline>
        <sourceline coveredcount="10">	  		 curl_setopt($this-&gt;curl, CURLOPT_USERAGENT, (($useragent) ? $useragent : 'AgilePHP RestClient'));</sourceline>
        <sourceline coveredcount="10">			 curl_setopt($this-&gt;curl, CURLOPT_RETURNTRANSFER, true);</sourceline>
        <sourceline coveredcount="10">			 curl_setopt($this-&gt;curl, CURLOPT_SSL_VERIFYHOST, false);</sourceline>
        <sourceline coveredcount="10">			 curl_setopt($this-&gt;curl, CURLOPT_SSL_VERIFYPEER, false);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets optional HTTP headers to include in the REST service request.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param array $headers An array of HTTP headers to include in the rest.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setHeaders(array $headers) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">	  		 $this-&gt;headers = $headers;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the HTTP resonse status code returned by the REST service.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return int The HTTP response status code returned by the REST service</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getResponseCode() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="8">	  		 return $this-&gt;responseCode;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets optional HTTP basic authentication credentials if required by the REST service.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $username The username to supply to the REST service.</sourceline>
        <sourceline coveredcount="0">	   * @param string $password The password used to authenticate the specified user.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function authenticate($username, $password) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="9">	  		 curl_setopt($this-&gt;curl, CURLOPT_USERPWD, "$username:$password");</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Performs an HTTP GET to a REST service resource.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return mixed The response from the REST service call.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function get() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 curl_setopt($this-&gt;curl, CURLOPT_HTTPHEADER, $this-&gt;headers);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 $response = curl_exec($this-&gt;curl);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 $this-&gt;responseCode = curl_getinfo($this-&gt;curl, CURLINFO_HTTP_CODE);</sourceline>
        <sourceline coveredcount="2">	  		 if($this-&gt;responseCode &gt; 206) throw new RestClientException($this-&gt;responseCode);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $response;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Performs an HTTP POST to a REST service resource.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $data The data to supply as the request body</sourceline>
        <sourceline coveredcount="0">	   * @return mixed The response from the REST service call.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function post($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 curl_setopt($this-&gt;curl, CURLOPT_HTTPHEADER, $this-&gt;headers);</sourceline>
        <sourceline coveredcount="1">	  		 curl_setopt($this-&gt;curl, CURLOPT_POST, true);</sourceline>
        <sourceline coveredcount="1">	  		 curl_setopt($this-&gt;curl, CURLOPT_POSTFIELDS, $data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $response = curl_exec($this-&gt;curl);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;responseCode = curl_getinfo($this-&gt;curl, CURLINFO_HTTP_CODE);</sourceline>
        <sourceline coveredcount="1">	  		 if($this-&gt;responseCode &gt; 206) throw new RestClientException($this-&gt;responseCode);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $response;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Performs an HTTP PUT to a REST service resource.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $data The data to supply as the request body.</sourceline>
        <sourceline coveredcount="0">	   * @return mixed The response from the REST service call.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function put($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">	  		 curl_setopt($this-&gt;curl, CURLOPT_CUSTOMREQUEST, 'PUT');</sourceline>
        <sourceline coveredcount="6">	  		 curl_setopt($this-&gt;curl, CURLOPT_HTTPHEADER, $this-&gt;headers);</sourceline>
        <sourceline coveredcount="6">			 curl_setopt($this-&gt;curl, CURLOPT_POSTFIELDS, $data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">			 $response = curl_exec($this-&gt;curl);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">	  		 $this-&gt;responseCode = curl_getinfo($this-&gt;curl, CURLINFO_HTTP_CODE);</sourceline>
        <sourceline coveredcount="6">	  		 if($this-&gt;responseCode &gt; 206) throw new RestClientException($this-&gt;responseCode);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 return $response;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Performs an HTTP DELETE to a REST service resource.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return mixed The response from the REST service call.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function delete() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 //curl_setopt($this-&gt;curl, CURLOPT_HTTPHEADER, $this-&gt;headers);</sourceline>
        <sourceline coveredcount="1">	  		 curl_setopt($this-&gt;curl, CURLOPT_CUSTOMREQUEST, 'DELETE');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $response = curl_exec($this-&gt;curl);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;responseCode = curl_getinfo($this-&gt;curl, CURLINFO_HTTP_CODE);</sourceline>
        <sourceline coveredcount="1">	  		 if($this-&gt;responseCode &gt; 206) throw new RestClientException($this-&gt;responseCode);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $response;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Cleanup</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __destruct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 curl_close($this-&gt;curl);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="RestService" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="RestService.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/rest/RestService.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Interceptor responsible for capturing REST resource requests from the MVC</sourceline>
        <sourceline coveredcount="0"> * component and routing them to the proper service method and resource based</sourceline>
        <sourceline coveredcount="0"> * on URI composition.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * NOTE: It seems that ironically enough, REST does not really fit the MVC paradigm,</sourceline>
        <sourceline coveredcount="0"> * since MVC requests use /service-or-controller/action-also-known-as-a-verb whereas</sourceline>
        <sourceline coveredcount="0"> * REST requests use /service-or-controller/nouns-only.</sourceline>
        <sourceline coveredcount="0"> * The #@RestService acts as a router or front controller to ensure requests to REST</sourceline>
        <sourceline coveredcount="0"> * resources stay "restful".</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@RestService</sourceline>
        <sourceline coveredcount="0"> * class MyRestAPI {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // #@RestService interceptor will route the HTTP request to the proper resource</sourceline>
        <sourceline coveredcount="0"> * 	     // defined in the service based on #@Path::resource declarations.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="0" startclass="1">class RestService {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Intercepts a REST web service before the MVC executes an</sourceline>
        <sourceline coveredcount="0">	   * action method. This allows introspection of the REST web service</sourceline>
        <sourceline coveredcount="0">	   * as its instantiated so this class can perform routing of the</sourceline>
        <sourceline coveredcount="0">	   * REST request to the proper action method.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The call state of the interception</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws RestException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function intercept(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Parse the REST service class name, resource, and parameters from the HTTP URL</sourceline>
        <sourceline coveredcount="0">	  		 $service = preg_replace('/_Intercepted/', '', get_class($ic-&gt;getTarget()));</sourceline>
        <sourceline coveredcount="0">	  		 $action = MVC::getAction();</sourceline>
        <sourceline coveredcount="0">	  		 $parameters = MVC::getParameters();</sourceline>
        <sourceline coveredcount="0">	  		 array_unshift($parameters, $action);</sourceline>
        <sourceline coveredcount="0">	  		 $request = '/' . implode('/', $parameters);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 Log::debug('#@RestService::intercept Routing REST service \'' . $service . '\' resource request \'' . $request . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $annotes = Annotation::getMethodsAsArray($service);</sourceline>
        <sourceline coveredcount="0">			 foreach($annotes as $method =&gt; $annotations) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 		  // Process default action method first. It will never have any variables to extract</sourceline>
        <sourceline coveredcount="0">			 		  if($request == '/index') return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 		  foreach($annotations as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				   if($annote instanceof Path) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				   	   // All #@Path annotations should have a resource at this point since the default /index</sourceline>
        <sourceline coveredcount="0">			 				   	   // request has already been processed. Ignore this method.</sourceline>
        <sourceline coveredcount="0">			 				 	   if(!$annote-&gt;resource) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	   // No variables to extract simply invoke the requested resource</sourceline>
        <sourceline coveredcount="0">			 				 	   if($annote-&gt;resource == $request) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	      $ic-&gt;setMethod($method);</sourceline>
        <sourceline coveredcount="0">			 				 	      return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0">			 				 	   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	   // Create regex based on the #@Path resource definition</sourceline>
        <sourceline coveredcount="0">			 				 	   $escapedAnnote = preg_replace('/\//', '\/', $annote-&gt;resource);</sourceline>
        <sourceline coveredcount="0">			 				 	   $regex = '^' . preg_replace('/{.+?}/', '(.+)', $escapedAnnote) . '$';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	   // Extract variable names and values</sourceline>
        <sourceline coveredcount="0">			 				 	   preg_match('/' . $regex . '/', $annote-&gt;resource, $variables); // Extract variable names from the #@Path::resource definition</sourceline>
        <sourceline coveredcount="0">			 				 	   preg_match('/' . $regex . '/', $request, $values);	// Extract values from the request URI</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	   if(!isset($values[1])) continue; // No match</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	   // First elements are the text that was matched - remove</sourceline>
        <sourceline coveredcount="0">			 				 	   array_shift($variables);</sourceline>
        <sourceline coveredcount="0">			 				 	   array_shift($values);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	   // Use the extracted variable names and values to construct #@Path and $request matchers. If</sourceline>
        <sourceline coveredcount="0">			 				 	   // the $method #@Path resource matches the $request and the extracted values match up with</sourceline>
        <sourceline coveredcount="0">			 				 	   // EL {variable} braces, then route the call to this method.</sourceline>
        <sourceline coveredcount="0">			 				 	   $req = preg_replace('/\//', '\\\\\0', $request);</sourceline>
        <sourceline coveredcount="0">			 				 	   $resMatcher = "/^$req";</sourceline>
        <sourceline coveredcount="0">			 				 	   $pathMatcher = "/^$req";</sourceline>
        <sourceline coveredcount="0">			 				 	   for($i=0; $i&lt;count($values); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	   		$var = preg_replace('/\{|\}/', '\\\\\0', $variables[$i]); // escpape { and } chars</sourceline>
        <sourceline coveredcount="0">			 				 	 	    $pathMatcher = str_replace($values[$i], $var, $pathMatcher);</sourceline>
        <sourceline coveredcount="0">			 				 	 	    $resMatcher = str_replace($var, $values[$i], $resMatcher);</sourceline>
        <sourceline coveredcount="0">			 				 	   }</sourceline>
        <sourceline coveredcount="0">			 				 	   $pathMatcher .= '$/';</sourceline>
        <sourceline coveredcount="0">			 				 	   $resMatcher .= '$/';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	   // Execute the REST service method if its #@Path resource matches the current request</sourceline>
        <sourceline coveredcount="0">			 				 	   if(preg_match($pathMatcher, $annote-&gt;resource) &amp;&amp; preg_match($resMatcher, $request)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	   	   $verb = strtoupper($_SERVER['REQUEST_METHOD']);</sourceline>
        <sourceline coveredcount="0">			 				 	   	   $hasVerb = false;</sourceline>
        <sourceline coveredcount="0">			 				 	   	   foreach($annotations as $a)</sourceline>
        <sourceline coveredcount="0">			 				 	   	   		if($a instanceof $verb) $hasVerb = true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	   	   if(!$hasVerb) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 				 	   	   $ic-&gt;setMethod($method);</sourceline>
        <sourceline coveredcount="0">				 				 	   $ic-&gt;setParameters($values);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				 				 	   return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0">			 				   	   }</sourceline>
        <sourceline coveredcount="0">			 				 }</sourceline>
        <sourceline coveredcount="0">			 		}</sourceline>
        <sourceline coveredcount="0">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 Log::debug('#@RestService::intercept Failed to route \'' . $request . '\' to a \'' . $service . '\' service method.');</sourceline>
        <sourceline coveredcount="0">			 throw new RestServiceException(404);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="RestClientException" methodcount="1" methodscovered="1" statementcount="5" statementscovered="5" totalcount="6" totalcovered="6">
      <sourcefile name="RestClientException.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/rest/RestClientException.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Accepts a valid RFC 2616 response code and throws a PHP Exception containing</sourceline>
        <sourceline coveredcount="0"> * its RFC 2616 status code and message.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.rest</sourceline>
        <sourceline coveredcount="0"> * @throws RestClientException</sourceline>
        <sourceline coveredcount="0"> * @throws FrameworkException if the specified error code is not</sourceline>
        <sourceline coveredcount="0"> * 		   a valid RFC 2616 status code.</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class RestClientException extends RestServiceException {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Accepts a valid RFC 2616 HTTP status code and thows an Exception</sourceline>
        <sourceline coveredcount="0">	   * which contains the corresponding code and status message.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Integer $code The HTTP status code to send.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct($code) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 if(!array_key_exists($code, $this-&gt;codes))</sourceline>
        <sourceline coveredcount="2">	  		 	 throw new FrameworkException('Invalid HTTP Response code \'' . $code . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">			 $this-&gt;code = $code;</sourceline>
        <sourceline coveredcount="2">			 $this-&gt;message = $code . ' ' . $this-&gt;codes[$code];</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.webservice.remoting" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
    <class name="RemotingException" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="RemotingException.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/remoting/RemotingException.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.remoting</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Handles all remoting exceptions. Output is returned in JSON format</sourceline>
        <sourceline coveredcount="0"> * with an application/json HTTP header.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.remoting</sourceline>
        <sourceline coveredcount="0"> * @throws RemotingException</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class RemotingException extends FrameworkException {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /*</sourceline>
        <sourceline coveredcount="0">	   * Public context fields reduce the chance that AJAXRenderer will</sourceline>
        <sourceline coveredcount="0">	   * use reflection method setAccessible which requires PHP 5.3+</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $code;</sourceline>
        <sourceline coveredcount="0">	  public $message;</sourceline>
        <sourceline coveredcount="0">	  public $file;</sourceline>
        <sourceline coveredcount="0">	  public $trace;</sourceline>
        <sourceline coveredcount="0">	  public $line;</sourceline>
        <sourceline coveredcount="0">	  public $_class = 'RemotingException';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Deliver remoting exceptions in JSON format and halt execution.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The exception message</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct( $message ) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $this-&gt;message = $message;</sourceline>
        <sourceline coveredcount="0">			 $this-&gt;trace = parent::getTraceAsString();</sourceline>
        <sourceline coveredcount="0">	  		 $renderer = MVC::createRenderer('AJAXRenderer');</sourceline>
        <sourceline coveredcount="0">	  		 $renderer-&gt;render($this);</sourceline>
        <sourceline coveredcount="0">	  		 exit;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="RemoteMethod" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="RemoteMethod.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/webservice/remoting/RemoteMethod.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.remoting</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Annotation which authorizes a method for use with the</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Remoting component.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.webservice.remoting</sourceline>
        <sourceline coveredcount="0">  * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyClassRemote {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@RemoteMethod</sourceline>
        <sourceline coveredcount="0"> * public function remoteMethod() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // This code is being called from javascript with ease.</sourceline>
        <sourceline coveredcount="0"> * 		 // It may also be used as any standard PHP class within PHP.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class RemoteMethod { }</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.identity" methodcount="54" methodscovered="33" statementcount="255" statementscovered="157" totalcount="309" totalcovered="190">
    <class name="Password" methodcount="1" methodscovered="0" statementcount="24" statementscovered="18" totalcount="25" totalcovered="18">
      <sourcefile name="Password.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/Password.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP interceptor responsible for encrypting passwords using the</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Crypto component.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Password</sourceline>
        <sourceline coveredcount="0"> * public function setPassword( $myPassword) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  $this-&gt;password = $myPassword;</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Password( parameter = 1) // Hashes the second method parameter</sourceline>
        <sourceline coveredcount="0"> * public function updateUser( $username, $password) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Update the user account</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="1" startclass="1">class Password {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * @var Integer Optional parameter index value. Use to apply interception</sourceline>
        <sourceline coveredcount="0">	   * 	  logic to a specific parameter in a method that takes multiple arguments.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $parameter;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Hashes the intercepted parameter using the algorithm configured for the Crypto component.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The intercepted invocation context</sourceline>
        <sourceline coveredcount="0">	   * @return mixed The InvocationContext if the call has been altered, void otherwise</sourceline>
        <sourceline coveredcount="0">	   * @throws InterceptionException if a specified parameter index is out of bounds</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function hash(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 if(!$ic-&gt;getParameters())</sourceline>
        <sourceline coveredcount="14">	  		 	throw new InterceptionException('#@Password::encrypt Requires a method which accepts at least one parameter.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	 // Dont encrypt passwords coming from ORM 'find' operation.</sourceline>
        <sourceline coveredcount="14">	  		 $callee = $ic-&gt;getCallee();</sourceline>
        <sourceline coveredcount="14">	  		 $pieces = explode(DIRECTORY_SEPARATOR, $callee['file']);</sourceline>
        <sourceline coveredcount="14">	  		 $className = str_replace('.php', '', array_pop($pieces));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 if(preg_match('/^(orm.*)|(.*dialect)$/i', $className))</sourceline>
        <sourceline coveredcount="14">	  		    return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Hash the parameter</sourceline>
        <sourceline coveredcount="14">	  		 $crypto = new Crypto();</sourceline>
        <sourceline coveredcount="14">	  		 $params = $ic-&gt;getParameters();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 $logMessage = '#@Password::hash ' . $callee['class'] . '::' . $ic-&gt;getMethod() . ' password hased using ' . $crypto-&gt;getAlgorithm();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 if($this-&gt;parameter) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	if(!array_key_exists($this-&gt;parameter, $params))</sourceline>
        <sourceline coveredcount="-1">	  		 	   throw new InterceptionException('#@Password::parameter index out of bounds');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	$params[$this-&gt;parameter] = $crypto-&gt;getDigest($params[$this-&gt;parameter]);</sourceline>
        <sourceline coveredcount="-1">	  		 	$ic-&gt;setParameters($params);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	Log::debug($logMessage);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">			 $ic-&gt;setParameters(array($crypto-&gt;getDigest($params[0])));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">			 Log::debug($logMessage);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">			 return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="IdentityManagerFactory" methodcount="1" methodscovered="0" statementcount="42" statementscovered="19" totalcount="43" totalcovered="19">
      <sourcefile name="IdentityManagerFactory.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/IdentityManagerFactory.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Factory responsible for creating IdentityManager implementations</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">abstract class IdentityManagerFactory {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private static $manager;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Singleton IdentityManager constructor. Returns the IdentityManager instance</sourceline>
        <sourceline coveredcount="0">	   * responsible for the IdentityModel per agilephp.xml.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return IdentityManager An IdentityManager implementation</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getManager() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">	  		 if(self::$manager == null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		     $agilephp_xml = AgilePHP::getWebRoot() . DIRECTORY_SEPARATOR . 'agilephp.xml';</sourceline>
        <sourceline coveredcount="1">		  		 $xml = simplexml_load_file($agilephp_xml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 // No Identity configuration present - provide working default configuration</sourceline>
        <sourceline coveredcount="1">		  		 if(!$xml-&gt;identity) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		  		 	 self::$manager = new IdentityManagerImpl();</sourceline>
        <sourceline coveredcount="1">		  		 	 self::$manager-&gt;setModel(new User());</sourceline>
        <sourceline coveredcount="1">		  	      	 self::$manager-&gt;setModelName('User');</sourceline>
        <sourceline coveredcount="1">					 self::$manager-&gt;setAuthenticator('DefaultAuthenticator');</sourceline>
        <sourceline coveredcount="1">		  	      	 self::$manager-&gt;setForgotPasswdMailer('BasicForgotPasswdMailer');</sourceline>
        <sourceline coveredcount="1">		  	      	 self::$manager-&gt;setResetPasswdMailer('BasicResetPasswdMailer');</sourceline>
        <sourceline coveredcount="1">		  	      	 self::$manager-&gt;setRegistrationMailer('BasicRegistrationMailer');</sourceline>
        <sourceline coveredcount="1">		  		 }</sourceline>
        <sourceline coveredcount="0">		  		 else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		 // Configuration provided - Initialize using agilephp.xml configuration</sourceline>
        <sourceline coveredcount="-1">		  		 	 $manager = ((string)$xml-&gt;identity-&gt;attributes()-&gt;manager) ?</sourceline>
        <sourceline coveredcount="-1">		  		 	 		 (string)$xml-&gt;identity-&gt;attributes()-&gt;manager : 'IdentityManagerImpl';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		 	 self::$manager = new $manager;</sourceline>
        <sourceline coveredcount="-1">		  		 	 Log::debug('Identity::__construct Initalizing manager \'' . self::$manager-&gt;getModelName() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		 	 $authenticator = ((string)$xml-&gt;identity-&gt;attributes()-&gt;authenticator) ?</sourceline>
        <sourceline coveredcount="-1">			  		 		(string)$xml-&gt;identity-&gt;attributes()-&gt;authenticator : 'DefaultAuthenticator';</sourceline>
        <sourceline coveredcount="-1">		  		     self::$manager-&gt;setAuthenticator($authenticator);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  	     if($model = (string)$xml-&gt;identity-&gt;attributes()-&gt;model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  	      	 self::$manager-&gt;setModel(new $model());</sourceline>
        <sourceline coveredcount="-1">				  		 self::$manager-&gt;setModelName($model);</sourceline>
        <sourceline coveredcount="-1">			  	     }</sourceline>
        <sourceline coveredcount="0">			  	     else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  	      	  self::$manager-&gt;setModel(new User());</sourceline>
        <sourceline coveredcount="-1">			  	      	  self::$manager-&gt;setModelName('User');</sourceline>
        <sourceline coveredcount="0">			  	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  	     Log::debug('Identity::__construct Initalizing domain model \'' . self::$manager-&gt;getModelName() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  		 $forgotPasswdMailer = ((string)$xml-&gt;identity-&gt;attributes()-&gt;forgotPasswdMailer) ?</sourceline>
        <sourceline coveredcount="-1">			  		 		(string)$xml-&gt;identity-&gt;attributes()-&gt;forgotPasswdMailer : 'BasicForgotPasswdMailer';</sourceline>
        <sourceline coveredcount="-1">		  		     self::$manager-&gt;setForgotPasswdMailer($forgotPasswdMailer);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		     $resetPasswdMailer = ((string)$xml-&gt;identity-&gt;attributes()-&gt;resetPasswdMailer) ?</sourceline>
        <sourceline coveredcount="-1">			  		 		(string)$xml-&gt;identity-&gt;attributes()-&gt;resetPasswdMailer : 'BasicResetPasswdMailer';</sourceline>
        <sourceline coveredcount="-1">		  		     self::$manager-&gt;setResetPasswdMailer($resetPasswdMailer);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  		 $registrationMailer = ((string)$xml-&gt;identity-&gt;attributes()-&gt;registrationMailer) ?</sourceline>
        <sourceline coveredcount="-1">			  		 		(string)$xml-&gt;identity-&gt;attributes()-&gt;registrationMailer : 'BasicRegistrationMailer';</sourceline>
        <sourceline coveredcount="-1">		  		     self::$manager-&gt;setRegistrationMailer($registrationMailer);</sourceline>
        <sourceline coveredcount="0">		  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 // Initialize Identity from previous session if one exits</sourceline>
        <sourceline coveredcount="1">		  		 $session = Scope::getSessionScope();</sourceline>
        <sourceline coveredcount="1">	      		 if($model = $session-&gt;get('IDENTITY_MODEL'))</sourceline>
        <sourceline coveredcount="1">		  		  	self::$manager-&gt;setModel($model);</sourceline>
        <sourceline coveredcount="1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">	  		 return self::$manager;</sourceline>
        <sourceline coveredcount="0">	 }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="IdentityUtils" methodcount="1" methodscovered="0" statementcount="16" statementscovered="13" totalcount="17" totalcovered="13">
      <sourcefile name="IdentityUtils.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/IdentityUtils.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Utility provider for Identity package</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class IdentityUtils {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Generates a variable length character token used to sign requests.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String Variable length token that must be present in the reset password</sourceline>
        <sourceline coveredcount="0">	   * 	     		url in order to successfully complete the process.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function createToken() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			 $numbers = '1234567890';</sourceline>
        <sourceline coveredcount="1">			 $lcase = 'abcdefghijklmnopqrstuvwzyz';</sourceline>
        <sourceline coveredcount="1">			 $ucase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			 $length = rand(1, 20);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			 $token = null;</sourceline>
        <sourceline coveredcount="1">			 for($i=0; $i&lt;$length; $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			  	 if(rand(0, 1)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  	    $cRand = rand(0, 25);</sourceline>
        <sourceline coveredcount="-1">			  	    $token .= (rand(0, 1)) ? $lcase[$cRand] : $ucase[$cRand];</sourceline>
        <sourceline coveredcount="-1">			  	 }</sourceline>
        <sourceline coveredcount="0">			  	 else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			  	    $nRand = rand(0, 9);</sourceline>
        <sourceline coveredcount="1">			  	   	$token .= $numbers[$nRand];</sourceline>
        <sourceline coveredcount="0">			  	 }</sourceline>
        <sourceline coveredcount="1">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $token;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="BasicRegistrationMailer" methodcount="1" methodscovered="1" statementcount="12" statementscovered="12" totalcount="13" totalcovered="13">
      <sourcefile name="BasicRegistrationMailer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/BasicRegistrationMailer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Sends plain text registration confirmation email.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class BasicRegistrationMailer extends Mailer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function __construct($token) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     $url = (@$_SERVER['HTTPS'] != null) ? 'https://' : 'http://';</sourceline>
        <sourceline coveredcount="1">	  	     $url .= (@$_SERVER['HTTP_HOST'] != null) ? $_SERVER['HTTP_HOST'] : 'localhost';</sourceline>
        <sourceline coveredcount="1">	  	     $url .= AgilePHP::getRequestBase() . '/LoginController/confirm/';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     $appName = AgilePHP::getAppName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;setTo(Identity::getEmail());</sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;setToName(Identity::getUsername());</sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;setFrom('no-reply@' . $appName);</sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;setFromName($appName);</sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;setSubject($appName . ' :: Registration Confirmation');</sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;setBody('Click on the following link to confirm your registration: ' . PHP_EOL . $url .</sourceline>
        <sourceline coveredcount="1">	  		 				 	$token . '/' . Scope::getSessionScope()-&gt;getSessionId());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="NotLoggedInException" methodcount="0" methodscovered="0" statementcount="1" statementscovered="1" totalcount="1" totalcovered="1">
      <sourcefile name="NotLoggedInException.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/NotLoggedInException.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Thrown when a user is not logged in and requests secure content</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> * @throws NotLoggedInException</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class NotLoggedInException extends FrameworkException { }</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="BasicAuthentication" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="BasicAuthentication.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/BasicAuthentication.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Prompts the user for authentication using HTTP basic authentication.</sourceline>
        <sourceline coveredcount="0"> * Authentication is performed using the AgilePHP Identity component</sourceline>
        <sourceline coveredcount="0"> * by default, or a custom authenticator method inside the calling</sourceline>
        <sourceline coveredcount="0"> * class can be specified.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@BasicAuthentication</sourceline>
        <sourceline coveredcount="0"> * public function basicAuth() { }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@BasicAuthentication(realm = 'mydomain.com')</sourceline>
        <sourceline coveredcount="0"> * public function basicAuth() { }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@BasicAuthentication(authenticator = 'customMethodAuthenticatorInMyCallingClass')</sourceline>
        <sourceline coveredcount="0"> * public function basicAuth() { }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@BasicAuthentication(authenticator = 'customAuthenticator', realm = 'mydomain.com')</sourceline>
        <sourceline coveredcount="0"> * public function basicAuth() { }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="0" startclass="1">class BasicAuthentication {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   *  @var string An optional realm. Defaults to the HTTP HOST header.</sourceline>
        <sourceline coveredcount="0">	   *  &lt;code&gt;</sourceline>
        <sourceline coveredcount="0">	   *  Example:</sourceline>
        <sourceline coveredcount="0">	   *  #@BasicAuthentication(realm = 'mydomain.com')</sourceline>
        <sourceline coveredcount="0">	   *  &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $realm;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   *  @var string An optional method name in the callee that will perform</sourceline>
        <sourceline coveredcount="0">	   *  			  authentication logic. The custom authenticator should</sourceline>
        <sourceline coveredcount="0">	   *  			  return true if authentication was successful, or false</sourceline>
        <sourceline coveredcount="0">	   *  			  for anything else. The interceptor will handle throwing</sourceline>
        <sourceline coveredcount="0">	   *  			  an AccessDeniedException if false is returned.</sourceline>
        <sourceline coveredcount="0">	   *  &lt;code&gt;</sourceline>
        <sourceline coveredcount="0">	   *  Example:</sourceline>
        <sourceline coveredcount="0">	   *  #@BasicAuthentication(authenticator = 'myAuthenticator')</sourceline>
        <sourceline coveredcount="0">	   *  &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $authenticator;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Prompts the user for HTTP basic authentication.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The context of the intercepted call</sourceline>
        <sourceline coveredcount="0">	   * @return InvocationContext if the authentication was successful.</sourceline>
        <sourceline coveredcount="0">	   * @throws AccessDeniedException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function prompt(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if(isset($_SERVER['PHP_AUTH_USER'])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 if($this-&gt;authenticator) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 	 $callee = $ic-&gt;getCallee();</sourceline>
        <sourceline coveredcount="0">	  		 	 	 $object = $callee['class'];</sourceline>
        <sourceline coveredcount="0">		  	     	 $authenticator = $this-&gt;authenticator;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	     	 // Static authenticator</sourceline>
        <sourceline coveredcount="0">		  	     	 if(preg_match('/::/' , $authenticator)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	     	    $pieces = explode('::', $authenticator);</sourceline>
        <sourceline coveredcount="0">		  	     	    $class = array_shift($pieces);</sourceline>
        <sourceline coveredcount="0">		  	     	    $method = array_shift($pieces);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	     	    if($class::$method($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']))</sourceline>
        <sourceline coveredcount="0">		  	     	       return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	     	    header('HTTP/1.0 401 Unauthorized');</sourceline>
        <sourceline coveredcount="0">		  	     	    throw new AccessDeniedException('Invalid username/password');</sourceline>
        <sourceline coveredcount="0">		  	     	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	     	 // Use authenticator method defined inside of the intercepted target class</sourceline>
        <sourceline coveredcount="0">		  	     	 if($object-&gt;$authenticator($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']))</sourceline>
        <sourceline coveredcount="0">		  	     	 	return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	     	 header('HTTP/1.0 401 Unauthorized');</sourceline>
        <sourceline coveredcount="0">		  	     	 throw new AccessDeniedException('Invalid username/password');</sourceline>
        <sourceline coveredcount="0">	  		 	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 if(Identity::login($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']))</sourceline>
        <sourceline coveredcount="0">	  		 	 	return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 header('HTTP/1.0 401 Unauthorized');</sourceline>
        <sourceline coveredcount="0">	  		 	 throw new AccessDeniedException('Invalid username/password');</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $realm = ($this-&gt;realm == null) ? $_SERVER['HTTP_HOST'] : $this-&gt;realm;</sourceline>
        <sourceline coveredcount="0">	  		 header('HTTP/1.0 401 Unauthorized');</sourceline>
        <sourceline coveredcount="0">	  		 header('WWW-Authenticate: Basic realm=' . $realm);</sourceline>
        <sourceline coveredcount="0">		     throw new AccessDeniedException('Unauthorized');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="AccessDeniedException" methodcount="0" methodscovered="0" statementcount="1" statementscovered="1" totalcount="1" totalcovered="1">
      <sourcefile name="AccessDeniedException.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/AccessDeniedException.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Thrown when a user attempts to access content which they do not have</sourceline>
        <sourceline coveredcount="0"> * permission to view.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> * @throws AccessDeniedException</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class AccessDeniedException extends FrameworkException { }</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="LoggedIn" methodcount="1" methodscovered="1" statementcount="6" statementscovered="6" totalcount="7" totalcovered="7">
      <sourcefile name="LoggedIn.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/LoggedIn.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP interceptor responsible for throwing an NotLoggedInException if</sourceline>
        <sourceline coveredcount="0"> * the current request does not have an authenticated Identity session.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyClass {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@LoggedIn</sourceline>
        <sourceline coveredcount="0"> * public function requiresLoginToInvoke($arg) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Do something here that requires the user to be logged in</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@LoggedIn(message = 'My custom exception message')</sourceline>
        <sourceline coveredcount="0"> * public function requiresLoginToInvoke($arg) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Do something here that requires the user to be logged in</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * public function someMethod() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // This can be invoked without being logged in</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="1" startclass="1">class LoggedIn {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public $message;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function process(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $message = ($this-&gt;message) ? $this-&gt;message : 'You must be logged in to view the requested content!';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if(!Identity::isLoggedIn())</sourceline>
        <sourceline coveredcount="1">	  		 	throw new NotLoggedInException($message);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="IdentityManagerImpl" methodcount="43" methodscovered="30" statementcount="121" statementscovered="62" totalcount="164" totalcovered="92">
      <sourcefile name="IdentityManagerImpl.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/IdentityManagerImpl.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Default IdentityManager implementation. Manages user, role, session,</sourceline>
        <sourceline coveredcount="0"> * authentication, and basic email tasks.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class IdentityManagerImpl implements IdentityManager {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $model;</sourceline>
        <sourceline coveredcount="0">	  private $modelName;</sourceline>
        <sourceline coveredcount="0">	  private $authenticator;</sourceline>
        <sourceline coveredcount="0">	  private $forgotPasswdMailer;</sourceline>
        <sourceline coveredcount="0">	  private $resetPasswdMailer;</sourceline>
        <sourceline coveredcount="0">	  private $registrationMailer;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setModel($model)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setModel(IdentityModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;model = $model;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getModel()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getModel() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return $this-&gt;model;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setModelName($name)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setModelName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;modelName = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getModelName()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getModelName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;modelName;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setUsername($username)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setUsername($username) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;getModel()-&gt;setUsername($username);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see  src/identity/IdentityManager#setPassword($password)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setPassword($password) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;getModel()-&gt;setPassword($password);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getUsername()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getUsername() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $this-&gt;getModel()-&gt;getUsername();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getPassword()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getPassword() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;getModel()-&gt;getPassword();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setEmail($email)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setEmail($email) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;getModel()-&gt;setEmail($email);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getEmail()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getEmail() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $this-&gt;getModel()-&gt;getEmail();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setCreated($dateTime)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setCreated($dateTime) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;getModel()-&gt;setCreated($dateTime);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getCreated()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getCreated() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;getModel()-&gt;getCreated();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setLastLogin($dateTime)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setLastLogin($dateTime) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;getModel()-&gt;setLastLogin($dateTime);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getLastLogin()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getLastLogin() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;getModel()-&gt;getLastLogin();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setEnabled($value)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setEnabled($value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;getModel()-&gt;setEnabled($value);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getEnabled()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getEnabled() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;getModel()-&gt;getEnabled();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setRole($role)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setRole(Role $role) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;getModel()-&gt;setRole($role);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getRole()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getRole() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $this-&gt;getModel()-&gt;getRole();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setRoles(array $roles)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setRoles(array $roles) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         $this-&gt;getModel()-&gt;setRoles($roles);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getRoles()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getRoles() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         return $this-&gt;getModel()-&gt;getRoles();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#addRole(Role $role))</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function addRole(Role $role) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         if(!is_array($this-&gt;getModel()-&gt;getRoles()))</sourceline>
        <sourceline coveredcount="1">	            $this-&gt;setRoles(array());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	         $roles = $this-&gt;getRoles();</sourceline>
        <sourceline coveredcount="1">	         array_push($roles, $role);</sourceline>
        <sourceline coveredcount="1">	         $this-&gt;getModel()-&gt;setRoles($roles);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#hasRole(Role $role)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function hasRole(Role $role) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 if($this-&gt;getModel()-&gt;getRole() instanceof Role &amp;&amp;</sourceline>
        <sourceline coveredcount="1">	  		     $this-&gt;getModel()-&gt;getRole()-&gt;getName() == $role-&gt;getName())</sourceline>
        <sourceline coveredcount="2">	  		 	     return true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 $roles = $this-&gt;getModel()-&gt;getRoles();</sourceline>
        <sourceline coveredcount="2">	  		 if(is_array($roles))</sourceline>
        <sourceline coveredcount="2">	  		    for($i=0; $i&lt;count($roles); $i++)</sourceline>
        <sourceline coveredcount="1">	  		        if($roles[$i]-&gt;getName() == $role-&gt;getName())</sourceline>
        <sourceline coveredcount="1">	  		           return true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#revokeRole(Role $role)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function revokeRole(Role $role) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if($this-&gt;getRole() instanceof Role &amp;&amp; $this-&gt;getRole()-&gt;getName() == $role-&gt;getName())</sourceline>
        <sourceline coveredcount="1">	  		    $this-&gt;setRole(null);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $roles = $this-&gt;getModel()-&gt;getRoles();</sourceline>
        <sourceline coveredcount="1">	  		 if(is_array($roles))</sourceline>
        <sourceline coveredcount="1">	  		   for($i=0; $i&lt;count($roles); $i++)</sourceline>
        <sourceline coveredcount="1">	  		      if($roles[$i]-&gt;getName() == $role-&gt;getName())</sourceline>
        <sourceline coveredcount="1">	  		         array_splice($roles, $i, 1);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;getModel()-&gt;setRoles($roles);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setForgotPasswdMailer($mailer)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setForgotPasswdMailer($mailer) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;forgotPasswdMailer = $mailer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getForgotPasswdMailer()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getForgotPasswdMailer()  {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $this-&gt;forgotPasswdMailer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setResetPasswdMailer($mailer)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setResetPasswdMailer($mailer) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;resetPasswdMailer = $mailer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getResetPasswdMailer()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getResetPasswdMailer()  {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $this-&gt;resetPasswdMailer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setRegistrationMailer($mailer)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setRegistrationMailer($mailer) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;registrationMailer = $mailer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getRegistrationMailer()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getRegistrationMailer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $this-&gt;registrationMailer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#setAuthenticator($authenticator)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setAuthenticator($authenticator) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;authenticator = $authenticator;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#getAuthenticator()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getAuthenticator() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $this-&gt;authenticator;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#forgotPassword()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function forgotPassword() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $token = IdentityUtils::createToken();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $session = Scope::getSessionScope();</sourceline>
        <sourceline coveredcount="-1">	  		 $session-&gt;set('resetPasswordToken', $token);</sourceline>
        <sourceline coveredcount="-1">	  		 $session-&gt;set('username', $this-&gt;getUsername());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $table = ORM::getTableByModelName($this-&gt;getModelName());</sourceline>
        <sourceline coveredcount="-1">	  		 $emailColumn = $table-&gt;getColumnNameByProperty('email');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 ORM::prepare('SELECT ' . $emailColumn . ' FROM ' . $table-&gt;getName() .</sourceline>
        <sourceline coveredcount="-1">	  		 			  ' WHERE ' . $emailColumn . '=? AND username=?;');</sourceline>
        <sourceline coveredcount="-1">	  		 $params = array($this-&gt;getEmail(), $this-&gt;getUsername());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if(!ORM::execute($params)-&gt;fetch())</sourceline>
        <sourceline coveredcount="-1">	  		 	 throw new FrameworkException('The information provided does not match our records.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $mailer = $this-&gt;getForgotPasswdMailer();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $Mailer = new $mailer($this-&gt;getUsername(), $this-&gt;getEmail(), $token);</sourceline>
        <sourceline coveredcount="-1">	  		 $Mailer-&gt;send();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#resetPassword($token, $sessionId)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function resetPassword($token, $sessionId) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $session = Scope::getSessionScope();</sourceline>
        <sourceline coveredcount="-1">	  		 $session-&gt;setSessionId($sessionId);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if($token !== $session-&gt;get('resetPasswordToken'))</sourceline>
        <sourceline coveredcount="-1">	  		 	throw new FrameworkException('Invalid token: ' . $token);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $password = IdentityUtils::createToken();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;setUsername($session-&gt;get('username'));</sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;setPassword($password);</sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;merge();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $session-&gt;destroy();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $mailer = $this-&gt;getResetPasswdMailer();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $Mailer = new $mailer($this-&gt;getUsername(), $password, $this-&gt;getEmail());</sourceline>
        <sourceline coveredcount="-1">	  		 $Mailer-&gt;send();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#register()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function register() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $token = IdentityUtils::createToken();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $session = Scope::getSessionScope();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $session-&gt;set('activationToken', $token);</sourceline>
        <sourceline coveredcount="1">	  		 $session-&gt;set('username', $this-&gt;getUsername());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;setCreated(strtotime('now'));</sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;setEnabled(0);</sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;persist();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $mailer = $this-&gt;getRegistrationMailer();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $Mailer = new $mailer( $token );</sourceline>
        <sourceline coveredcount="1">	  		 $Mailer-&gt;send();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#confirm($token, $sessionId)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function confirm($token, $sessionId) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $session = Scope::getSessionScope();</sourceline>
        <sourceline coveredcount="-1">	  		 $session-&gt;setSessionId($sessionId);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if($token !== $session-&gt;get('activationToken'))</sourceline>
        <sourceline coveredcount="-1">	  		 	 throw new FrameworkException('Invalid token: ' . $token);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $user = new User();</sourceline>
        <sourceline coveredcount="-1">	  		 $user-&gt;setUsername($session-&gt;get('username')); // #@Id interceptor performs lookup</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if(!$user-&gt;getPassword())</sourceline>
        <sourceline coveredcount="-1">	  		 	 throw new FrameworkException('User not found');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;setModel($user);</sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;setEnabled(1);</sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;merge();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $session-&gt;destroy();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#login($username, $password)</sourceline>
        <sourceline coveredcount="0">	   * @throws AccessDeniedException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function login($username, $password) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $authenticator = new $this-&gt;authenticator;</sourceline>
        <sourceline coveredcount="1">	  		 if($model = $authenticator::authenticate($username, $password)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">   	  		    if(!$model instanceof IdentityModel)</sourceline>
        <sourceline coveredcount="-1">    	  		   throw new FrameworkException('Authenticator must return an instance of IdentityModel');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    $session = Scope::getSessionScope();</sourceline>
        <sourceline coveredcount="-1">      	  		$session-&gt;set('IDENTITY_LOGGEDIN', true);</sourceline>
        <sourceline coveredcount="-1">    	  		$session-&gt;set('IDENTITY_MODEL', $model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">   	  		    $model-&gt;setLastLogin(strtotime('now'));</sourceline>
        <sourceline coveredcount="-1">   	  		    $this-&gt;setModel($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">   	  		    if($authenticator instanceof DefaultAuthenticator)</sourceline>
        <sourceline coveredcount="-1">   	  		       $this-&gt;merge();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    	  		return true;</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#logout()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function logout() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 Scope::getSessionScope()-&gt;destroy();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#isLoggedIn()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isLoggedIn() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return (Scope::getSessionScope()-&gt;get('IDENTITY_LOGGEDIN')) ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#persist()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function persist() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  		     ORM::persist($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#merge()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function merge() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 ORM::merge($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#delete()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function delete() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	         ORM::delete($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/identity/IdentityManager#refresh()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function refresh() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             $results = ORM::find($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="-1">	  		 if(isset($results[0])) $this-&gt;setModel($results[0]);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Destructor prints log debug entry notifying that the identity instance has been destroyed.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __destruct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 Log::debug('IdentityManagerImpl::__destruct Instance destroyed');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="DefaultAuthenticator" methodcount="1" methodscovered="0" statementcount="16" statementscovered="13" totalcount="17" totalcovered="13">
      <sourcefile name="DefaultAuthenticator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/DefaultAuthenticator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Default authentication handler.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class DefaultAuthenticator implements Authentication {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public static function authenticate($username, $password) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $model = Identity::getModel();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if(method_exists($model, 'getInterceptedInstance')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		    if(!$model-&gt;getInterceptedInstance() instanceof IdentityModel)</sourceline>
        <sourceline coveredcount="1">	  		       throw new FrameworkException('Model must implement IdentityModel interface');</sourceline>
        <sourceline coveredcount="1">	  		 }</sourceline>
        <sourceline coveredcount="0">	  		 else</sourceline>
        <sourceline coveredcount="-1">	  		    if(!$model instanceof IdentityModel)</sourceline>
        <sourceline coveredcount="-1">	  		       throw new FrameworkException('Model must implement IdentityModel interface');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     Log::debug('DefaultAuthenticator::authenticate Authenticating username \'' . $username . '\' with password \'' . $password . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $model-&gt;setUsername($username); // #@Id interceptor populates ActiveRecord state</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if(!$model-&gt;getPassword()) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $crypto = new Crypto();</sourceline>
        <sourceline coveredcount="1">	  		 $hashed = $crypto-&gt;getDigest($password);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			 if(!preg_match('/' . $hashed . '/', $model-&gt;getPassword())) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if($model-&gt;getEnabled() == 'No') throw new AccessDeniedException('Account Disabled');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 return $model;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Restrict" methodcount="2" methodscovered="1" statementcount="16" statementscovered="12" totalcount="18" totalcovered="13">
      <sourcefile name="Restrict.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/Restrict.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP interceptor responsible for throwing an AccessDeniedException if</sourceline>
        <sourceline coveredcount="0"> * the current logged in user (represented by the state of the Identity component)</sourceline>
        <sourceline coveredcount="0"> * does not contain the specified role.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Restrict(role = 'admin')</sourceline>
        <sourceline coveredcount="0"> * public function methodThatRequiresCertainRole() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Some logic that requires the current logged in user</sourceline>
        <sourceline coveredcount="0"> * 		  // to be a member of the 'admin' role.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Restrict(role = 'admin', message = 'Your not allowed here!')</sourceline>
        <sourceline coveredcount="0"> * public function methodThatRequiresCertainRole() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Some logic that requires the current logged in user</sourceline>
        <sourceline coveredcount="0"> * 		  // to be a member of the 'admin' role and will use the</sourceline>
        <sourceline coveredcount="0"> * 		  // message 'Your not allowed here!' in the AccessDeniedException</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Restrict(roles = { 'admin', 'member' }, message = 'Your not allowed here!')</sourceline>
        <sourceline coveredcount="0"> * public function methodThatRequiresCertainRole() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Some logic that requires the current logged in user</sourceline>
        <sourceline coveredcount="0"> * 		  // to be a member of one of the specified roles in the roles array</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Restrict(roles = { 'admin', 'member' }, message = 'Your not allowed here!')</sourceline>
        <sourceline coveredcount="0"> * public function methodThatRequiresCertainRole() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Some logic that requires the current logged in user</sourceline>
        <sourceline coveredcount="0"> * 		  // to be a member of one of the specified roles in the array argument.</sourceline>
        <sourceline coveredcount="0"> * 		  // If not a member, use the message parameter in the exception message.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="1" startclass="1">class Restrict {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Restrict annotation argument containing the name of the required role.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var String The required role name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $role;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Restrict annotation argument containing an array of required role names.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var Array An array of required role names</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $roles;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Restrict annotation optional argument containing the message to display</sourceline>
        <sourceline coveredcount="0">	   * if the current identity does not contain any of the required roles.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var String Optional message used in AccessDeniedException error message</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $message;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function requireRole(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $message = $ic-&gt;getInterceptor()-&gt;message ? $ic-&gt;getInterceptor()-&gt;message : 'Access Denied';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $requiredRole = $ic-&gt;getInterceptor()-&gt;role;</sourceline>
        <sourceline coveredcount="1">	  	     if(Identity::hasRole(new Role($requiredRole)))</sourceline>
        <sourceline coveredcount="1">	  	     	 return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     $roles = $ic-&gt;getInterceptor()-&gt;roles;</sourceline>
        <sourceline coveredcount="1">	  	     if(is_array($roles)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     	 foreach($roles as $role)</sourceline>
        <sourceline coveredcount="-1">	  	     	 	if(Identity::hasRole(new Role($role)))</sourceline>
        <sourceline coveredcount="-1">	  	     	 		return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="-1">	  	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     $this-&gt;audit($message, $ic);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes an entry in the log file for security auditing.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message Custom error message as defined in the annotation defintion</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The InvocationContext which contains the current call state</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function audit($message, $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  Log::error('#@Restrict::audit Access Denied ' . print_r(Identity::getModel(), true));</sourceline>
        <sourceline coveredcount="1">	  		  throw new AccessDeniedException($message);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="BasicForgotPasswdMailer" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="BasicForgotPasswdMailer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/BasicForgotPasswdMailer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Sends plain text forgot password emails</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class BasicForgotPasswdMailer extends Mailer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function __construct($username, $email, $token) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $url = (@$_SERVER['HTTPS'] != null) ? 'https://' : 'http://';</sourceline>
        <sourceline coveredcount="0">	  	     $url .= (@$_SERVER['HTTP_HOST'] != null) ? $_SERVER['HTTP_HOST'] : 'localhost';</sourceline>
        <sourceline coveredcount="0">	  		 $url .= AgilePHP::getRequestBase() . '/LoginController/resetPassword/';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $appName = AgilePHP::getAppName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     $this-&gt;setTo($email);</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;setToName($username);</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;setFrom('no-reply@' . $appName);</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;setFromName($appName);</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;setSubject($appName . ' :: Reset Password');</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;setBody('Click on the following link to reset your password: ' . PHP_EOL . $url .</sourceline>
        <sourceline coveredcount="0">	  		 				 	$token . '/' . Scope::getSessionScope()-&gt;getSessionId());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="BasicResetPasswdMailer" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="BasicResetPasswdMailer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/identity/BasicResetPasswdMailer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Sends plain text emails which contain newly reset passwords</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.identity</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class BasicResetPasswdMailer extends Mailer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function __construct($username, $password, $email) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         $appName = AgilePHP::getAppName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     $this-&gt;setTo($email);</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;setToName($username);</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;setFrom('no-reply@' . $appName);</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;setFromName($appName);</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;setSubject($appName . ' :: New Password');</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;setBody('Your new password is: ' . $password);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.mvc" methodcount="90" methodscovered="3" statementcount="90" statementscovered="12" totalcount="180" totalcovered="15">
    <class name="ComponentModelActionController" methodcount="6" methodscovered="0" statementcount="0" statementscovered="0" totalcount="6" totalcovered="0">
      <sourcefile name="ComponentModelActionController.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/mvc/ComponentModelActionController.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Overrides BaseModel* classes to provide implementation</sourceline>
        <sourceline coveredcount="0"> * specific logic for front controller style components.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">abstract class ComponentModelActionController extends BaseModelActionController {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Performs a search for the model defined in the extension class and displays a</sourceline>
        <sourceline coveredcount="0">	      * paginated result list with edit and delete actions, as well as sortable</sourceline>
        <sourceline coveredcount="0">	      * column headers.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param Integer $page The page number within the result set to display. Default is page 1.</sourceline>
        <sourceline coveredcount="0">	      * @param String $view The view to render. Default is 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function index($page = 1, $view = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	    if(!$view) $view = 'admin';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		// Defaults sorting by the first primary key column</sourceline>
        <sourceline coveredcount="0">	     		//</sourceline>
        <sourceline coveredcount="0">	     		//$table = ORM::getTableByModel($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	  	        //$pkeyColumns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">	  	        //if($pkeyColumns) $this-&gt;setOrderBy($pkeyColumns[0]-&gt;getModelPropertyName(), 'ASC');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		    $this-&gt;setPage($page);</sourceline>
        <sourceline coveredcount="0">	  		    $xsl = $this-&gt;getModelListXSL(null, $this-&gt;getComponentName() . '/' . MVC::getAction());</sourceline>
        <sourceline coveredcount="0">	  		    $xml = $this-&gt;getResultListAsPagedXML($this-&gt;getComponentName() . '/' . MVC::getAction());</sourceline>
        <sourceline coveredcount="0">	  	        $this-&gt;set('content', $this-&gt;xsltRenderer-&gt;transform($xsl, $xml));</sourceline>
        <sourceline coveredcount="0">	  	        $this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Displays an 'add' form for the model defined in the extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param int $page The page number to display.</sourceline>
        <sourceline coveredcount="0">	      * @param string $view The view to render. Defaults to 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function add($page, $view = 'admin') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setPage($page);</sourceline>
        <sourceline coveredcount="0">	     		$xsl = $this-&gt;getModelFormXSL(null, $this-&gt;getComponentName() . '/' . MVC::getAction());</sourceline>
        <sourceline coveredcount="0">	     		$xml = $this-&gt;getModelAsFormXML($this-&gt;getComponentName() . '/' . MVC::getAction());</sourceline>
        <sourceline coveredcount="0">  	     		$this-&gt;set('content', $this-&gt;xsltRenderer-&gt;transform($xsl, $xml));</sourceline>
        <sourceline coveredcount="0">  	     	    $this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Displays an 'edit' form for the model defined in the extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $ids Underscore delimited list of primary key id's in same ordinal position as defined in orm.xml</sourceline>
        <sourceline coveredcount="0">	      * @param int $page The page number to display.</sourceline>
        <sourceline coveredcount="0">	      * @param string $view The view to render. Defaults to 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function edit($ids, $page = 1, $view = 'admin') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setPrimaryKeys($ids);</sourceline>
        <sourceline coveredcount="0">            	$this-&gt;setPage($page);</sourceline>
        <sourceline coveredcount="0">            	$xsl = $this-&gt;getModelFormXSL(null, $this-&gt;getComponentName() . '/' . MVC::getAction());</sourceline>
        <sourceline coveredcount="0">            	$xml = $this-&gt;getModelAsFormXML($this-&gt;getComponentName() . '/' . MVC::getAction());</sourceline>
        <sourceline coveredcount="0">	  	        $this-&gt;set('content', $this-&gt;xsltRenderer-&gt;transform($xsl, $xml));</sourceline>
        <sourceline coveredcount="0">            	$this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Displays a read only text table for the model defined in the extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $ids Underscore delimited list of primary key id's in same ordinal position as defined in orm.xml</sourceline>
        <sourceline coveredcount="0">	      * @param string $view The view to render. Defaults to 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function read($ids, $view = 'admin') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setPrimaryKeys($ids);</sourceline>
        <sourceline coveredcount="0">	     		$xsl = $this-&gt;getModelAsReadOnlyXSL($this-&gt;getComponentName() . '/' . MVC::getAction());</sourceline>
        <sourceline coveredcount="0">	     		$xml = $this-&gt;getModelAsFormXML($this-&gt;getComponentName() . '/' . MVC::getAction());</sourceline>
        <sourceline coveredcount="0">  	     		$this-&gt;set('content', $this-&gt;xsltRenderer-&gt;transform($xsl, $xml));</sourceline>
        <sourceline coveredcount="0">  	     	    $this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Performs a search on the model defined in the extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $field The database column name to filter on</sourceline>
        <sourceline coveredcount="0">	      * @param string $keyword The keyword used as the search criteria. Defaults to null (show everything)</sourceline>
        <sourceline coveredcount="0">	      * @param string $view The view to render. Defaults to 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @param int $page The page number to display.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function search($page = 1, $view = 'admin', $field = null, $keyword = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$table = ORM::getTableByModel($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	     		$columns = $table-&gt;getColumns();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		if(!$field) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   $columns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">	     		   $field = $columns[0]-&gt;getName();</sourceline>
        <sourceline coveredcount="0">	     		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				foreach($columns as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     					if($field == $column-&gt;getName())</sourceline>
        <sourceline coveredcount="0">     			 		   $this-&gt;setRestrictions(array($field =&gt; '%' . $keyword . '%'));</sourceline>
        <sourceline coveredcount="0">     			}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			$this-&gt;setComparisonLogicOperator('LIKE');</sourceline>
        <sourceline coveredcount="0">     			$this-&gt;setPage($page);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			$params = $view . '/' . $field . '/' . $keyword;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			$xsl = $this-&gt;getModelListXSL(null, $this-&gt;getComponentName() . '/' . MVC::getAction());</sourceline>
        <sourceline coveredcount="0">     			$xml = $this-&gt;getResultListAsPagedXML($this-&gt;getComponentName() . '/' . MVC::getAction(), 'search', $params);</sourceline>
        <sourceline coveredcount="0">     			$content = $this-&gt;xsltRenderer-&gt;transform($xsl, $xml);</sourceline>
        <sourceline coveredcount="0">  	         	$this-&gt;set('content', $content);</sourceline>
        <sourceline coveredcount="0">	  	        $this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Sorts the modelList according to the specified column name and direction.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param String $column The column name to sort on</sourceline>
        <sourceline coveredcount="0">	      * @param String $direction The direction to sort. Default is 'ASC' (ascending). (ASC|DESC)</sourceline>
        <sourceline coveredcount="0">	      * @param Integer $page The page within the result set to display.</sourceline>
        <sourceline coveredcount="0">	      * @param String $view The view to render. Default is 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function sort($column, $direction = 'DESC', $page = 1, $view = 'admin') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setOrderBy($column, $direction);</sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setPage($page);</sourceline>
        <sourceline coveredcount="0">				$this-&gt;setOrderBy($column, ($direction == 'ASC') ? 'DESC' : 'ASC');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				$xsl = $this-&gt;getModelListXSL(null, $this-&gt;getComponentName() . '/' . MVC::getAction());</sourceline>
        <sourceline coveredcount="0">				$xml = $this-&gt;getResultListAsPagedXML($this-&gt;getComponentName() . '/' . MVC::getAction());</sourceline>
        <sourceline coveredcount="0">	     		$content = $this-&gt;xsltRenderer-&gt;transform($xsl, $xml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	        $this-&gt;set('content', $content);</sourceline>
        <sourceline coveredcount="0">	  	        $this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the name of the component which the controller belongs. This</sourceline>
        <sourceline coveredcount="0">	      * is used to dispatch requests to the correct location.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return string The component name</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     abstract protected function getComponentName();</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="AJAXRenderer" methodcount="8" methodscovered="3" statementcount="74" statementscovered="12" totalcount="82" totalcovered="15">
      <sourcefile name="AJAXRenderer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/mvc/AJAXRenderer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Renders data in JSON or XML, optionally with appropriate content-type header.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class AJAXRenderer extends BaseRenderer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $output = 'json';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Renders the specified PHP data according to $output. The approriate</sourceline>
        <sourceline coveredcount="0">	   * content-type to the HTTP response header. After rendering JSON,</sourceline>
        <sourceline coveredcount="0">	   * exit() is called.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/mvc/BaseRenderer#render($view)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function render($data, $name = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if(!$this-&gt;output)</sourceline>
        <sourceline coveredcount="-1">	  		 	throw new FrameworkException('AJAXRenderer::render Output mode required. Use AJAXRenderer::setOutputMode to set the desired format (json|xml|yaml)');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if( $this-&gt;output == 'json' ) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	 $json = $this-&gt;toJSON($data, $name);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	 Log::debug('AJAXRenderer::render Rendering JSON ' . $json);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	 header('content-type: application/json');</sourceline>
        <sourceline coveredcount="-1">	  		 	 die($json);</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 else if($this-&gt;output == 'xml') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	 if(!$name) $name = 'Result';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	 $xml = $this-&gt;toXML($data, $name);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	 Log::debug('AJAXRenderer::render Rendering XML ' . $xml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	 header('content-type: application/xml');</sourceline>
        <sourceline coveredcount="-1">	  		 	 die($xml);</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 else if($this-&gt;output == 'yaml') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		     $yaml = $this-&gt;toYAML($data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		     Log::debug('AJAXRenderer::render Rendering YAML ' . $yaml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		     header('content-type: application/x-yaml');</sourceline>
        <sourceline coveredcount="-1">	  		     die($yaml);</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Renders the specified data according to $output without sending</sourceline>
        <sourceline coveredcount="0">	   * an HTTP content-type header. After rendering JSON, exit() is called.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Object $data A stdClass object to output as either XML or JSON.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function renderNoHeader($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	 		 if(!$this-&gt;output)</sourceline>
        <sourceline coveredcount="-1">	  		 	 throw new FrameworkException('AJAXRenderer::render Output mode required. Use AJAXRenderer::setOutputMode to set the desired format (json|xml|yaml)');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if($this-&gt;output == 'json') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	$json = $this-&gt;toJSON($data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	Log::debug('AJAXRenderer::render Rendering JSON ' . $json);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	die($json);</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 else if($this-&gt;output == 'xml') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	$xml = $this-&gt;toXML($data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	Log::debug('AJAXRenderer::render Rendering XML ' . $xml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	die($xml);</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 else if($this-&gt;output == 'yaml') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    $yaml = $this-&gt;toYAML($data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    Log::debug('AJAXRenderer::render Rendering YAML ' . $yaml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    die($yaml);</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Renders the specified raw data without sending it through any of the AJAXRender</sourceline>
        <sourceline coveredcount="0">	   * internal formatting/conversion methods. An appropriate HTTP content-type</sourceline>
        <sourceline coveredcount="0">	   * header is added to the response.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The raw data to render</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function renderNoFormat($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     if(!$this-&gt;output)</sourceline>
        <sourceline coveredcount="-1">	  		 	throw new FrameworkException('AJAXRenderer::render Output mode required. Use AJAXRenderer::setOutputMode to set the desired format (json|xml|yaml)');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 switch($this-&gt;output) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  		 case 'json':</sourceline>
        <sourceline coveredcount="-1">			  		 case 'JSON':</sourceline>
        <sourceline coveredcount="-1">			  		 	header('content-type: application/json');</sourceline>
        <sourceline coveredcount="-1">	  		 	 		break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  		 case 'xml':</sourceline>
        <sourceline coveredcount="-1">			  		 case 'XML':</sourceline>
        <sourceline coveredcount="-1">			  		 	header('content-type: application/xml');</sourceline>
        <sourceline coveredcount="-1">	  		 	 		break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  		 case 'yaml':</sourceline>
        <sourceline coveredcount="-1">			  		 case 'YAML':</sourceline>
        <sourceline coveredcount="-1">			  		     header('content-type: application/x-yaml');</sourceline>
        <sourceline coveredcount="-1">			  		     break;</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 print $data;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Renders the specified data without sending it through any of the AJAXRenderer</sourceline>
        <sourceline coveredcount="0">	   * internal formatting/conversion methods. In addition, no HTTP content-type header</sourceline>
        <sourceline coveredcount="0">	   * is added to the response.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Object $data The data to render</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function renderNoFormatNoHeader($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 die($data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the desired output type.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $type The data formatting to use during output. (XML|JSON|YAML)</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws FrameworkException if invalid formatting type is specified</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setOutput($type) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 switch( $type ) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 		 case 'json':</sourceline>
        <sourceline coveredcount="-1">	  		 		 case 'JSON':</sourceline>
        <sourceline coveredcount="-1">	  		 		 	$this-&gt;output = 'json';</sourceline>
        <sourceline coveredcount="-1">	  		 		 	break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 		 case 'xml':</sourceline>
        <sourceline coveredcount="-1">	  		 		 case 'XML':</sourceline>
        <sourceline coveredcount="-1">	  		 		 	$this-&gt;output = 'xml';</sourceline>
        <sourceline coveredcount="-1">	  		 		 	break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 		 case 'yaml':</sourceline>
        <sourceline coveredcount="-1">	  		 		 case 'YAML':</sourceline>
        <sourceline coveredcount="-1">	  		 		     $this-&gt;output = 'yaml';</sourceline>
        <sourceline coveredcount="-1">	  		 		     break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	  		 		 throw new FrameworkException('Unsupported output type \'' . $type . '\'.');</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms the specified PHP data to JSON. json_encode does not encode</sourceline>
        <sourceline coveredcount="0">	   * private fields within objects, so here we make use PHP 5.3+</sourceline>
        <sourceline coveredcount="0">	   * ReflectionProperty::setAccessible to access the private/protected properties.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data An array or object to transform into JSON</sourceline>
        <sourceline coveredcount="0">	   * @param string $name An optional class name. Defaults to null</sourceline>
        <sourceline coveredcount="0">	   * @param boolean $isChild Used internally for recursion logic</sourceline>
        <sourceline coveredcount="0">	   * @return The JSON encoded data</sourceline>
        <sourceline coveredcount="0">	   * @deprecated Use JsonRenderer::render instead</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function toJSON($data, $name = null, $isChild = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return JsonRenderer::render($data, $name, $isChild);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Recursively transforms the specified PHP data to XML.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data An array or object to transform into XML</sourceline>
        <sourceline coveredcount="0">	   * @param $name Used internally within the method to perform recursion logic</sourceline>
        <sourceline coveredcount="0">	   * @return The XML string</sourceline>
        <sourceline coveredcount="0">	   * @deprecated Use XmlRenderer::render instead</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function toXML($data, $name = 'Result', $pluralName = 'Results', $isChild = false, $declaration = true) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return XmlRenderer::render($data, $name, $pluralName, $isChild, $declaration);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms the specified PHP data to YAML.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data Data to transform into YAML</sourceline>
        <sourceline coveredcount="0">	   * @param $encoding YAML_ANY_ENCODING, YAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING, YAML_UTF16BE_ENCODING. Defaults to YAML_ANY_ENCODING.</sourceline>
        <sourceline coveredcount="0">	   * @param $int $linebreak YAML_ANY_BREAK, YAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK. Defaults to YAML_ANY_BREAK</sourceline>
        <sourceline coveredcount="0">	   * @return $int string The YAML formatted data.</sourceline>
        <sourceline coveredcount="0">	   * @deprecated Use YamlRenderer::render instead</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function toYAML($data, $encoding = null, $linebreak = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return YamlRenderer::render($data, $encoding, $linebreak);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="BaseModelXmlController" methodcount="4" methodscovered="0" statementcount="0" statementscovered="0" totalcount="4" totalcovered="0">
      <sourcefile name="BaseModelXmlController.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/mvc/BaseModelXmlController.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides base implementation for model xml controllers.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">abstract class BaseModelXmlController extends BaseModelController {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Creates an XML document representing a model. If the 'id' parameter is set, a</sourceline>
        <sourceline coveredcount="0">		  * lookup is performed for the model with the specified 'id' and the XML is returned with</sourceline>
        <sourceline coveredcount="0">		  * data populated from the database result set.. If there is no 'id' set, the model's property</sourceline>
        <sourceline coveredcount="0">		  * nodes will be null. A custom controller and action can be set to modify default behavior.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param String $controller Optional controller to use for CRUD operations. Defaults to the name of the controller that invoked this method.</sourceline>
        <sourceline coveredcount="0">		  * @param String $action The controllers action method to invoke. Defaults to the persistence mode (persist|merge)</sourceline>
        <sourceline coveredcount="0">		  * @param array $params An array of parameters to pass into the action method. Defaults to null.</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getModelAsFormXML($controller = null, $action = null, $params = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	               if(!$controller) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	                   $thisController = new ReflectionClass($this);</sourceline>
        <sourceline coveredcount="0">	                   $c = $thisController-&gt;getName();</sourceline>
        <sourceline coveredcount="0">	               }</sourceline>
        <sourceline coveredcount="0">	               else</sourceline>
        <sourceline coveredcount="0">  			 	       $c = $controller;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 	   $a = ($action) ? $action : $this-&gt;getModelPersistenceAction();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   			 	   // php namespace support</sourceline>
        <sourceline coveredcount="0">     		   	   $namespace = explode('\\', $c);</sourceline>
        <sourceline coveredcount="0">     		   	   $c = $namespace[0];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     		   	   $modelNamespace = explode('\\', $this-&gt;getModelName());</sourceline>
        <sourceline coveredcount="0">  			 	   $modelName = array_pop($modelNamespace);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 	   $xml = '&lt;Form&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 	   $fieldCount = 0;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 	   if($this-&gt;getModelPersistenceAction() == 'merge') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 	       $models = ORM::find($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">  			 	   	   if(!isset($models[0]))</sourceline>
        <sourceline coveredcount="0">  			 	   	   	  throw new FrameworkException('The ActiveRecord state for model \'' . $this-&gt;getModelName() . '\' could not be found.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 	   	   $fieldCount = count(ORM::getTableByModel($this-&gt;getModel())-&gt;getColumns());</sourceline>
        <sourceline coveredcount="0">  			 	       $xml .= XmlRenderer::render($models[0], $modelName, $modelName, false, false);</sourceline>
        <sourceline coveredcount="0">  			 	   }</sourceline>
        <sourceline coveredcount="0">  			 	   else</sourceline>
        <sourceline coveredcount="0">  			 	       $xml .= XmlRenderer::render($this-&gt;getModel(), $modelName, $modelName, false, false);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  			   $xml .= '&lt;controller&gt;' . $c . '&lt;/controller&gt;</sourceline>
        <sourceline coveredcount="0">	  			 	   		&lt;action&gt;' . $a . '&lt;/action&gt;';</sourceline>
        <sourceline coveredcount="0">	  			   $xml .= ($params ? '&lt;params&gt;' . $params . '&lt;/params&gt;' : '');</sourceline>
        <sourceline coveredcount="0">	  			   $xml .= '&lt;fieldCount&gt;' . $fieldCount . '&lt;/fieldCount&gt;</sourceline>
        <sourceline coveredcount="0">	  			 	   	&lt;/Form&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  			   Log::debug('BaseModelXmlController::getModelAsFormXML called with parameters controller = ' . $controller . ', action = ' . $action . ', params = ' . print_r($params, true));</sourceline>
        <sourceline coveredcount="0">	  			   Log::debug('BaseModelXmlController::getModelAsFormXML returning xml ' . $xml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 	   return $xml;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Returns a result set from the database as XML. The XML document is returned</sourceline>
        <sourceline coveredcount="0">	      * with the root node 'ResultList' containing an element named after the model</sourceline>
        <sourceline coveredcount="0">	      * which then contains each of the models properties and values as children.</sourceline>
        <sourceline coveredcount="0">	      * For example:</sourceline>
        <sourceline coveredcount="0">	      * &lt;ResultList&gt;</sourceline>
        <sourceline coveredcount="0">	      * 	&lt;your_model_name&gt;</sourceline>
        <sourceline coveredcount="0">	      * 		&lt;model_prop1&gt;*&lt;/model_prop1&gt;</sourceline>
        <sourceline coveredcount="0">	      * 		&lt;model_prop2&gt;*&lt;/model_prop2&gt;</sourceline>
        <sourceline coveredcount="0">	      * 	&lt;/your_model_name&gt;</sourceline>
        <sourceline coveredcount="0">	      * &lt;/ResultList&gt;.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return An XML document representing the result list</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getResultListAsXML() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             	   if(!$this-&gt;getResultList())</sourceline>
        <sourceline coveredcount="0">             	   	  throw new FrameworkException('BaseModelXmlController::getResultListAsXml() requires a valid result set to transform to XML.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             	   $xml = '&lt;ResultList&gt;';</sourceline>
        <sourceline coveredcount="0">             	   $xml .= XmlRenderer::render($this-&gt;getResultList(), $this-&gt;getModelName(), 'Model', false, false);</sourceline>
        <sourceline coveredcount="0">			 	   $xml .= '&lt;/ResultList&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   return $xml;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Returns a paged result set from the database as XML (including foreign model instances with their</sourceline>
        <sourceline coveredcount="0">	      * primary keys set). The XML document is returned in the following format:</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * &lt;ResultList&gt;</sourceline>
        <sourceline coveredcount="0">	      * 	&lt;Model&gt;</sourceline>
        <sourceline coveredcount="0">	      * 		&lt;your_model_name&gt;</sourceline>
        <sourceline coveredcount="0">		  *     		&lt;foreign_model_name&gt;</sourceline>
        <sourceline coveredcount="0">		  *     			&lt;primary_key1&gt;*&lt;/primary_key1&gt;</sourceline>
        <sourceline coveredcount="0">		  *     			&lt;primary_key2&gt;*&lt;/primary_key2&gt;</sourceline>
        <sourceline coveredcount="0">		  *     		&lt;/foreign_model_name&gt;</sourceline>
        <sourceline coveredcount="0">	      * 			&lt;model_prop1&gt;*&lt;/model_prop1&gt;</sourceline>
        <sourceline coveredcount="0">	      * 			&lt;model_prop2&gt;*&lt;/model_prop2&gt;</sourceline>
        <sourceline coveredcount="0">	      *			&lt;/your_model_name&gt;</sourceline>
        <sourceline coveredcount="0">	      *		&lt;/Model&gt;</sourceline>
        <sourceline coveredcount="0">	      *		&lt;Pagination&gt;</sourceline>
        <sourceline coveredcount="0">	      *			&lt;page&gt;*&lt;/page&gt;</sourceline>
        <sourceline coveredcount="0">	      *	        &lt;pageCount&gt;*&lt;/pageCount&gt;</sourceline>
        <sourceline coveredcount="0">	      *	        &lt;nextExists&gt;*&lt;/nextExists&gt;</sourceline>
        <sourceline coveredcount="0">	      *	       	&lt;previousExists&gt;*&lt;/previousExists&gt;</sourceline>
        <sourceline coveredcount="0">	      *			&lt;controller&gt;*&lt;/controller&gt;</sourceline>
        <sourceline coveredcount="0">	      *			&lt;action&gt;*&lt;/action&gt;</sourceline>
        <sourceline coveredcount="0">	      *		&lt;/Pagination&gt;</sourceline>
        <sourceline coveredcount="0">	      * &lt;/ResultList&gt;</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $controller</sourceline>
        <sourceline coveredcount="0">	      * @return An XML document representing the result list</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getResultListAsPagedXML($controller = null, $action = null, $params = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	               if(!$controller) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	                   $thisController = new ReflectionClass($this);</sourceline>
        <sourceline coveredcount="0">	                   $c = $thisController-&gt;getName();</sourceline>
        <sourceline coveredcount="0">	               }</sourceline>
        <sourceline coveredcount="0">	               else</sourceline>
        <sourceline coveredcount="0">  			 	       $c = $controller;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   // php namespace support</sourceline>
        <sourceline coveredcount="0">     		   	   $namespace = explode('\\', $c);</sourceline>
        <sourceline coveredcount="0">     		   	   $c = array_pop($namespace);</sourceline>
        <sourceline coveredcount="0">   		   		   $a = (!$action) ? 'index' : $action;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             	   $start = ($this-&gt;getPage() * $this-&gt;getMaxResults()) - ($this-&gt;getMaxResults() - 1);</sourceline>
        <sourceline coveredcount="0">             	   if(!$this-&gt;getCount()) $start = 0;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             	   $end = $start + ($this-&gt;getMaxResults() - 1);</sourceline>
        <sourceline coveredcount="0">			 	   if($end &gt; $this-&gt;getCount()) $end = $this-&gt;getCount();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             	   $xml = '&lt;ResultList&gt;';</sourceline>
        <sourceline coveredcount="0">             	   $xml .= XmlRenderer::render($this-&gt;getResultList(), $this-&gt;getModelName(), 'Model', false, false);</sourceline>
        <sourceline coveredcount="0">             	   $xml .= '&lt;Pagination&gt;</sourceline>
        <sourceline coveredcount="0">             	   				&lt;page&gt;' . $this-&gt;getPage() . '&lt;/page&gt;</sourceline>
        <sourceline coveredcount="0">             	   				&lt;pageCount&gt;' . $this-&gt;getPageCount() . '&lt;/pageCount&gt;</sourceline>
        <sourceline coveredcount="0">			 	   				&lt;nextExists&gt;' . (($this-&gt;nextExists() == true) ? 1 : 0) . '&lt;/nextExists&gt;</sourceline>
        <sourceline coveredcount="0">			 	   				&lt;previousExists&gt;' . (($this-&gt;previousExists()) ? 1 : 0) . '&lt;/previousExists&gt;</sourceline>
        <sourceline coveredcount="0">			 	   				&lt;resultCount&gt;' . $this-&gt;getResultCount() . '&lt;/resultCount&gt;</sourceline>
        <sourceline coveredcount="0">			 	   				&lt;recordCount&gt;' . $this-&gt;getCount() . '&lt;/recordCount&gt;</sourceline>
        <sourceline coveredcount="0">			 	   				&lt;recordStart&gt;' . (($start &lt;= 0) ? 0 : $start) . '&lt;/recordStart&gt;</sourceline>
        <sourceline coveredcount="0">			 	   				&lt;recordEnd&gt;' . $end . '&lt;/recordEnd&gt;</sourceline>
        <sourceline coveredcount="0">			 	   				&lt;controller&gt;' . $c . '&lt;/controller&gt;</sourceline>
        <sourceline coveredcount="0">			 	   				&lt;action&gt;' . $a . '&lt;/action&gt;';</sourceline>
        <sourceline coveredcount="0">			 	   if($params) $xml .= '&lt;params&gt;' . $params . '&lt;/params&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   $xml .= '&lt;/Pagination&gt;</sourceline>
        <sourceline coveredcount="0">			 	   	&lt;/ResultList&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   Log::debug('BaseModelXmlController::getResultListAsPagedXML' . $xml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   return $xml;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the type of action which the controllers should take when deciphering</sourceline>
        <sourceline coveredcount="0">	      * whether the operation is a persist or merge operation. If the primary key(s)</sourceline>
        <sourceline coveredcount="0">	      * contain a value, the action is assumed a merge. If the primary key(s) do not</sourceline>
        <sourceline coveredcount="0">	      * contain a value, the action is assumed persist.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @todo this needs to be made more robust - should probably be moved to ORM</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return 'persist' if the primary key value(s) are not present, 'merge' if</sourceline>
        <sourceline coveredcount="0">	      * 	    the primary keys are present.</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getModelPersistenceAction() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   $table = ORM::getTableByModel($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	     		   $pkeyColumns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">  			 	   foreach($pkeyColumns as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 	   		   $accessor = 'get' . ucfirst($column-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0">  			 	   		   if(!$this-&gt;getModel()-&gt;$accessor())</sourceline>
        <sourceline coveredcount="0">  			 	   			  return 'persist';</sourceline>
        <sourceline coveredcount="0">  			 	   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 	   return 'merge';</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="BaseModelXslController" methodcount="8" methodscovered="0" statementcount="0" statementscovered="0" totalcount="8" totalcovered="0">
      <sourcefile name="BaseModelXslController.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/mvc/BaseModelXslController.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides base implementation for model xsl controllers.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">abstract class BaseModelXslController extends BaseModelXmlController {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Generates an XSL stylesheet from the domain model object's properties. Designed to be used in conjuction</sourceline>
        <sourceline coveredcount="0">	      * with getResultListAsPagedXML() to perform an XSLT transformation.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param String $pkeyFields Optional name of the model property to send as the 'id' field to the action when an action</sourceline>
        <sourceline coveredcount="0">	      * 			  		      button is clicked. Defaults to the primary key(s) of the model as defined in orm.xml.</sourceline>
        <sourceline coveredcount="0">	      * @param String $controller Optional name of the controller to use when an action button is clicked. Defaults</sourceline>
        <sourceline coveredcount="0">	      * 				   		  to the name of the controller which invoked this method. Defaults to the extension controller.</sourceline>
        <sourceline coveredcount="0">	      * @param string $view Optional name of a PHTML view to render. Defaults to 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @return XSL stylesheet for BaseModelXmlController</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getModelListXSL($pkeyFields = null, $controller = null, $view = 'admin') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   $table = ORM::getTableByModelName($this-&gt;getModelName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   if(!$controller) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		      $thisController = new ReflectionClass($this);</sourceline>
        <sourceline coveredcount="0">	     		      $controller = $thisController-&gt;getName();</sourceline>
        <sourceline coveredcount="0">	     		   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       // php namespace support</sourceline>
        <sourceline coveredcount="0">     		   	   $namespace = explode('\\', $controller);</sourceline>
        <sourceline coveredcount="0">     		   	   //$controller = $namespace[0];</sourceline>
        <sourceline coveredcount="0">     		   	   $modelNamespace = explode('\\', $this-&gt;getModelName());</sourceline>
        <sourceline coveredcount="0">     		   	   $modelName = array_pop($modelNamespace);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     		   	   $requestBase = AgilePHP::getRequestBase();</sourceline>
        <sourceline coveredcount="0">   		   		   if(!$pkeyFields)  $pkeyFields = $this-&gt;getSerializedPrimaryKeyColumns($table);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   		   		   $fkeyXslValues = $this-&gt;getSerializedForeignKeyValuesAsXSL($table);</sourceline>
        <sourceline coveredcount="0">   		   		   $pkeyXslValues = $this-&gt;getSerializedPrimaryKeyColumnsAsXSL($pkeyFields);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   		   		   // If this is a many to many relationship, primary keys are foreign key values</sourceline>
        <sourceline coveredcount="0">	     	       $pkeys = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">	     	       foreach($pkeys as $pkey) {</sourceline>
        <sourceline coveredcount="0">	     	         if($pkey-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0">	     	            $pkeyXslValues = $fkeyXslValues;</sourceline>
        <sourceline coveredcount="0">	     	            break;</sourceline>
        <sourceline coveredcount="0">	     	         }</sourceline>
        <sourceline coveredcount="0">	     	       }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   		   		   $order = $this-&gt;getOrderBy();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   $xsl = '&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				   		$xsl .= $this-&gt;getPaginationXSL();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						$xsl .=	'&lt;xsl:template match="/"&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;div class="agilephpTableDescription"&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						                    $display = $table-&gt;getDisplay();</sourceline>
        <sourceline coveredcount="0">						                    $description = $table-&gt;getDescription();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											if($display) $xsl .= $display;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											if($display &amp;&amp; $description) $xsl .= ' :: ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											if($description) $xsl .= $description;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											// Prevents broken document if both display and description are missing from orm.xml</sourceline>
        <sourceline coveredcount="0">											if(!$display &amp;&amp; !$description) $xsl .= '&lt;p/&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										$xsl .= '&lt;/div&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;div class="agilephpSearchBar"&gt;</sourceline>
        <sourceline coveredcount="0">											 Search</sourceline>
        <sourceline coveredcount="0">											 &lt;input type="text" id="agilephpSearchText" name="agilephpSearchText"/&gt;</sourceline>
        <sourceline coveredcount="0">											 &lt;select id="agilephpSearchField" name="agilephpSearchField"&gt;';</sourceline>
        <sourceline coveredcount="0">												foreach($table-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="0">													if($column-&gt;isVisible())</sourceline>
        <sourceline coveredcount="0">														$xsl .= '&lt;option value="' . $column-&gt;getName() . '"&gt;' . $column-&gt;getViewDisplayName() . '&lt;/option&gt;';</sourceline>
        <sourceline coveredcount="0">										$xsl .= '&lt;/select&gt;</sourceline>
        <sourceline coveredcount="0">											 &lt;input type="hidden" value="' . $this-&gt;page . '" id="page"/&gt;</sourceline>
        <sourceline coveredcount="0">											 &lt;input type="hidden" value="' . $view . '" id="view"/&gt;</sourceline>
        <sourceline coveredcount="0">											 &lt;input type="button" value="Search" onclick="javascript:AgilePHP.ORM.search(' . ((strpos($controller, '/') ? 'true' : 'false'))  . ')"/&gt;</sourceline>
        <sourceline coveredcount="0">										&lt;/div&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;table class="agilephpTable" border="0" width="100%"&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">												$flag = false;</sourceline>
        <sourceline coveredcount="0">									     	    foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">									     	    		if(!$table-&gt;isVisible($column-&gt;getModelPropertyName())) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   	   			      			    	if(!$flag) $xsl .= '&lt;tr class="agilephpHeader"&gt;';</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			        $flag = true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   	   			      			        if($column-&gt;isSortable()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   	   			      			           $display = null;  // rendered content</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			           $arrow = null;    // display an HTML arrow on active sort columns</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			           if($column-&gt;getName() == $order['column']) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   	   			      			         	  $arrow = $order['direction'] == 'ASC' ? '&amp;#8593;' : '&amp;#8595;';</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			         	  $display = ucfirst($column-&gt;getViewDisplayName()) . ' ' . $arrow;</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			           }</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			           else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   	   			      			         	  $display = ucfirst($column-&gt;getViewDisplayName());</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			           }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				 	   	   			      			         $xsl .= '&lt;td style="font-weight: bold; padding-left: 5px; padding-right: 5px;"&gt;</sourceline>
        <sourceline coveredcount="0">				 	   	   			      			         			&lt;a href="' . $requestBase . '/' .</sourceline>
        <sourceline coveredcount="0">				 	   	   			      			         			 	$controller . '/sort/' . $column-&gt;getName() . ($order['direction'] ? '/' . $order['direction'] : '') . '"&gt;' .</sourceline>
        <sourceline coveredcount="0">				 	   	   			      			         			 	$display . '&lt;/a&gt;&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			         }</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			         else</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			         	$xsl .= '&lt;td style="font-weight: bold; padding-left: 5px; padding-right: 5px;"&gt;' . ucfirst($column-&gt;getViewDisplayName()) . '&lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">									     	    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">												$xsl .= '&lt;td colspan="2" style="font-weight: bold;"&gt;Actions&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">													   &lt;/tr&gt;</sourceline>
        <sourceline coveredcount="0">													&lt;xsl:apply-templates select="/ResultList/Model/' . $modelName . '"/&gt;</sourceline>
        <sourceline coveredcount="0">										&lt;/table&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;xsl:apply-templates select="/ResultList/Pagination"/&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;table border="0"&gt;</sourceline>
        <sourceline coveredcount="0">											&lt;tr&gt;</sourceline>
        <sourceline coveredcount="0">												&lt;td&gt;&lt;input type="button" onclick="location.href= \'' . $requestBase . '/' . $controller . '/add/' . $this-&gt;getPage() . '\';" value="Create ' . $table-&gt;getViewDisplayName() . '"/&gt;&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">											&lt;/tr&gt;</sourceline>
        <sourceline coveredcount="0">										&lt;/table&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						   $xsl .= '&lt;/xsl:template&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">									&lt;xsl:template match="' . $modelName . '"&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;tr&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;xsl:choose&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											&lt;xsl:when test="(position() mod 2 = 1)"&gt;</sourceline>
        <sourceline coveredcount="0">												&lt;xsl:attribute name="class"&gt;agilephpRow1&lt;/xsl:attribute&gt;</sourceline>
        <sourceline coveredcount="0">												&lt;xsl:attribute name="onmouseover"&gt;AgilePHP.ORM.setStyle(this, \'agilephpHighlight\');&lt;/xsl:attribute&gt;</sourceline>
        <sourceline coveredcount="0">												&lt;xsl:attribute name="onmouseout"&gt;AgilePHP.ORM.setStyle(this, \'agilephpRow1\');&lt;/xsl:attribute&gt;</sourceline>
        <sourceline coveredcount="0">											&lt;/xsl:when&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											&lt;xsl:otherwise&gt;</sourceline>
        <sourceline coveredcount="0">												&lt;xsl:attribute name="class"&gt;agilephpRow2&lt;/xsl:attribute&gt;</sourceline>
        <sourceline coveredcount="0">												&lt;xsl:attribute name="onmouseover"&gt;AgilePHP.ORM.setStyle(this, \'agilephpHighlight\');&lt;/xsl:attribute&gt;</sourceline>
        <sourceline coveredcount="0">												&lt;xsl:attribute name="onmouseout"&gt;AgilePHP.ORM.setStyle(this, \'agilephpRow2\');&lt;/xsl:attribute&gt;</sourceline>
        <sourceline coveredcount="0">											&lt;/xsl:otherwise&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;/xsl:choose&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						   					foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								     	    	   if(!$table-&gt;isVisible($column-&gt;getModelPropertyName())) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   	   			      			   if($column-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   	   			      			      $namespace = explode('\\', $column-&gt;getForeignKey()-&gt;getReferencedTableInstance()-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			      $fModelName = array_pop($namespace);</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			      $fkey = $column-&gt;getForeignKey();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   	   			      			      if($column-&gt;isPrimaryKey()) $primaryAndForeignKey = true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   	   			      			      switch($fkey-&gt;getType()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				 	   	   			      			     	 case 'one-to-one':</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				 	   	   			      			     	      $xsl .= '&lt;td&gt;</sourceline>
        <sourceline coveredcount="0">				 	   	   			      			     	  		          &lt;xsl:if test="' . $fModelName . '/' . $fkey-&gt;getReferencedColumn() . ' != \'\'"&gt;</sourceline>
        <sourceline coveredcount="0">							 	   	   			      			      		       &lt;a href="' . $requestBase . '/' . $fkey-&gt;getReferencedController() . '/read/' . $fkeyXslValues . '"&gt;' .</sourceline>
        <sourceline coveredcount="0">							 	   	   			      			     	  				  $fkey-&gt;getReferencedTableInstance()-&gt;getViewDisplayName() .  '&lt;/a&gt;</sourceline>
        <sourceline coveredcount="0">							 	   	   			      			      	      &lt;/xsl:if&gt;</sourceline>
        <sourceline coveredcount="0">							 	   	   			      			           &lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">						 	   	   			      			 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	   	   			      			 case 'one-to-many':</sourceline>
        <sourceline coveredcount="0">						 	   	   			      			 case 'many-to-one':</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	   	   			      			  	  $xsl .= '&lt;td&gt;</sourceline>
        <sourceline coveredcount="0">						 	   	   			      			        			&lt;xsl:if test="' . $fModelName . '/' . $fkey-&gt;getReferencedColumn() . ' != \'\'"&gt;</sourceline>
        <sourceline coveredcount="0">						 	   	   			      			     	 				&lt;a href="' . $requestBase . '/' . $fkey-&gt;getReferencedController() .</sourceline>
        <sourceline coveredcount="0">						 	   	   			      			     	 						'/read/{' . $fModelName . '/' . $fkey-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName() . '}"&gt;' .</sourceline>
        <sourceline coveredcount="0">						 	   	   			      			     	 						$fkey-&gt;getReferencedTableInstance()-&gt;getViewDisplayName() . '&lt;/a&gt;</sourceline>
        <sourceline coveredcount="0">						 	   	   			      			     	 			&lt;/xsl:if&gt;</sourceline>
        <sourceline coveredcount="0">						 	   	   			      			  	 		  &lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">						 	   	   			      			 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				 	   	   			      			     	 default:</sourceline>
        <sourceline coveredcount="0">				 	   	   			      			     	 	throw new FrameworkException('Unsupported relationship type \'' . $fkey-&gt;getType() . '\'.');</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			     	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					 	   	   			      			 continue;</sourceline>
        <sourceline coveredcount="0">			 	   	   			      			     }</sourceline>
        <sourceline coveredcount="0">								     	    		 $xsl .= '&lt;td&gt;</sourceline>
        <sourceline coveredcount="0">																&lt;xsl:value-of select="' . $column-&gt;getModelPropertyName() . '"/&gt;</sourceline>
        <sourceline coveredcount="0">															  &lt;/td&gt;';</sourceline>
        <sourceline coveredcount="0">								     	    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							       $xsl .= '&lt;td&gt;</sourceline>
        <sourceline coveredcount="0">												&lt;a href="' . $requestBase . '/' . $controller . '/edit/' . $pkeyXslValues . '/' . $this-&gt;getPage() . '"&gt;Edit&lt;/a&gt;</sourceline>
        <sourceline coveredcount="0">											&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">											&lt;td&gt;</sourceline>
        <sourceline coveredcount="0">												&lt;a href="JavaScript:AgilePHP.ORM.confirmDelete( \'' . $requestBase . '\', \'' . $pkeyXslValues . '\', \'' . $this-&gt;getPage() . '\', \'' . $controller . '\', \'delete\');"&gt;Delete&lt;/a&gt;</sourceline>
        <sourceline coveredcount="0">											&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">										&lt;/tr&gt;</sourceline>
        <sourceline coveredcount="0">									&lt;/xsl:template&gt;</sourceline>
        <sourceline coveredcount="0">								&lt;/xsl:stylesheet&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				   Log::debug('BaseModelXslController::getModelListXSL Returning ' . $xsl);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   return $xsl;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">		  * Returns an XSL stylesheet used for add and update actions using the Form component.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param string $controller Optional controller responsible for edits. Defaults to the extension controller</sourceline>
        <sourceline coveredcount="0">		  * @return String The XSL stylesheet.</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getModelFormXSL($controller = null, $action = null, $view = 'admin') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       $table = ORM::getTableByModel($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	     	       $fkeyXslValues = $this-&gt;getSerializedForeignKeyValuesAsXSL($table);</sourceline>
        <sourceline coveredcount="0">	     	       $pkeyValues = $this-&gt;getSerializedPrimaryKeyValues($table);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       // If this is a many to many relationship, primary keys are foreign key values</sourceline>
        <sourceline coveredcount="0">	     	       $pkeys = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">	     	       $fkeys = $table-&gt;getForeignKeyColumns();</sourceline>
        <sourceline coveredcount="0">	     	       foreach($fkeys as $fColumn) {</sourceline>
        <sourceline coveredcount="0">	     	           foreach($pkeys as $pColumn) {</sourceline>
        <sourceline coveredcount="0">	     	              if($fColumn-&gt;getName() == $pColumn-&gt;getName()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	                  $pkeyValues = preg_replace('/{/', '{' . $this-&gt;getModelName() . '/', $fkeyXslValues);</sourceline>
        <sourceline coveredcount="0">	     	                  break;</sourceline>
        <sourceline coveredcount="0">	     	              }</sourceline>
        <sourceline coveredcount="0">	     	           }</sourceline>
        <sourceline coveredcount="0">	     	       }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       $action = AgilePHP::getRequestBase() . '/{/Form/controller}/{/Form/action}/' . $pkeyValues . '/' . $this-&gt;getPage();</sourceline>
        <sourceline coveredcount="0">	     	       $token = Scope::getRequestScope()-&gt;createToken();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       // php namespace support</sourceline>
        <sourceline coveredcount="0">	     	       $namespace = explode('\\', $this-&gt;getModelName());</sourceline>
        <sourceline coveredcount="0">	     	       $name = array_pop($namespace);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       $form = $table-&gt;hasBlobColumn() ? new Form($this-&gt;getModel(), 'frm' . $name, $name, $action, 'multipart/form-data', $token)</sourceline>
        <sourceline coveredcount="0">	     	       							       : new Form($this-&gt;getModel(), 'frm' . $name, $name, $action, null, $token);</sourceline>
        <sourceline coveredcount="0">				   $form-&gt;setMode($this-&gt;getModelPersistenceAction());</sourceline>
        <sourceline coveredcount="0">	     	       $xsl = $form-&gt;getXSL($pkeyValues, $this-&gt;getPage());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       Log::debug('BaseModelXslController::getModelFormXSL Returning ' . $xsl);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       return $xsl;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Returns an XSL stylesheet used for read-only (this is the Read in CRUD).</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @return An XSL stylesheet used for read operations</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getModelAsReadOnlyXSL($controller = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	               if(!$controller) $controller = MVC::getController();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       $table = ORM::getTableByModelName($this-&gt;getModelName());</sourceline>
        <sourceline coveredcount="0">	     	       $fkeyXslValues = $this-&gt;getSerializedForeignKeyValuesAsXSL($table);</sourceline>
        <sourceline coveredcount="0">	     	       $pkeyValues = $this-&gt;getSerializedPrimaryKeyValues($table);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       // If this is a many to many relationship, primary keys are foreign key values</sourceline>
        <sourceline coveredcount="0">	     	       $pkeys = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">	     	       $fkeys = $table-&gt;getForeignKeyColumns();</sourceline>
        <sourceline coveredcount="0">	     	       foreach($fkeys as $fColumn) {</sourceline>
        <sourceline coveredcount="0">	     	           foreach($pkeys as $pColumn) {</sourceline>
        <sourceline coveredcount="0">	     	              if($fColumn-&gt;getName() == $pColumn-&gt;getName()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	                  $pkeyValues = preg_replace('/{/', '{' . $this-&gt;getModelName() . '/', $fkeyXslValues);</sourceline>
        <sourceline coveredcount="0">	     	                  break;</sourceline>
        <sourceline coveredcount="0">	     	              }</sourceline>
        <sourceline coveredcount="0">	     	           }</sourceline>
        <sourceline coveredcount="0">	     	       }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       $requestBase = AgilePHP::getRequestBase();</sourceline>
        <sourceline coveredcount="0">	     	       $action = $this-&gt;getModelPersistenceAction();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       // php namespace support</sourceline>
        <sourceline coveredcount="0">	     	       $namespace = explode('\\', $this-&gt;getModelName());</sourceline>
        <sourceline coveredcount="0">	     	       $modelName = array_pop($namespace);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 	   $xsl = '&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							    &lt;xsl:template match="Form"&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				    				$xsl .= '&lt;table class="agilephpTable" border="0" cellpadding="3"&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 	   	  						foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  			 	   	  							if($column-&gt;isVisible() == false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  			 	   	  								if($column-&gt;isPrimaryKey())</sourceline>
        <sourceline coveredcount="0">	  			 	   	  									$xsl .= '&lt;input type="hidden" name="' . $column-&gt;getModelPropertyName() . '" value="{/Form/' . $modelName . '/' . $column-&gt;getModelPropertyName() . '}"/&gt;';</sourceline>
        <sourceline coveredcount="0">	  			 	   	  								continue;</sourceline>
        <sourceline coveredcount="0">	  			 	   	  							}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  			 	   	  							if($column-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  			 	   	  							   $xsl .= '&lt;tr&gt;</sourceline>
        <sourceline coveredcount="0">    	  			 	   	  				     					&lt;td&gt;' . ucfirst($table-&gt;getDisplayNameByProperty($column-&gt;getModelPropertyName())) . '&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">    	  			 	   	  				     		   			&lt;td&gt;&lt;xsl:value-of select="/Form/' . $modelName . '/' . $column-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName() . '" /&gt;&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">    	  			 	   	  				     		    	&lt;/tr&gt;';</sourceline>
        <sourceline coveredcount="0">	  			 	   	  							   continue;</sourceline>
        <sourceline coveredcount="0">	  			 	   	  							}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  			 	   	  				     		$xsl .= '&lt;tr&gt;</sourceline>
        <sourceline coveredcount="0">	  			 	   	  				     					&lt;td&gt;' . ucfirst($table-&gt;getDisplayNameByProperty($column-&gt;getModelPropertyName())) . '&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">	  			 	   	  				     		   			&lt;td&gt;&lt;xsl:value-of select="/Form/' . $modelName . '/' . $column-&gt;getModelPropertyName() . '" /&gt;&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">	  			 	   	  				     		    	&lt;/tr&gt;';</sourceline>
        <sourceline coveredcount="0">	  			 	   	  						}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  			 	   	  						$xsl .= '&lt;tr&gt;</sourceline>
        <sourceline coveredcount="0">								 							&lt;td&gt;&amp;#8201;&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">															&lt;td&gt;';</sourceline>
        <sourceline coveredcount="0">	  			 	   	  						$xsl .= (($action == 'persist') ? '&lt;input type="submit" value="Create"/&gt; &lt;input type="button" value="Cancel" onclick="javascript:history.go(-1);"/&gt;'</sourceline>
        <sourceline coveredcount="0">  			 	   	  													 : '&lt;input type="button" value="Edit" onclick="javascript:location.href=\'' . $requestBase .</sourceline>
        <sourceline coveredcount="0">  			 	   	  													   '/' . $controller . '/edit/' . $pkeyValues . '\';"/&gt;</sourceline>
        <sourceline coveredcount="0">																			&lt;input type="button" value="Delete" onclick="javascript:AgilePHP.ORM.confirmDelete(\'' . $requestBase .</sourceline>
        <sourceline coveredcount="0">  			 	   	  													   '\', \'' . $pkeyValues . '\', \'' . $this-&gt;getPage() .</sourceline>
        <sourceline coveredcount="0">  			 	   	  													   '\', \'{/Form/controller}\', \'delete\')"/&gt;</sourceline>
        <sourceline coveredcount="0">  			 	   	  													   &lt;input type="button" value="Cancel" onclick="javascript:history.go(-1);"/&gt;');</sourceline>
        <sourceline coveredcount="0">												$xsl .= '&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">														&lt;/tr&gt;';</sourceline>
        <sourceline coveredcount="0">				$xsl .= '			&lt;/table&gt;</sourceline>
        <sourceline coveredcount="0">				  	  		&lt;/xsl:template&gt;</sourceline>
        <sourceline coveredcount="0">						&lt;/xsl:stylesheet&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				Log::debug('BaseModelXslController::getModelAsReadOnlyXSL Returning ' . $xsl);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	    return $xsl;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns an XSL stylesheet used for pagination.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return Pagination XSL stylesheet</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getPaginationXSL() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	               $requestBase = AgilePHP::getRequestBase();</sourceline>
        <sourceline coveredcount="0">	     	       $xsl = '&lt;xsl:template match="Pagination"&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								&lt;table class="agilephpPaginationTable" border="0" style="padding-top: 10px;"&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">									&lt;tr class="agilephpPaginationHeader"&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								    			    &lt;xsl:if test="previousExists = 1"&gt;</sourceline>
        <sourceline coveredcount="0">								 						&lt;td&gt;&lt;a href="' . $requestBase . '/{controller}/{action}/{page - 1}/{params}"&gt;Previous&lt;/a&gt;&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">													&lt;/xsl:if&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">													&lt;xsl:call-template name="pageNumberGenerator"&gt;</sourceline>
        <sourceline coveredcount="0">														&lt;xsl:with-param name="page" select="/ResultList/Pagination/page"/&gt;</sourceline>
        <sourceline coveredcount="0">											   			&lt;xsl:with-param name="action" select="/ResultList/Pagination/action"/&gt;</sourceline>
        <sourceline coveredcount="0">											   			&lt;xsl:with-param name="pageCount" select="/ResultList/Pagination/pageCount"/&gt;</sourceline>
        <sourceline coveredcount="0">											   			&lt;xsl:with-param name="controller" select="/ResultList/Pagination/controller"/&gt;</sourceline>
        <sourceline coveredcount="0">											   			&lt;xsl:with-param name="params" select="/ResultList/Pagination/params"/&gt;</sourceline>
        <sourceline coveredcount="0">											  		&lt;/xsl:call-template&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											       	&lt;xsl:if test="nextExists = 1"&gt;</sourceline>
        <sourceline coveredcount="0">											    		&lt;td&gt;&lt;a href="' . $requestBase . '/{controller}/{action}/{page + 1}/{params}"&gt;Next&lt;/a&gt;&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">											  		&lt;/xsl:if&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											  	&lt;/tr&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											  &lt;/table&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">											  &lt;table border="0" class="agilephpTable"&gt;</sourceline>
        <sourceline coveredcount="0">												  	&lt;tr class="agilephpPaginationRecordCount"&gt;</sourceline>
        <sourceline coveredcount="0">												    	&lt;xsl:choose&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">												    		&lt;xsl:when test="recordEnd &amp;gt; recordCount"&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">												    			&lt;td style="padding-top: 5px;"&gt;Displaying &lt;xsl:value-of select="recordStart" /&gt; through &lt;xsl:value-of select="recordCount" /&gt; of &lt;xsl:value-of select="recordCount" /&gt; records.&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">												    		&lt;/xsl:when&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">												    		&lt;xsl:otherwise&gt;</sourceline>
        <sourceline coveredcount="0">												    			&lt;td style="padding-top: 5px;"&gt;Displaying &lt;xsl:value-of select="recordStart" /&gt; through &lt;xsl:value-of select="recordEnd" /&gt; of &lt;xsl:value-of select="recordCount" /&gt; records.&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">												    		&lt;/xsl:otherwise&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">												    	&lt;/xsl:choose&gt;</sourceline>
        <sourceline coveredcount="0">													&lt;/tr&gt;</sourceline>
        <sourceline coveredcount="0">											 &lt;/table&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">									&lt;/xsl:template&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								    &lt;xsl:template name="pageNumberGenerator"&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;xsl:param name="page" select="1"/&gt;</sourceline>
        <sourceline coveredcount="0">										&lt;xsl:param name="pageCount" select="1"/&gt;</sourceline>
        <sourceline coveredcount="0">										&lt;xsl:param name="action" select="index"/&gt;</sourceline>
        <sourceline coveredcount="0">										&lt;xsl:param name="controller" select="IndexController"/&gt;</sourceline>
        <sourceline coveredcount="0">										&lt;xsl:param name="params"/&gt;</sourceline>
        <sourceline coveredcount="0">										&lt;xsl:param name="i" select="1"/&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;xsl:param name="maxResults" select="recordEnd - recordStart"/&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;xsl:if test="$i = $page"&gt;</sourceline>
        <sourceline coveredcount="0">								   			&lt;td&gt;&lt;xsl:value-of select="$i" /&gt;&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">								   		&lt;/xsl:if&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								   		&lt;xsl:if test="$i != $page and not($i &amp;lt; ($page - ($maxResults + 1)))"&gt;</sourceline>
        <sourceline coveredcount="0">								      			&lt;td&gt;&lt;a href="' . $requestBase . '/{$controller}/{$action}/{$i}/{$params}"&gt;&lt;xsl:value-of select="$i" /&gt;&lt;/a&gt;&lt;/td&gt;</sourceline>
        <sourceline coveredcount="0">										&lt;/xsl:if&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										&lt;xsl:if test="not($i &gt;= $pageCount or $i &gt; ($page + $maxResults))"&gt;</sourceline>
        <sourceline coveredcount="0">								   			&lt;xsl:call-template name="pageNumberGenerator"&gt;</sourceline>
        <sourceline coveredcount="0">								   				&lt;xsl:with-param name="i" select="$i + 1"/&gt;</sourceline>
        <sourceline coveredcount="0">								   				&lt;xsl:with-param name="page" select="$page"/&gt;</sourceline>
        <sourceline coveredcount="0">								   				&lt;xsl:with-param name="action" select="$action"/&gt;</sourceline>
        <sourceline coveredcount="0">								   				&lt;xsl:with-param name="pageCount" select="$pageCount"/&gt;</sourceline>
        <sourceline coveredcount="0">												&lt;xsl:with-param name="controller" select="$controller"/&gt;</sourceline>
        <sourceline coveredcount="0">												&lt;xsl:with-param name="params" select="$params"/&gt;</sourceline>
        <sourceline coveredcount="0">								   			&lt;/xsl:call-template&gt;</sourceline>
        <sourceline coveredcount="0">								    	&lt;/xsl:if&gt;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								   &lt;/xsl:template&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       return $xsl;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Returns an 'AgilePHP serialized' string of primary key column (property names if</sourceline>
        <sourceline coveredcount="0">	   	  * exists otherwise the column name) suitable for use in xml/xsl controllers.</sourceline>
        <sourceline coveredcount="0">	   	  *</sourceline>
        <sourceline coveredcount="0">	   	  * @param Table $table Table instance used to get primary keys.</sourceline>
        <sourceline coveredcount="0">	   	  * @return The 'AgilePHP serialized' string of primary keys.</sourceline>
        <sourceline coveredcount="0">	   	  */</sourceline>
        <sourceline coveredcount="0">	  	private function getSerializedPrimaryKeyColumns(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		   $pkeyColumns = array();</sourceline>
        <sourceline coveredcount="0">   		   	   foreach($table-&gt;getPrimaryKeyColumns() as $column)</sourceline>
        <sourceline coveredcount="0">   		   		        array_push($pkeyColumns, $column-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   		   	   if(count($pkeyColumns))</sourceline>
        <sourceline coveredcount="0">   		   	 	   return implode('_', $pkeyColumns);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   		   	   return null;</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Returns an 'AgilePHP serialized' string of primary key values. This method</sourceline>
        <sourceline coveredcount="0">	  	  * uses the AgilePHP 'Scope' component (RequestScope) to pull in the values</sourceline>
        <sourceline coveredcount="0">	  	  * as they were submitted by the form (rendered by getModelFormXSL).</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @param Table $table The AgilePHP ORM 'Table' object to get the</sourceline>
        <sourceline coveredcount="0">	  	  * 					primary key columns for.</sourceline>
        <sourceline coveredcount="0">	  	  * @return An array of AgilePHP ORM 'Column' objects configured for</sourceline>
        <sourceline coveredcount="0">	  	  * 		the specified 'Table'.</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">		 private function getSerializedPrimaryKeyValues(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 		 $values = array();</sourceline>
        <sourceline coveredcount="0">		 		 $pkeyColumns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">		 		 for($i=0; $i&lt;count($pkeyColumns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 		   	 $accessor = 'get' . ucfirst($pkeyColumns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0">		 		   	 $value = $this-&gt;getModel()-&gt;$accessor();</sourceline>
        <sourceline coveredcount="0">		 		   	 if(is_object($value)) continue; // Foreign key that will be handled by getSerializedForeignKeyValuesAsXSL</sourceline>
        <sourceline coveredcount="0">					 array_push($values, $value);</sourceline>
        <sourceline coveredcount="0">				 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				 if(count($values))</sourceline>
        <sourceline coveredcount="0">		 		 	return implode('_', $values);</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Returns an 'AgilePHP serialized' string of primary key values suitable for</sourceline>
        <sourceline coveredcount="0">	  	  * use in xml/xsl controllers. These values are replaced by the XML data once</sourceline>
        <sourceline coveredcount="0">	  	  * a transformation occurrs.</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @param String $pkeyFields A serialized array of primary key values are returned by</sourceline>
        <sourceline coveredcount="0">	  	  * 			  		      getSerializedPrimaryKeyColumns.</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @return The XSL string</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">	     private function getSerializedPrimaryKeyColumnsAsXSL($pkeyFields) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		 $xsl = null;</sourceline>
        <sourceline coveredcount="0">	     		 $pieces = explode('_', $pkeyFields);</sourceline>
        <sourceline coveredcount="0">	     	     for($i=0; $i&lt;count($pieces); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       	  $xsl .= '{' . $pieces[$i] . '}';</sourceline>
        <sourceline coveredcount="0">	     	       	  if(($i+1) &lt; count($pieces))</sourceline>
        <sourceline coveredcount="0">	     	       	  	  $xsl .= '_';</sourceline>
        <sourceline coveredcount="0">	     	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	   		   	 return $xsl;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Returns an 'AgilePHP serialized' string of primary key values for a foreign</sourceline>
        <sourceline coveredcount="0">	  	  * table reference.</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @param Table $table The table instance used to extract foreign key values</sourceline>
        <sourceline coveredcount="0">	  	  * @return An 'AgilePHP serialized' string for use in XSL rendering</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">		 private function getSerializedForeignKeyValuesAsXSL(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 		 $keys = array();</sourceline>
        <sourceline coveredcount="0">		 		 $fkeys = $table-&gt;getForeignKeyColumns();</sourceline>
        <sourceline coveredcount="0">		 		 for($i=0; $i&lt;count($fkeys); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 		     $fkey = $fkeys[$i]-&gt;getForeignKey();</sourceline>
        <sourceline coveredcount="0">		 		     array_push($keys, '{' . $fkey-&gt;getReferencedTableInstance()-&gt;getModel() . '/' . $fkey-&gt;getReferencedColumn() . '}');</sourceline>
        <sourceline coveredcount="0">		 		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 		 return implode('_', $keys);</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="PHTMLRenderer" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="PHTMLRenderer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/mvc/PHTMLRenderer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides base rendering implementation for PHTML (PHP) views.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class PHTMLRenderer extends BaseRenderer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * Renders a view by dumping all 'store' variables to locally scoped (page) variables. The view</sourceline>
        <sourceline coveredcount="0">	   * is expected to be in &lt;webapp&gt;/view.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $view The view which is rendered from the web app's 'view' directory</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function render($view) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      	 	 $path = AgilePHP::getWebRoot() . DIRECTORY_SEPARATOR . 'view' . DIRECTORY_SEPARATOR . $view . '.phtml';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      	 	 if(!file_exists($path))</sourceline>
        <sourceline coveredcount="0">      	 	    throw new FrameworkException('Error rendering application view. Path does not exist ' . $path);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      	 	 foreach($this-&gt;getStore() as $key =&gt; $value)</sourceline>
        <sourceline coveredcount="0">	                 $$key = $value;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         //Log::debug('PHTMLRenderer::render executed with parameter $view = \'' . $view . '\'');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         // Prevent local variables from being visible to the view</sourceline>
        <sourceline coveredcount="0">	         unset($f, $view, $key, $value);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         require $path;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="XSLTRenderer" methodcount="6" methodscovered="0" statementcount="0" statementscovered="0" totalcount="6" totalcovered="0">
      <sourcefile name="XSLTRenderer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/mvc/XSLTRenderer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides base implementation for XSLT transformations</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class XSLTRenderer extends BaseRenderer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * Renders a view by performing an XSLT transformation using string literal</sourceline>
        <sourceline coveredcount="0">	   * XSL and XML values.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $xsl XSL document</sourceline>
        <sourceline coveredcount="0">	   * @param string $xml XML string used to apply data to the XSL template</sourceline>
        <sourceline coveredcount="0">	   * @param boolean $declaration Optional flag used to specify whether or not an xml doctype</sourceline>
        <sourceline coveredcount="0">	   *                declaration should be included in the transformation. Defaults to false (no declaration).</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function render($xsl, $xml = '', $declaration = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      	 	 $dom = new DomDocument();</sourceline>
        <sourceline coveredcount="0">			 $dom-&gt;loadXML($xsl);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $xp = new XSLTProcessor();</sourceline>
        <sourceline coveredcount="0">			 $xsl = $xp-&gt;importStylesheet($dom);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $doc = new DomDocument();</sourceline>
        <sourceline coveredcount="0">			 $doc-&gt;loadXML($xml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $xslt = $xp-&gt;transformToXml($doc);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 if(!$declaration) $xslt = preg_replace('/&lt;\?xml.*\?&gt;/', '', $xslt);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 print $xslt;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Renders a view by performing an XSLT transformation. The XSL document</sourceline>
        <sourceline coveredcount="0">	   * is read in from the web application view directory.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $xsl The name of the XSL document located in the web app view directory</sourceline>
        <sourceline coveredcount="0">	   * @param string $xml XML string used to apply data to the XSL template</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function renderXsl($xsl, $xml='') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      	 	 $dom = new DomDocument();</sourceline>
        <sourceline coveredcount="0">			 $dom-&gt;load(AgilePHP::getWebRoot() . '/view/' . $xsl . '.xsl');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $xp = new XSLTProcessor();</sourceline>
        <sourceline coveredcount="0">			 $xsl = $xp-&gt;importStylesheet($dom);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $doc = new DomDocument();</sourceline>
        <sourceline coveredcount="0">			 $doc-&gt;loadXML($xml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $xslt = $xp-&gt;transformToXml($doc);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 print $xslt;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Renders the specified XML document with a &lt;xsl:stylesheet&gt; element which</sourceline>
        <sourceline coveredcount="0">	   * uses the specified $xsl parameter in its href attribute. This transformation</sourceline>
        <sourceline coveredcount="0">	   * is peformed by the client browser rather than PHP.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $xsl A valid href attribute location pointing to an XSL document that the</sourceline>
        <sourceline coveredcount="0">	   * 				    client will use to transform the XML data into HTML.</sourceline>
        <sourceline coveredcount="0">	   * @param string $xml XML string used to apply data to the XSL template</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function clientTransform($xsl, $xml='') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      	     $out = '&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;';</sourceline>
        <sourceline coveredcount="0">      		 $out = '&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;' . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">      		 $out .= '&lt;?xml-stylesheet type="text/xsl" href="' . $xsl . '"?&gt;' . PHP_EOL;</sourceline>
        <sourceline coveredcount="0">      		 $out .= $xml;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      		 header('content-type: text/xml');</sourceline>
        <sourceline coveredcount="0">      		 print $out;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Performs an XSLT transformation and returns the rendered HTML using the specified</sourceline>
        <sourceline coveredcount="0">	   * XSL and XML string values.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $xsl XSL string template used to create HTML</sourceline>
        <sourceline coveredcount="0">	   * @param String $xml XML string used to apply data to the XSL template</sourceline>
        <sourceline coveredcount="0">	   * @param boolean $declaration Optional flag used to specify whether or not an xml doctype</sourceline>
        <sourceline coveredcount="0">	   *                declaration should be included in the transformation. Defaults to false (no declaration).</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The rendered HTML from the XSLT transformation</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function transform($xsl, $xml = '', $declaration = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    	     set_error_handler('XSLTRenderer::ErrorHandler');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      	 	 $dom = new DomDocument();</sourceline>
        <sourceline coveredcount="0">	 		 $dom-&gt;loadXML($xsl);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $xp = new XSLTProcessor();</sourceline>
        <sourceline coveredcount="0">			 $xsl = $xp-&gt;importStylesheet($dom);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $doc = new DomDocument();</sourceline>
        <sourceline coveredcount="0">			 try {</sourceline>
        <sourceline coveredcount="0">			 		$doc-&gt;loadXML($xml);</sourceline>
        <sourceline coveredcount="0">			 }</sourceline>
        <sourceline coveredcount="0">			 catch(FrameworkException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   $doc-&gt;loadXML(addslashes($xml));</sourceline>
        <sourceline coveredcount="0">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $xslt = $xp-&gt;transformToXml($doc);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 restore_error_handler();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 if(!$declaration) $xslt = preg_replace('/&lt;\?xml.*\?&gt;/', '', $xslt);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 return $xslt;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Performs an XSLT transformation and returns the rendered HTML using the specified</sourceline>
        <sourceline coveredcount="0">	   * XSL view and XML string values.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $xsl XSL view name as it lives in the web app view directory</sourceline>
        <sourceline coveredcount="0">	   * @param String $xml  XML string used to apply data to the XSL template</sourceline>
        <sourceline coveredcount="0">	   * @return string The transformed HTML</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function transformXsl($xsl, $xml='') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             set_error_handler('XSLTRenderer::ErrorHandler');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      	 	 $dom = new DomDocument();</sourceline>
        <sourceline coveredcount="0">			 $dom-&gt;load(AgilePHP::getWebRoot() . '/view/' . $xsl . '.xsl');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $xp = new XSLTProcessor();</sourceline>
        <sourceline coveredcount="0">			 $xsl = $xp-&gt;importStylesheet($dom);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $doc = new DomDocument();</sourceline>
        <sourceline coveredcount="0">             try {</sourceline>
        <sourceline coveredcount="0">			 		$doc-&gt;loadXML($xml);</sourceline>
        <sourceline coveredcount="0">			 }</sourceline>
        <sourceline coveredcount="0">			 catch(FrameworkException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	   $doc-&gt;loadXML(preg_replace('/\0/', '', $xml)); // serialized objects contain C \0 line terminators</sourceline>
        <sourceline coveredcount="0">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $xslt = $xp-&gt;transformToXml($doc);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 restore_error_handler();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 return $xslt;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * loadXml reports an error instead of throwing an exception when the xml is not well formed. This</sourceline>
        <sourceline coveredcount="0">	   * is a custom PHP error handling function which throws an FrameworkException instead of reporting</sourceline>
        <sourceline coveredcount="0">	   * a PHP error.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Integer $errno Error number</sourceline>
        <sourceline coveredcount="0">	   * @param String $errmsg Error message</sourceline>
        <sourceline coveredcount="0">	   * @param String $errfile The name of the file that caused the error</sourceline>
        <sourceline coveredcount="0">	   * @param Integer $errline The line number that caused the error</sourceline>
        <sourceline coveredcount="0">	   * @return false</sourceline>
        <sourceline coveredcount="0">	   * @throws FrameworkException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0"> 	  public static function ErrorHandler($errno, $errmsg, $errfile, $errline) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 	  	     if($errno == E_WARNING &amp;&amp; (substr_count($errmsg, 'DOMDocument::loadXML()') &gt; 0))</sourceline>
        <sourceline coveredcount="0">	    	    throw new FrameworkException($errmsg);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         return false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ExtFormRenderer" methodcount="3" methodscovered="0" statementcount="0" statementscovered="0" totalcount="3" totalcovered="0">
      <sourcefile name="ExtFormRenderer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/mvc/ExtFormRenderer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides base EXTJS form processing (formats response as JSON</sourceline>
        <sourceline coveredcount="0"> * as Ext expects).</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class ExtFormRenderer extends AJAXRenderer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $result;</sourceline>
        <sourceline coveredcount="0">	  private $errors;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initializes the ExtFormRenderer instance.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;result = new stdClass;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;errors = new stdClass;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets an error message which is rendered along with success:false response.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $message The error message</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0">	   * {"success": false, "reason": "$message"}</sourceline>
        <sourceline coveredcount="0">	   * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setError($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;errors-&gt;reason = $message;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;result-&gt;success = false;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;result-&gt;errors = $this-&gt;errors;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Renders a form response message.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param boolean $result True to render success:true, false to render success:false.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function render($result) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;result-&gt;success = ($result &amp;&amp; !property_exists($this-&gt;result, 'reason')) ? true : false;</sourceline>
        <sourceline coveredcount="0">	  		 if($this-&gt;getStore()) $this-&gt;result-&gt;data = $this-&gt;getStore();</sourceline>
        <sourceline coveredcount="0">	  		 parent::render($this-&gt;result);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="BaseRenderer" methodcount="3" methodscovered="0" statementcount="3" statementscovered="0" totalcount="6" totalcovered="0">
      <sourcefile name="BaseRenderer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/mvc/BaseRenderer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides base rendering implementation</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">abstract class BaseRenderer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 private $store = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Helper method to allow controllers to set variables</sourceline>
        <sourceline coveredcount="0">		  * which are dumped to a view during rendering.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param String $key The variable name</sourceline>
        <sourceline coveredcount="0">		  * @param mixed $value The variable value</sourceline>
        <sourceline coveredcount="0">		  * @return void</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">	  	 public function set($key, $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	      	$this-&gt;store[$key] = $value;</sourceline>
        <sourceline coveredcount="0">      	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      	 /**</sourceline>
        <sourceline coveredcount="0">      	  * Returns the value for the specified key.</sourceline>
        <sourceline coveredcount="0">      	  *</sourceline>
        <sourceline coveredcount="0">      	  * @param String $key The key to retrieve the value from</sourceline>
        <sourceline coveredcount="0">      	  * @return mixed The value stored in the $key index</sourceline>
        <sourceline coveredcount="0">      	  */</sourceline>
        <sourceline coveredcount="0">      	 public function get($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">      	 		return $this-&gt;store[$key];</sourceline>
        <sourceline coveredcount="0">      	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      	 /**</sourceline>
        <sourceline coveredcount="0">      	  * Returns the store which contains variable names with their associated</sourceline>
        <sourceline coveredcount="0">      	  * values set by one or more controllers.</sourceline>
        <sourceline coveredcount="0">      	  *</sourceline>
        <sourceline coveredcount="0">      	  * @return void</sourceline>
        <sourceline coveredcount="0">      	  */</sourceline>
        <sourceline coveredcount="0">      	 public function getStore() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">      	 	    return $this-&gt;store;</sourceline>
        <sourceline coveredcount="0">      	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">         abstract public function render($view);</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="BaseModelController" methodcount="31" methodscovered="0" statementcount="0" statementscovered="0" totalcount="31" totalcovered="0">
      <sourcefile name="BaseModelController.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/mvc/BaseModelController.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP :: MVC BaseModelController</sourceline>
        <sourceline coveredcount="0"> * Provides base implementation for model controllers.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">abstract class BaseModelController extends BaseController {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 protected $page;</sourceline>
        <sourceline coveredcount="0">		 protected $count;</sourceline>
        <sourceline coveredcount="0">		 protected $pageCount;</sourceline>
        <sourceline coveredcount="0">		 protected $resultCount;</sourceline>
        <sourceline coveredcount="0">		 protected $resultList;</sourceline>
        <sourceline coveredcount="0">		 protected $sql;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">         /**</sourceline>
        <sourceline coveredcount="0">	      * Sets the domain model the ORM is to manipulate.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param Object $model The domain model the ORM is to manipulate</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function setModel($model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	    $this-&gt;model = $model;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the table name for the model defined in the extension class</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return The database table name</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getTableName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       if(!$this-&gt;getModelName())</sourceline>
        <sourceline coveredcount="0">	     	           throw new FrameworkException('Property \'model\' must be defined in ORM ' . $this-&gt;getModelName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       return ORM::getTableByModelName($this-&gt;getModelName())-&gt;getName();</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">         /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the total number of records in the current result list.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return The number of records in the current result list</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getResultCount() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       return $this-&gt;resultCount;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns a result set from the database. The result list is returned as</sourceline>
        <sourceline coveredcount="0">	      * an array of stdClass objects, each representing a row in the database.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return An array of stdClass objects, eaching representing a row in the database</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getResultList() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       return $this-&gt;resultList;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the maximum number of records a result set will return</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return Integer The max number of records per result set</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getMaxResults() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   return ORM::getMaxResults();</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Sets the SQL statement to use when calling executeQuery.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param $sql A valid SQL statement</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function createQuery($sql) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       $this-&gt;sql = $sql;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Executes the current sql query as set by createQuery.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return PDOStatement The query result.</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function executeQuery() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	               Log::debug('BaseModelController::executeQuery ' . $this-&gt;sql);</sourceline>
        <sourceline coveredcount="0">	     	       return ORM::query($this-&gt;sql);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Executes an SQL count query for total number of records in the database.</sourceline>
        <sourceline coveredcount="0">	      * Initialize 'pageCount' and 'count' properties.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function executeCountQuery() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       $this-&gt;count = ORM::count($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">  			 	   $this-&gt;pageCount = ceil($this-&gt;count / ORM::getMaxResults());</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the current SQL query</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return The current SQL query</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getQuery() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   return $this-&gt;sql;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">		  * Sets the pagination page number and performs an SQL query to populate the 'resultList'</sourceline>
        <sourceline coveredcount="0">		  * and 'resultCount' properties with their appropriate values for the specified page.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param $pageNumber The page number</sourceline>
        <sourceline coveredcount="0">		  * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function setPage($pageNumber) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	    if(!is_numeric($pageNumber) || !$pageNumber)</sourceline>
        <sourceline coveredcount="0">	     	        $pageNumber = 1;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	    $this-&gt;page = $pageNumber;</sourceline>
        <sourceline coveredcount="0">				$this-&gt;executeCountQuery();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				if($this-&gt;page &gt; $this-&gt;pageCount)</sourceline>
        <sourceline coveredcount="0">				    $pageNumber = $this-&gt;pageCount;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				$offset = ($this-&gt;getPage() - 1) * ORM::getMaxResults();</sourceline>
        <sourceline coveredcount="0">	     	    if($offset &lt; 0) $offset = 0;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	 	     	ORM::setOffset($offset);</sourceline>
        <sourceline coveredcount="0">				$result = ORM::find($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				if(!$result) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				$this-&gt;resultList = $result;</sourceline>
        <sourceline coveredcount="0">				$this-&gt;resultCount = count($result);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				ORM::setGroupBy(null);</sourceline>
        <sourceline coveredcount="0">	  		 	ORM::setOrderBy(null, 'ASC');</sourceline>
        <sourceline coveredcount="0">	  		 	ORM::setRestrictions(array());</sourceline>
        <sourceline coveredcount="0">	  		 	ORM::setRestrictionsLogicOperator('AND');</sourceline>
        <sourceline coveredcount="0">	  		 	ORM::setComparisonLogicOperator('=');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				Log::debug('BaseModelController::setPage ' . $this-&gt;page);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the total number of records in the database table</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return Total number of records</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getCount() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       return $this-&gt;count;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the current page number</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return The current page number</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getPage() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   return ($this-&gt;page &gt; 0) ? $this-&gt;page : 0;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the total number of pages. This is calculated by dividing the total</sourceline>
        <sourceline coveredcount="0">	      * number of records by 'maxResults'.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return The total number of pages</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getPageCount() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       return ($this-&gt;pageCount &gt; 0) ? $this-&gt;pageCount : 0;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns boolean result based on whether or not a 'next page' result is available during</sourceline>
        <sourceline coveredcount="0">	      * a pagination request.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return True if there is a next page, false if this is the last page</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function nextExists() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       return $this-&gt;page &lt; $this-&gt;pageCount;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns boolean result based on whether or not a 'previous page' result is available during</sourceline>
        <sourceline coveredcount="0">	      * a pagination request.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return True if there is a previous page, false if this is the first page</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function previousExists() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   return $this-&gt;page != 0 &amp;&amp; $this-&gt;page != 1;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Sets the result list up with a 'next page' of a pagination request</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getNextResultList() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       $this-&gt;setPage($this-&gt;page + 1);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Sets the result list up with a 'previous page' of a pagination request</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getPreviousResultList() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       $this-&gt;setPage($this-&gt;page - 1);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Sets WHERE clause restrictions</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param array $restrictions An associative array containing WHERE clause restrictions. (For example: array('id' =&gt; 21))</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function setRestrictions(array $restrictions) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   ORM::setRestrictions($restrictions);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Sets the restriction operator (and|or) used in SQL WHERE clause.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param String $operator The logical operator to be used in SQL WHERE clause. Default is 'AND'. (AND|OR)</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function setRestrictionsLogicOperator($operator) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				   ORM::setRestrictionsLogicOperator($operator);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Sets the comparison operator (&lt;|&gt;|=|LIKE) used in SQL WHERE clause.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param $operator The logical comparison operator used is SQL where clauses. Default is '='.</sourceline>
        <sourceline coveredcount="0">		  * @return void</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">	     protected function setComparisonLogicOperator($operator) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       ORM::setComparisonLogicOperator($operator);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Sets the SQL 'group by' clause.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param String $column The column name to group the result set by</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function setGroupBy($column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   ORM::setGroupBy($column);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Sets the SQL 'order by' clause.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param String $column The column name to order the result set by</sourceline>
        <sourceline coveredcount="0">	      * $param String $direction The direction to sort the result set (ASC|DESC).</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function setOrderBy($column, $direction) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   ORM::setOrderBy($column, $direction);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns an associative array containing the current 'orderBy' clause. The results</sourceline>
        <sourceline coveredcount="0">	      * are returned with the name of the column as the index and the direction as the value.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return Array An associative array containing the name of the column to sort as the key/index</sourceline>
        <sourceline coveredcount="0">	      * 		and the direction of the sort order (ASC|DESC) as the value.</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getOrderBy() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   return ORM::getOrderBy();</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the model's class name.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return The class name of the model or null if a model has not been defined</sourceline>
        <sourceline coveredcount="0">	      * 		by the extension class.</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getModelName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   try {</sourceline>
        <sourceline coveredcount="0">	     		   		 $class = new ReflectionClass($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	     		   		 return $class-&gt;getName();</sourceline>
        <sourceline coveredcount="0">	     		   }</sourceline>
        <sourceline coveredcount="0">	     		   catch(ReflectionException $re) { }</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Search for an ActiveRecord for the model defined in the extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return Model $model Optional model instance to search on according to ActiveRecord state.</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function find($model = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   $m = ($model == null) ? $this-&gt;getModel() : $model;</sourceline>
        <sourceline coveredcount="0">	     		   $this-&gt;resultList = ORM::find($m);</sourceline>
        <sourceline coveredcount="0">				   $this-&gt;resultCount = count($this-&gt;resultList);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   return $this-&gt;resultList;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Persists a new model ActiveRecord defined in the extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function persist() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   $this-&gt;getModel()-&gt;persist();</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Merges the model defined in the extension class. The model must have</sourceline>
        <sourceline coveredcount="0">	      * its primary key properties defined for this operation to succeed.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function merge() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   $this-&gt;getModel()-&gt;merge();</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Deletes the model ActiveRecord defined in the extension class. The model</sourceline>
        <sourceline coveredcount="0">	      * must have its primary key properties defined for this operation to succeed.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function delete() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   $this-&gt;getModel()-&gt;delete();</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Clears the current model state.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function clear() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	           $table = ORM::getTableByModel($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	  	           $columns = $table-&gt;getColumns();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			       for($i=0; $i&lt;count($columns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     	 	    $mutator = $this-&gt;toMutator($columns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0">	  	     	 	    $this-&gt;getModel()-&gt;$mutator(null);</sourceline>
        <sourceline coveredcount="0">	  	           }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	           Log::debug('BaseModelController::clear');</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Creates an accessor method from the $property parameter. The $property</sourceline>
        <sourceline coveredcount="0">	      * will be returned with the prefix 'get' and the first letter of the property</sourceline>
        <sourceline coveredcount="0">	      * uppercased.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param $property The name of the property to convert to an accessor method name</sourceline>
        <sourceline coveredcount="0">	      * @return The accessor string</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function toAccessor($property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   return 'get' . ucfirst($property);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Creates a mutator method from the $property parameter. The $property</sourceline>
        <sourceline coveredcount="0">	      * will be returned with the prefix 'set' and the first letter of the property</sourceline>
        <sourceline coveredcount="0">	      * uppercased.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param $property The name of the property to convert to a mutator method name</sourceline>
        <sourceline coveredcount="0">	      * @return The mutator string</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function toMutator($property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   return 'set' . ucfirst($property);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     abstract protected function getModel();</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="BaseController" methodcount="7" methodscovered="0" statementcount="13" statementscovered="0" totalcount="20" totalcovered="0">
      <sourcefile name="BaseController.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/mvc/BaseController.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides common rendering implementations and defines an abstract</sourceline>
        <sourceline coveredcount="0"> * "index" method.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">abstract class BaseController {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     protected $renderer = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Creates a new instance of default renderer</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	        $this-&gt;renderer = MVC::createDefaultRenderer();</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the controllers view renderer.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getRenderer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     		   return $this-&gt;renderer;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Shorthand / alias for getRenderer()-&gt;set</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function set($key, $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	            $this-&gt;renderer-&gt;set($key, $value);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Shorthand / alias for getRenderer()-&gt;render</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function render($view) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	            $this-&gt;renderer-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">		  * Creates an instance of the specified renderer the controller will use to render views.</sourceline>
        <sourceline coveredcount="0">		  * This renderer is loaded from the AgilePHP framework.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param String $renderer The name of a renderer the controller will use to render views</sourceline>
        <sourceline coveredcount="0">		  * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function createRenderer($renderer) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     	       $this-&gt;renderer = MVC::createRenderer($renderer);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">		  * Creates an instance of the specified custom renderer the controller will use to render views.</sourceline>
        <sourceline coveredcount="0">		  * This renderer is loaded from the application 'classes' directory.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param String $renderer The name of a custom renderer the controller will use to render views.</sourceline>
        <sourceline coveredcount="0">		  * 						Use this method to load renderers outside of the framework mvc package.</sourceline>
        <sourceline coveredcount="0">		  * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function createCustomRenderer($renderer) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     	       $this-&gt;renderer = MVC::createCustomRenderer($renderer);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns the raw JavaScript contents of the AgilePHP.js file and pre-configures the library</sourceline>
        <sourceline coveredcount="0">	      * with a default AgilePHP.debug, AgilePHP.MVC.controller, and AgilePHP.MVC.action value.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param bool $debug True to enable client side AgilePHP debugging.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function getBaseJS($debug = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    $js = file_get_contents(AgilePHP::getFrameworkRoot() . '/AgilePHP.js');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    if($debug) $js .= "\nAgilePHP.setDebug(true);";</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    $js .= "\nAgilePHP.setRequestBase('" . AgilePHP::getRequestBase() . "');";</sourceline>
        <sourceline coveredcount="-1">	  		    $js .= "\nAgilePHP.MVC.setController('" . MVC::getController() . "');";</sourceline>
        <sourceline coveredcount="-1">	  		    $js .= "\nAgilePHP.MVC.setAction('" . MVC::getAction() . "');";</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    header('content-type: application/json');</sourceline>
        <sourceline coveredcount="-1">	  		    print $js;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Default controller action method.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     abstract public function index();</sourceline>
        <sourceline coveredcount="0">}</sourceline>
      </sourcefile>
    </class>
    <class name="BaseModelActionController" methodcount="13" methodscovered="0" statementcount="0" statementscovered="0" totalcount="13" totalcovered="0">
      <sourcefile name="BaseModelActionController.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/mvc/BaseModelActionController.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides a base implementation of a working model action controller.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.mvc</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">abstract class BaseModelActionController extends BaseModelXslController {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 protected $xsltRenderer;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Base constructor which allows configuration options in extended classes.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param bool $requireLogon True to require the user to be logged in, false to allow calls</sourceline>
        <sourceline coveredcount="0">		  * 			to unauthenticated calls (uses AgilePHP Identity component to validate logged in session).</sourceline>
        <sourceline coveredcount="0">		  * @param String $requiredRole An optional role to require</sourceline>
        <sourceline coveredcount="0">		  * @return void</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">	     public function __construct($requireLogon = true, $requiredRole = 'admin') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	       if($requireLogon) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		     		  if(!Identity::isLoggedIn())</sourceline>
        <sourceline coveredcount="0">		  	     		 throw new NotLoggedInException('Login Required');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  	      if(!Identity::hasRole(new Role($requiredRole)))</sourceline>
        <sourceline coveredcount="0">			  	         throw new AccessDeniedException('Access Denied. This area is reserved for ' . $requiredRole);</sourceline>
        <sourceline coveredcount="0">	     		   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   parent::__construct();</sourceline>
        <sourceline coveredcount="0">	     		   $this-&gt;xsltRenderer = MVC::createRenderer('XSLTRenderer');</sourceline>
        <sourceline coveredcount="0">	     		   $this-&gt;set('title', 'Administration :: ' . $this-&gt;getModelName());</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns an instance of the MVC XSLTRenderer object.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return An instance of XSLTRenderer</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function getXsltRenderer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   return $this-&gt;xsltRenderer;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Performs a search for the model defined in the extension class and displays a</sourceline>
        <sourceline coveredcount="0">	      * paginated result list with edit and delete actions, as well as sortable</sourceline>
        <sourceline coveredcount="0">	      * column headers.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param Integer $page The page number within the result set to display. Default is page 1.</sourceline>
        <sourceline coveredcount="0">	      * @param String $view The view to render. Default is 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function index($page = 1, $view = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	    if(!$view) $view = 'admin';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		// Defaults sorting by the first primary key column</sourceline>
        <sourceline coveredcount="0">	     		//</sourceline>
        <sourceline coveredcount="0">	     		//$table = ORM::getTableByModel($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	  	        //$pkeyColumns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">	  	        //if($pkeyColumns) $this-&gt;setOrderBy($pkeyColumns[0]-&gt;getModelPropertyName(), 'ASC');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		    $this-&gt;setPage($page);</sourceline>
        <sourceline coveredcount="0">	  		    $content = $this-&gt;getXsltRenderer()-&gt;transform($this-&gt;getModelListXSL(), $this-&gt;getResultListAsPagedXML());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	        $this-&gt;set('content', $content);</sourceline>
        <sourceline coveredcount="0">	  	        $this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Displays an 'add' form for the model defined in the extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param int $page The page number to display.</sourceline>
        <sourceline coveredcount="0">	      * @param string $view The view to render. Defaults to 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function add($page, $view = 'admin') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setPage($page);</sourceline>
        <sourceline coveredcount="0">  	     		$this-&gt;set('content', $this-&gt;getXsltRenderer()-&gt;transform($this-&gt;getModelFormXSL(), $this-&gt;getModelAsFormXML()));</sourceline>
        <sourceline coveredcount="0">  	     	    $this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Displays an 'edit' form for the model defined in the extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $ids Underscore delimited list of primary key id's in same ordinal position as defined in orm.xml</sourceline>
        <sourceline coveredcount="0">	      * @param int $page The page number to display.</sourceline>
        <sourceline coveredcount="0">	      * @param string $view The view to render. Defaults to 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function edit($ids, $page = 1, $view = 'admin') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setPrimaryKeys($ids);</sourceline>
        <sourceline coveredcount="0">            	$this-&gt;setPage($page);</sourceline>
        <sourceline coveredcount="0">            	$this-&gt;set('content', $this-&gt;getXsltRenderer()-&gt;transform($this-&gt;getModelFormXSL(), $this-&gt;getModelAsFormXML()));</sourceline>
        <sourceline coveredcount="0">            	$this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Displays a read only text table for the model defined in the extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $ids Underscore delimited list of primary key id's in same ordinal position as defined in orm.xml</sourceline>
        <sourceline coveredcount="0">	      * @param string $view The view to render. Defaults to 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function read($ids, $view = 'admin') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setPrimaryKeys($ids);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	     		$this-&gt;set('content', $this-&gt;getXsltRenderer()-&gt;transform($this-&gt;getModelAsReadOnlyXSL(), $this-&gt;getModelAsFormXML()));</sourceline>
        <sourceline coveredcount="0">  	     	    $this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Performs a search on the model defined in the extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $field The database column name to filter on</sourceline>
        <sourceline coveredcount="0">	      * @param string $keyword The keyword used as the search criteria. Defaults to null (show everything)</sourceline>
        <sourceline coveredcount="0">	      * @param string $view The view to render. Defaults to 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @param int $page The page number to display.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function search($page = 1, $view = 'admin', $field = null, $keyword = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$table = ORM::getTableByModel($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	     		$columns = $table-&gt;getColumns();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		if(!$field) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		   $columns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">	     		   $field = $columns[0]-&gt;getName();</sourceline>
        <sourceline coveredcount="0">	     		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				foreach($columns as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     					if($field == $column-&gt;getName())</sourceline>
        <sourceline coveredcount="0">     			 		   $this-&gt;setRestrictions(array($field =&gt; '%' . $keyword . '%'));</sourceline>
        <sourceline coveredcount="0">     			}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			$this-&gt;setComparisonLogicOperator('LIKE');</sourceline>
        <sourceline coveredcount="0">     			$this-&gt;setPage($page);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">     			$params = $view . '/' . $field . '/' . $keyword;</sourceline>
        <sourceline coveredcount="0">     			$content = $this-&gt;xsltRenderer-&gt;transform($this-&gt;getModelListXSL(), $this-&gt;getResultListAsPagedXML(false, 'search', $params));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	         	$this-&gt;set('content', $content);</sourceline>
        <sourceline coveredcount="0">	  	        $this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Sorts the modelList according to the specified column name and direction.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param String $column The column name to sort on</sourceline>
        <sourceline coveredcount="0">	      * @param String $direction The direction to sort. Default is 'ASC' (ascending). (ASC|DESC)</sourceline>
        <sourceline coveredcount="0">	      * @param Integer $page The page within the result set to display.</sourceline>
        <sourceline coveredcount="0">	      * @param String $view The view to render. Default is 'admin'.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function sort($column, $direction = 'DESC', $page = 1, $view = 'admin') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setOrderBy($column, $direction);</sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setPage($page);</sourceline>
        <sourceline coveredcount="0">				$this-&gt;setOrderBy($column, ($direction == 'ASC') ? 'DESC' : 'ASC');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$content = $this-&gt;xsltRenderer-&gt;transform($this-&gt;getModelListXSL(), $this-&gt;getResultListAsPagedXML());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	        $this-&gt;set('content', $content);</sourceline>
        <sourceline coveredcount="0">	  	        $this-&gt;render($view);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Persists a the ActiveRecord state defined by the model in the</sourceline>
        <sourceline coveredcount="0">	      * extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function persist() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setModelValues();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	    parent::persist($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	    	    $this-&gt;__construct();</sourceline>
        <sourceline coveredcount="0">	  	 	    $this-&gt;index($this-&gt;getPage());</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 	     /**</sourceline>
        <sourceline coveredcount="0">	      * Merges the ActiveRecord state defined by the model in the</sourceline>
        <sourceline coveredcount="0">	      * extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function merge() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		    $this-&gt;setModelValues();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 	    parent::merge($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	  	 	    $this-&gt;__construct();</sourceline>
        <sourceline coveredcount="0">	  	 	    $this-&gt;index($this-&gt;page);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Deletes the ActiveRecord state defined by the model in the</sourceline>
        <sourceline coveredcount="0">	      * extension class and takes the user back to the 'list' view,</sourceline>
        <sourceline coveredcount="0">	      * including the page they left off on.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $ids An underscope delimited list of primary key values. Defaults to null</sourceline>
        <sourceline coveredcount="0">	      * @param int $page An optional page number. Defaults to 1.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function delete($ids = null, $page = 1) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     		$this-&gt;setPrimaryKeys($ids);</sourceline>
        <sourceline coveredcount="0">	  		    $this-&gt;setModelValues();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		    parent::delete($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	  		    $this-&gt;__construct();</sourceline>
        <sourceline coveredcount="0">	  		    $this-&gt;index($page);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Parses $ids sent in by the action method and sets all primary keys</sourceline>
        <sourceline coveredcount="0">	      * in the model defined in the extension class.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param String $ids The 'ids' as passed in from the form submit. These 'ids' are</sourceline>
        <sourceline coveredcount="0">	      * 			       automagically generated by BaseModelXslController.</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     protected function setPrimaryKeys($ids) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		       if($ids == null) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	           $table = ORM::getTableByModel($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0">	  	           $pkeyColumns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	           if(!$pkeyColumns) return; // Poor SQL programming - table should contain a key</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			       // Single primary key</sourceline>
        <sourceline coveredcount="0">	  	           if(strpos($ids, '_') === false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	          $mutator = $this-&gt;toMutator($pkeyColumns[0]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0">	  		 	      $this-&gt;getModel()-&gt;$mutator($ids);</sourceline>
        <sourceline coveredcount="0">	  		 	      return;</sourceline>
        <sourceline coveredcount="0">	  		       }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		       // Compound primary key</sourceline>
        <sourceline coveredcount="0">			       $idz = explode('_', $ids);</sourceline>
        <sourceline coveredcount="0">	  	           for($i=0; $i&lt;count($idz); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	               $mutator = $this-&gt;toMutator($pkeyColumns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	               // Primary key is also a foreign key - (many-to-many)</sourceline>
        <sourceline coveredcount="0">	  	               if($pkeyColumns[$i]-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	                  $fModel = ORM::getTableByName($pkeyColumns[$i]-&gt;getForeignKey()-&gt;getReferencedTable())-&gt;getModel();</sourceline>
        <sourceline coveredcount="0">	  	                  $fModelMutator = $this-&gt;toMutator($pkeyColumns[$i]-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	                  $fModelInstance = new $fModel();</sourceline>
        <sourceline coveredcount="0">	  	                  $fModelInstance-&gt;$fModelMutator($idz[$i]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	                  $this-&gt;getModel()-&gt;$mutator($fModelInstance);</sourceline>
        <sourceline coveredcount="0">	  	                  continue;</sourceline>
        <sourceline coveredcount="0">	  	               }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	               // Stand alone primary key</sourceline>
        <sourceline coveredcount="0">	  	     	 	   $this-&gt;getModel()-&gt;$mutator($idz[$i]);</sourceline>
        <sourceline coveredcount="0">	  	          }</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Uses the AgilePHP RequestScope component to retrieve POST parameters</sourceline>
        <sourceline coveredcount="0">	      * from a form submit and set the model properties defined in the extension</sourceline>
        <sourceline coveredcount="0">	      * class. This method expects the form element names to match the name</sourceline>
        <sourceline coveredcount="0">	      * of the model's property.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">		 protected function setModelValues() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		       $request = Scope::getRequestScope();</sourceline>
        <sourceline coveredcount="0">	     	       $table = ORM::getTableByModel($this-&gt;getModel());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		       if(!$request-&gt;getParameters()) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	 	  	       foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	 	  	       		   $name = $column-&gt;getModelPropertyName();</sourceline>
        <sourceline coveredcount="0">		  	 	  	       $value = $request-&gt;get($name);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	 	  	       $accessor = $this-&gt;toAccessor($name);</sourceline>
        <sourceline coveredcount="0">		  	 	  	       $mutator = $this-&gt;toMutator($name);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	 	  	       // Password fields usually have a confirm box that needs to verify the integrity</sourceline>
        <sourceline coveredcount="0">		  	 	  	       // of the password. This logic will make sure 'password1' and 'password2' fields match.</sourceline>
        <sourceline coveredcount="0">		  	 	  	       // The password present in the database at the time the form is loaded is expected to be</sourceline>
        <sourceline coveredcount="0">		  	 	  	       // present in the POST array named 'oldPassword'.</sourceline>
        <sourceline coveredcount="0">  	 	  	       		   if($name == 'password') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	 	  	       			  if($request-&gt;getSanitized('password1') !== $request-&gt;getSanitized('password2')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		     		 $this-&gt;set('error', 'Passwords don\'t match');</sourceline>
        <sourceline coveredcount="0">			  		     		 $this-&gt;render('error');</sourceline>
        <sourceline coveredcount="0">			  		     		 exit;</sourceline>
        <sourceline coveredcount="0">			  		     	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		     	  $password = $request-&gt;getSanitized('password1');</sourceline>
        <sourceline coveredcount="0">			  		     	  if($request-&gt;getSanitized('oldPassword') != $password)</sourceline>
        <sourceline coveredcount="0">							    $this-&gt;getModel()-&gt;setPassword($password);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							  continue;</sourceline>
        <sourceline coveredcount="0">			  		      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		      // Set model values to null if they are not present in the POST array</sourceline>
        <sourceline coveredcount="0">		  	 	  	      if(!$request-&gt;get($name)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	  	         $this-&gt;getModel()-&gt;$mutator(null);</sourceline>
        <sourceline coveredcount="0">	  		 	  	         continue;</sourceline>
        <sourceline coveredcount="0">		  	 	  	      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		      // Dont sanitize the value if the column has sanitize="false" set in orm.xml</sourceline>
        <sourceline coveredcount="0">		  		     	  $value = ($column-&gt;getSanitize() === true) ?</sourceline>
        <sourceline coveredcount="0">	   	  	        					urldecode(stripslashes(stripslashes($request-&gt;sanitize($value)))) :</sourceline>
        <sourceline coveredcount="0">	   	  	        					urldecode(stripslashes(stripslashes($value)));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	 	  	       		  if($column-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	 	  	       			 if(!$value || $value == 'NULL') continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	 	  	        		 $fmodelName = $column-&gt;getForeignKey()-&gt;getReferencedTableInstance()-&gt;getModel();</sourceline>
        <sourceline coveredcount="0">  	 	  	        		 $fModel = new $fmodelName();</sourceline>
        <sourceline coveredcount="0">						     $refMutator = $this-&gt;toMutator($column-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0">						     $fModel-&gt;$refMutator($value);</sourceline>
        <sourceline coveredcount="0"> 				     		 $this-&gt;getModel()-&gt;$mutator($fModel);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						     continue;</sourceline>
        <sourceline coveredcount="0">			     		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   		   		 		  $this-&gt;getModel()-&gt;$mutator($value);</sourceline>
        <sourceline coveredcount="0">  	 	  	     }</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.data.renderer" methodcount="4" methodscovered="2" statementcount="122" statementscovered="83" totalcount="126" totalcovered="85">
    <class name="YamlRenderer" methodcount="1" methodscovered="1" statementcount="2" statementscovered="2" totalcount="3" totalcovered="3">
      <sourcefile name="YamlRenderer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/data/renderer/YamlRenderer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.renderer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Transforms data to YAML</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.renderer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class YamlRenderer implements DataRenderer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms the specified PHP data to YAML.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data Data to transform to YAML</sourceline>
        <sourceline coveredcount="0">	   * @param int $encoding YAML_ANY_ENCODING, YAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING, YAML_UTF16BE_ENCODING. Defaults to YAML_ANY_ENCODING.</sourceline>
        <sourceline coveredcount="0">	   * @param int $linebreak YAML_ANY_BREAK, YAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK. Defaults to YAML_ANY_BREAK</sourceline>
        <sourceline coveredcount="0">	   * @return string The YAML formatted data.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function render($data, $encoding = null, $linebreak = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return yaml_emit($data, $encoding, $linebreak);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="XmlRenderer" methodcount="1" methodscovered="0" statementcount="62" statementscovered="41" totalcount="63" totalcovered="41">
      <sourcefile name="XmlRenderer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/data/renderer/XmlRenderer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.renderer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Transforms data to well formed xml</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.renderer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class XmlRenderer implements DataRenderer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Renders the specified data as XML.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param mixed $data The data to render. (primitive|array|object)</sourceline>
        <sourceline coveredcount="0">       * @param string $name The root node name</sourceline>
        <sourceline coveredcount="0">       * @param string $pluralName The plural name to use when children are encountered</sourceline>
        <sourceline coveredcount="0">       * @param boolean $isChild Use internally by the method when called recursively</sourceline>
        <sourceline coveredcount="0">       * @param boolean $declaration True to include &lt;?xml ... ?&gt; doctype declaration, false to omit</sourceline>
        <sourceline coveredcount="0">       * @return string An XML document representing the specified data</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function render($data, $name = 'Result', $pluralName = 'Results', $isChild = false, $declaration = true) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">             if($isChild) $xml = '';</sourceline>
        <sourceline coveredcount="2">	  		 else if($declaration) $xml = '&lt;?xml version="1.0" encoding="UTF-8" ?&gt;';</sourceline>
        <sourceline coveredcount="-1">	  		 else $xml = '';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  	     if(is_array($data)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	      	if(!isset($data[0])) return '&lt;' . $name . '/&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 		  	$xml .= '&lt;' . ((!$isChild) ? $pluralName : $name) . '&gt;';</sourceline>
        <sourceline coveredcount="-1">  	 		  	foreach($data as $key =&gt; $val) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 		  	  	if(is_object($val) || is_array($val))</sourceline>
        <sourceline coveredcount="-1">  	 		  	  	   $xml .= self::render($val, $name, $pluralName, true);</sourceline>
        <sourceline coveredcount="0">	 		  	  	else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	 		  	  	   $val = mb_convert_encoding($val, 'UTF-8', 'ISO-8859-1');</sourceline>
        <sourceline coveredcount="-1">  	 		  	  	   $xml .= '&lt;' . $key . '&gt;' . $val . '&lt;/' . $key . '&gt;';</sourceline>
        <sourceline coveredcount="0">  	 		  	  	}</sourceline>
        <sourceline coveredcount="-1">  	 		  	 }</sourceline>
        <sourceline coveredcount="-1">  	 		  	 $xml .= '&lt;/' . ((!$isChild) ? $pluralName : $name) . '&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1"> 	 		  	 return $xml;</sourceline>
        <sourceline coveredcount="-2">	  	      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  	      else if(is_object($data)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  	      	  $class = new ReflectionClass($data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	      	  // stdClass has public properties</sourceline>
        <sourceline coveredcount="2">		  		  if($class-&gt;getName() == 'stdClass') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		  	  $xml .= '&lt;' . $name . '&gt;';</sourceline>
        <sourceline coveredcount="-1">		  		  	  foreach(get_object_vars($data) as $property =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		 		  if(is_object($value) || is_array($value))</sourceline>
        <sourceline coveredcount="-1">		  		 		  	 $xml .= self::render($value, $property, $property . 's', true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 		  else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  		 		  $value = mb_convert_encoding($value, 'UTF-8', 'ISO-8859-1');</sourceline>
        <sourceline coveredcount="-1">			  		 		  $xml .= '&lt;' . $property . '&gt;' . $value . '&lt;/' . $property . '&gt;';</sourceline>
        <sourceline coveredcount="0">		  		 		  }</sourceline>
        <sourceline coveredcount="-1">		  		 	  }</sourceline>
        <sourceline coveredcount="-1">		  		 	  $xml .= '&lt;/' . $name . '&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		 	  return $xml;</sourceline>
        <sourceline coveredcount="-2">	  		     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	     // @todo Interceptors are still being somewhat intrusive to reflection operations</sourceline>
        <sourceline coveredcount="2">	  		     if(method_exists($data, 'getInterceptedInstance')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		     	$name = preg_replace('/_Intercepted/', '', $class-&gt;getName());</sourceline>
        <sourceline coveredcount="2">	  		     	$instance = $data-&gt;getInterceptedInstance();</sourceline>
        <sourceline coveredcount="2">	  		     	$class = new ReflectionClass($instance);</sourceline>
        <sourceline coveredcount="2">	  		     	$data = $instance;</sourceline>
        <sourceline coveredcount="2">	  		     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		     // php namespace support</sourceline>
        <sourceline coveredcount="2">			     $namespace = explode('\\', $name);</sourceline>
        <sourceline coveredcount="2">			     $className = $namespace[count($namespace)-1];</sourceline>
        <sourceline coveredcount="2">		 	     $namespace = implode('\\', $namespace);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">		  		 $xml = '&lt;' . $className . '&gt;';</sourceline>
        <sourceline coveredcount="2">		  		 foreach($class-&gt;getProperties() as $property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">		  		 		 $context = null;</sourceline>
        <sourceline coveredcount="2">		  		 		 if($property-&gt;isPublic())</sourceline>
        <sourceline coveredcount="2">		  		 		  	$context = 'public';</sourceline>
        <sourceline coveredcount="2">		  		 		 else if($property-&gt;isProtected())</sourceline>
        <sourceline coveredcount="2">		  		 		 	$context = 'protected';</sourceline>
        <sourceline coveredcount="2">		  		 		 else if($property-&gt;isPrivate())</sourceline>
        <sourceline coveredcount="2">		  		 		  	 $context = 'private';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">		  		 		 $value = null;</sourceline>
        <sourceline coveredcount="2">		  		 		 if($context != 'public') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">		  		 		  	$property-&gt;setAccessible(true);</sourceline>
        <sourceline coveredcount="2">				  		 	$value = $property-&gt;getValue($data);</sourceline>
        <sourceline coveredcount="2">				  		 	$property-&gt;setAccessible(false);</sourceline>
        <sourceline coveredcount="2">		  		 		 }</sourceline>
        <sourceline coveredcount="0">		  		 		 else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		 		  	$value = $property-&gt;getValue($data);</sourceline>
        <sourceline coveredcount="0">		  		 		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">		  		 		 if(is_object($value) || is_array($value))</sourceline>
        <sourceline coveredcount="2">		  		 		 	$xml .= self::render($value, $property-&gt;getName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		 		 else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">			  		 		$value = mb_convert_encoding($value, 'UTF-8', 'ISO-8859-1');</sourceline>
        <sourceline coveredcount="2">			  		 		$xml .= '&lt;' . $property-&gt;getName() . '&gt;' . $value . '&lt;/' . $property-&gt;getName() . '&gt;';</sourceline>
        <sourceline coveredcount="0">		  		 		  }</sourceline>
        <sourceline coveredcount="2">		  		 }</sourceline>
        <sourceline coveredcount="2">		  		 $xml .= '&lt;/' . $className . '&gt;';</sourceline>
        <sourceline coveredcount="2">	  		 }</sourceline>
        <sourceline coveredcount="2">	  		 return $xml;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="YesNoRenderer" methodcount="1" methodscovered="1" statementcount="2" statementscovered="2" totalcount="3" totalcovered="3">
      <sourcefile name="YesNoRenderer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/data/renderer/YesNoRenderer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.renderer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Transforms data from a SQL boolean type, into the string "Yes" or "No".</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.renderer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class YesNoRenderer implements DataRenderer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Transforms the specified data into a YES or NO string</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param mixed $data A value to evaluate.</sourceline>
        <sourceline coveredcount="0">       * @return "Yes" if the value evaluates to "1", "No" otherwise.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function render($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">             return ($data) ? 'Yes' : 'No';</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="JsonRenderer" methodcount="1" methodscovered="0" statementcount="56" statementscovered="38" totalcount="57" totalcovered="38">
      <sourcefile name="JsonRenderer.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/data/renderer/JsonRenderer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.renderer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Transforms data to a JSON string</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.renderer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class JsonRenderer implements DataRenderer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms the specified PHP data to JSON. json_encode does not encode</sourceline>
        <sourceline coveredcount="0">	   * private fields within objects, so here we make use PHP 5.3+</sourceline>
        <sourceline coveredcount="0">	   * ReflectionProperty::setAccessible to access the private/protected properties.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data An array or object to transform into JSON</sourceline>
        <sourceline coveredcount="0">	   * @param string $name An optional class name. Defaults to null</sourceline>
        <sourceline coveredcount="0">	   * @param boolean $isChild Used internally for recursion logic</sourceline>
        <sourceline coveredcount="0">	   * @return The JSON encoded data</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public static function render($data, $name = null, $isChild = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">             $json = '';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		  if(is_array($data)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  	 $i=0;</sourceline>
        <sourceline coveredcount="-1">	  		  	 if($name &amp;&amp; $name != 'stdClass') $json .= '"' . $name . '" : ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  	 if(!isset($data[0])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  	  	 $json .= 'null';</sourceline>
        <sourceline coveredcount="-1">	  		  	  	 return $json;</sourceline>
        <sourceline coveredcount="-2">	  		  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  	 $json .= '[ ';</sourceline>
        <sourceline coveredcount="-1">	  		  	 foreach($data as $key =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  	  		$i++;</sourceline>
        <sourceline coveredcount="-1">	  		  	  	 	$json .= (is_object($value) || is_array($value)) ?</sourceline>
        <sourceline coveredcount="-1">	  		  	  	 				 self::render($value, $name) :</sourceline>
        <sourceline coveredcount="-1">	  		  	  	 				 ((is_numeric($key)) ? json_encode($value) : json_encode($value));</sourceline>
        <sourceline coveredcount="-1">	  		  	  	 	$json .= ($i &lt; count($data)) ? ', ' : '';</sourceline>
        <sourceline coveredcount="-1">	  		  	  }</sourceline>
        <sourceline coveredcount="-1">	  		  	  $json .= ' ]';</sourceline>
        <sourceline coveredcount="-1">	  		  	  if($name &amp;&amp; $name != 'stdClass') $json .= ' }';</sourceline>
        <sourceline coveredcount="-1">	  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  // Format objects (that have private fields)</sourceline>
        <sourceline coveredcount="3">	  		  else if(is_object($data)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">		  		  $class = new ReflectionClass($data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  		  // stdClass has public properties</sourceline>
        <sourceline coveredcount="3">		  		  if( $class-&gt;getName() == 'stdClass' )</sourceline>
        <sourceline coveredcount="3">		  		  	  return json_encode( $data );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">		  		  $json .= ($isChild) ? '"' . $class-&gt;getName() . '" : { ' : ' { "' . $class-&gt;getName() . '" : { ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  	  // @todo Interceptors are still being somewhat intrusive to reflection operations</sourceline>
        <sourceline coveredcount="3">	  		      if(method_exists($data, 'getInterceptedInstance')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		     	 $name = preg_replace('/_Intercepted/', '', $class-&gt;getName());</sourceline>
        <sourceline coveredcount="3">	  		     	 $data = $data-&gt;getInterceptedInstance();</sourceline>
        <sourceline coveredcount="3">	  		     	 $class = new ReflectionClass($data);</sourceline>
        <sourceline coveredcount="3">	  		      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">		  		  $properties = $class-&gt;getProperties();</sourceline>
        <sourceline coveredcount="3">			  	  for($i=0; $i&lt;count($properties); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">			  		   $property = $properties[$i];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">			  		   $context = null;</sourceline>
        <sourceline coveredcount="3">			  		   if($property-&gt;isPublic())</sourceline>
        <sourceline coveredcount="3">			  		   	  $context = 'public';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">			  		   else if($property-&gt;isProtected())</sourceline>
        <sourceline coveredcount="3">		  		 		   	   $context = 'protected';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">		  		 	   else if($property-&gt;isPrivate())</sourceline>
        <sourceline coveredcount="3">			  		 		  $context = 'private';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">			  		   $value = null;</sourceline>
        <sourceline coveredcount="3">			  		   if($context != 'public') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 		  	  $property-&gt;setAccessible(true);</sourceline>
        <sourceline coveredcount="3">			  		 	  $value = $property-&gt;getValue($data);</sourceline>
        <sourceline coveredcount="3">			  		 	  $property-&gt;setAccessible(false);</sourceline>
        <sourceline coveredcount="3">			  		   }</sourceline>
        <sourceline coveredcount="0">			  		   else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  		   	  $value = $property-&gt;getValue($data);</sourceline>
        <sourceline coveredcount="0">			  		   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">			  		   if(is_object($value) || is_array($value))</sourceline>
        <sourceline coveredcount="3">			  		   	  $json .= self::render($value, $property-&gt;getName(), true) . ' ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		   else</sourceline>
        <sourceline coveredcount="3">			  		   		$json .= '"' . $property-&gt;getName() . '" : ' . json_encode($value);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">			  		   $json .= (($i+1) &lt; count($properties)) ? ', ' : '';</sourceline>
        <sourceline coveredcount="3">			  	  }</sourceline>
        <sourceline coveredcount="3">			  	  $json .= ($isChild) ? '} ' : ' } }';</sourceline>
        <sourceline coveredcount="3">		  	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	  else</sourceline>
        <sourceline coveredcount="-1">		  	  	  $json = json_encode($data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		  return $json;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.data.transformer" methodcount="6" methodscovered="5" statementcount="42" statementscovered="40" totalcount="48" totalcovered="45">
    <class name="JsonToModel" methodcount="2" methodscovered="1" statementcount="16" statementscovered="14" totalcount="18" totalcovered="15">
      <sourcefile name="JsonToModel.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/data/transformer/JsonToModel.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.transformer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Transforms JSON string data into a populated domain model.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.transformer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class JsonToModel implements DataTransformer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms the specified data into a populated domain model.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $data The string data which represents the domain model</sourceline>
        <sourceline coveredcount="0">	   * 					 and state to create.</sourceline>
        <sourceline coveredcount="0">	   * @return Object The domain model specified in the string $data</sourceline>
        <sourceline coveredcount="0">	   * @throws FrameworkException if the json data does not unmarshall to a stdClass object</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function transform($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $o = json_decode($data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if(!is_object($o)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	Log::debug('JSONTransformer::transform Received malformed data ' . $data);</sourceline>
        <sourceline coveredcount="-1">	  		 	throw new FrameworkException('Malformed JSON object');</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $vars = get_object_vars($o);</sourceline>
        <sourceline coveredcount="1">	  		 $modelName = key($vars);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return self::convert($modelName, $vars[$modelName]);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Accepts a model name and a stdClass object and creates a new model</sourceline>
        <sourceline coveredcount="0">	   * instance and copies the data from the stdClass into the model instance.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $modelName The name of the domain model to instantiate</sourceline>
        <sourceline coveredcount="0">	   * @param stdClass $oJson A stdClass object which represents a JSON decoded object</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private static function convert($modelName, $oJson) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			  $model = new $modelName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $values = get_object_vars($oJson);</sourceline>
        <sourceline coveredcount="1">	  		  foreach($values as $field =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  		  $mutator = 'set' . ucfirst($field);</sourceline>
        <sourceline coveredcount="1">	  		  		  $model-&gt;$mutator((is_object($value) ? self::convert($field, $value) : $value));</sourceline>
        <sourceline coveredcount="1">	  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  return $model;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="YamlToModel" methodcount="1" methodscovered="1" statementcount="4" statementscovered="4" totalcount="5" totalcovered="5">
      <sourcefile name="YamlToModel.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/data/transformer/YamlToModel.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.transformer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Transforms YAML string data into a populated domain model.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.transformer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class YamlToModel implements DataTransformer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms the specified data into a populated domain model.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $data The string data which represents the domain model</sourceline>
        <sourceline coveredcount="0">	   * 					 and state to create.</sourceline>
        <sourceline coveredcount="0">	   * @return Object The domain model specified in the string $data</sourceline>
        <sourceline coveredcount="0">	   * @throws FrameworkException if the specified data could not be parsed</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function transform($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $o = yaml_parse($data);</sourceline>
        <sourceline coveredcount="1">	  		 if($o == null) throw new FrameworkException('Malformed YAML data');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $o;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="XmlToModel" methodcount="2" methodscovered="2" statementcount="19" statementscovered="19" totalcount="21" totalcovered="21">
      <sourcefile name="XmlToModel.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/data/transformer/XmlToModel.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.transformer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Transforms XML string data into a populated domain model.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.transformer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class XmlToModel implements DataTransformer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms the specified data into a populated domain model.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $data The string data which represents the domain model and state to create.</sourceline>
        <sourceline coveredcount="0">	   * @return Object The domain model specified in the string $data</sourceline>
        <sourceline coveredcount="0">	   * @throws FrameworkException if the xml data could not be loaded by simplexml</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function transform($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if(!$xml= @simplexml_load_string($data))</sourceline>
        <sourceline coveredcount="1">	  		 	throw new FrameworkException('Malformed xml data');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return self::convert($xml);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Accepts a model name and a SimpleXMLElement object and creates a new model</sourceline>
        <sourceline coveredcount="0">	   * instance and copies the data from the SimpleXMLElement into the model instance.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param SimpleXMLElement $e SimpleXMLElement object which represents a the model</sourceline>
        <sourceline coveredcount="0">	   * @return Object The domain model that corresponds to the specified xml data</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private static function convert(SimpleXMLElement $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			  $name = $e-&gt;getName();</sourceline>
        <sourceline coveredcount="1">			  $model = new $name;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $values = get_object_vars($e);</sourceline>
        <sourceline coveredcount="1">	  		  foreach($values as $field =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  		  $mutator = 'set' . ucfirst($field);</sourceline>
        <sourceline coveredcount="1">	  		  		  if($value instanceof SimpleXMLElement) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						 if(!get_object_vars($value)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						   	$model-&gt;$mutator(null);</sourceline>
        <sourceline coveredcount="1">						   	continue;</sourceline>
        <sourceline coveredcount="-2">						 }</sourceline>
        <sourceline coveredcount="1">	  		  		   	 $model-&gt;$mutator(self::convert($value));</sourceline>
        <sourceline coveredcount="1">	  		  		   }</sourceline>
        <sourceline coveredcount="0">	  		  		   else</sourceline>
        <sourceline coveredcount="1">	  		  		   	 $model-&gt;$mutator($value);</sourceline>
        <sourceline coveredcount="1">	  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  return $model;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="YesNoToBoolean" methodcount="1" methodscovered="1" statementcount="3" statementscovered="3" totalcount="4" totalcovered="4">
      <sourcefile name="YesNoToBoolean.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/data/transformer/YesNoToBoolean.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.transformer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Transforms a "Yes" or "No" string to a SQL bit type</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.data.transformer</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class YesNoToBoolean implements DataTransformer {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms a "Yes" or "No" string to a "1" or "0"</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $data The "Yes" or "No" string</sourceline>
        <sourceline coveredcount="0">	   * @return int "1" if the string was "Yes", "0" otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function transform($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">             if($data == 1) return 1;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 return (strtolower($data) == 'yes') ? 1 : 0;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.logger" methodcount="18" methodscovered="13" statementcount="61" statementscovered="51" totalcount="79" totalcovered="64">
    <class name="SysLogger" methodcount="6" methodscovered="6" statementcount="11" statementscovered="11" totalcount="17" totalcovered="17">
      <sourcefile name="SysLogger.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/logger/SysLogger.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.logger</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for system based logging. SYSLOG on unix or NT Event Log in windows.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.logger</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class SysLogger implements LogProvider {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $log;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Opens the syslog LOG_USER facility</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 openlog(AgilePHP::getAppName(), LOG_PID | LOG_PERROR, LOG_USER);</sourceline>
        <sourceline coveredcount="0">  	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes a 'debug' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The debug message to log</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function debug($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  		 	 $this-&gt;write($message, LOG_DEBUG);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes a 'warn' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The warning message to log</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function warn($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;write($message, LOG_WARNING);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes an 'info' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The informative message to log</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function info($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;write($message, LOG_INFO);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes an 'error' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The error message to log.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function error($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;write($message, LOG_ERR);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Write the log entry</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $message The log entry message</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function write($message, $level) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		  $requestURI = (isset($_SERVER['REQUEST_URI' ]) ? $_SERVER['REQUEST_URI'] : '/');</sourceline>
        <sourceline coveredcount="4">	  	      $header = '[' . $level . ']  ' . AgilePHP::getAppName() . '  ' . date("m-d-y g:i:sa", strtotime('now')) . '  ' . $requestURI;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		  if(is_object($message) || is_array($message))</sourceline>
        <sourceline coveredcount="4">	  	      	  $message = print_r($message, true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  	      syslog($level, $header . "\t" . $message . PHP_EOL);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Logger" methodcount="1" methodscovered="1" statementcount="4" statementscovered="4" totalcount="5" totalcovered="5">
      <sourcefile name="Logger.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/logger/Logger.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.logger</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for performing property level #@Logger dependency injections.</sourceline>
        <sourceline coveredcount="0"> * Shorthand for #@In(class = LogFactory::getLogger())</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.logger</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyClass {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 #@Logger</sourceline>
        <sourceline coveredcount="0"> * 		 public $logger;  // injected instance of the configured LogProvider</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="1" startclass="1">class Logger {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function inject(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 return LogFactory::getLogger();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Audit" methodcount="2" methodscovered="0" statementcount="0" statementscovered="0" totalcount="2" totalcovered="0">
      <sourcefile name="Audit.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/logger/Audit.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.logger</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Logs a call state context both before and after a method invocation.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.logger</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyClass {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // Calls to this function are logged including class, method, parameters, and return value.</sourceline>
        <sourceline coveredcount="0"> * 		 #@Audit</sourceline>
        <sourceline coveredcount="0"> * 		 public function doSomething($param1, $param2) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 				return 'something useful';</sourceline>
        <sourceline coveredcount="0"> * 		 }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="0" startclass="1">class Audit {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the logging level</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var string $level Optional logging level (info|warn|error|debug). Defaults to 'debug'.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $level = 'debug';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Flag indicating whether or not to display detailed information about the invocation</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var bool $verbose True to display the entire invocation context, false to display class name,</sourceline>
        <sourceline coveredcount="0">	   * 				    method name, and arguments. The return value will also be captured and logged.</sourceline>
        <sourceline coveredcount="0">	   * 				 	Defaults to false (not verbose).</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $verbose = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $valid = array('info', 'warn', 'error', 'debug');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function logInvocation(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $level = (in_array($this-&gt;level, $this-&gt;valid)) ? $this-&gt;level : 'debug';</sourceline>
        <sourceline coveredcount="0">	  		 if($this-&gt;verbose) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 Log::$level('#@Audit::logInvocation');</sourceline>
        <sourceline coveredcount="0">	  		 	 Log::$level($ic);</sourceline>
        <sourceline coveredcount="0">	  		 	 return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $callee = $ic-&gt;getCallee();</sourceline>
        <sourceline coveredcount="0">	  		 $message = 'class = \'' . $callee['class'] . '\', method = \'' . $callee['function'] . '\', args = \'' . implode(',', $ic-&gt;getParameters()) . '\'';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 Log::$level('#@Audit::logInvocation ' . $message);</sourceline>
        <sourceline coveredcount="0">	  		 return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  #@AfterInvoke</sourceline>
        <sourceline coveredcount="0">	  public function logReturn(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $level = (in_array($this-&gt;level, $this-&gt;valid)) ? $this-&gt;level : 'debug';</sourceline>
        <sourceline coveredcount="0">	  		 if($this-&gt;verbose) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 Log::$level('#@Audit::logReturn');</sourceline>
        <sourceline coveredcount="0">	  		 	 Log::$level($ic);</sourceline>
        <sourceline coveredcount="0">	  		 	 return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $return = $ic-&gt;getReturn();</sourceline>
        <sourceline coveredcount="0">	  		 Log::$level('#@Audit::logReturn');</sourceline>
        <sourceline coveredcount="0">	  		 Log::$level((($return) ? $return : '(null)'));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="FileLogger" methodcount="6" methodscovered="5" statementcount="24" statementscovered="19" totalcount="30" totalcovered="24">
      <sourcefile name="FileLogger.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/logger/FileLogger.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.logger</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for disk based file logging to #projectName#/logs</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.logger</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class FileLogger implements LogProvider {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $log;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Create a log file handle</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 $logDirectory = AgilePHP::getWebRoot() . DIRECTORY_SEPARATOR . 'logs';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  	     if(!file_exists($logDirectory))</sourceline>
        <sourceline coveredcount="5">	  	      	 if(!mkdir($logDirectory))</sourceline>
        <sourceline coveredcount="-1">	  	      	   	 throw new FrameworkException('Logger component requires non-existent \'logs/\' directory at \'' . $logDirectory . '\'. An attempt to create it failed.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  	     if(!is_writable($logDirectory))</sourceline>
        <sourceline coveredcount="5">	  	     	 throw new FrameworkException('Logging directory is not writable. The PHP process requires write access to this directory.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  	     $filename = $logDirectory . DIRECTORY_SEPARATOR . 'agilephp_' . date("m-d-y") . '.log';</sourceline>
        <sourceline coveredcount="5">	  	     if(!file_exists($filename)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     	 if(!touch($filename))</sourceline>
        <sourceline coveredcount="-1">	  	     	 	 throw new FrameworkException('Unable to create log file at \'' . $filename . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     	 @chmod($filename, 0777);</sourceline>
        <sourceline coveredcount="-1">	  	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 $this-&gt;log = fopen( $filename, 'a+');</sourceline>
        <sourceline coveredcount="0">  	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes a 'debug' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The debug message to log</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function debug($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="28">  		 	 $this-&gt;write($message, 'DEBUG');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes a 'warn' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The warning message to log</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function warn($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;write($message, 'WARN');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes an 'info' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The informative message to log</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function info($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 $this-&gt;write($message, 'INFO');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Writes an 'error' log level entry.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $message The error message to log.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function error($message) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;write($message, 'ERROR');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Write the log entry</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $message The log entry message</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function write($message, $level) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="34">	  		  $host = (isset($_SERVER['REMOTE_ADDR'])) ? $_SERVER['REMOTE_ADDR'] : AgilePHP::getAppName();</sourceline>
        <sourceline coveredcount="34">	  		  $requestURI = (isset($_SERVER['REQUEST_URI' ]) ? $_SERVER['REQUEST_URI'] : '/');</sourceline>
        <sourceline coveredcount="34">	  	      $header = '[' . $level . ']  ' . $host . '  ' . date("m-d-y g:i:sa", strtotime('now')) . '  ' . $requestURI;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="34">	  		  if(is_object($message) || is_array($message))</sourceline>
        <sourceline coveredcount="34">	  	      	  $message = print_r($message, true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="34">	  	      fputs($this-&gt;log, $header . "\t" . $message . PHP_EOL);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="LogFactory" methodcount="3" methodscovered="1" statementcount="22" statementscovered="17" totalcount="25" totalcovered="18">
      <sourcefile name="LogFactory.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/logger/LogFactory.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.logger</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Factory responsible for returning a LogProvider implementation</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.logger</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">abstract class LogFactory {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">         private static $level;</sourceline>
        <sourceline coveredcount="0">		 private static $logger;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Logging level accessor</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @return string The logging level</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 public static function getLevel() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="25">		        return self::$level;</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Returns a LogProvider singleton instance</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">	     public static function getLogger($logger = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="29">	     		if(self::$logger == null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	     		   $xml = AgilePHP::getConfiguration();</sourceline>
        <sourceline coveredcount="1">			       if($xml &amp;&amp; $xml-&gt;logger) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			     	  $level = (string)$xml-&gt;logger-&gt;attributes()-&gt;level;</sourceline>
        <sourceline coveredcount="1">			     	  self::$level = ($level) ? $level : 'info';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			     	  $provider = (string)$xml-&gt;logger-&gt;attributes()-&gt;provider;</sourceline>
        <sourceline coveredcount="1">			     	  $provider = ($provider) ? $provider : 'FileLogger';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			     	  // Try to load the specified Logger from the framework/logger directory</sourceline>
        <sourceline coveredcount="1">			     	  $path = AgilePHP::getFrameworkRoot() . DIRECTORY_SEPARATOR . 'logger' .</sourceline>
        <sourceline coveredcount="1">			     	              DIRECTORY_SEPARATOR . 'FileLogger.php';</sourceline>
        <sourceline coveredcount="1">			     	  if(file_exists($path)) require_once $path;</sourceline>
        <sourceline coveredcount="1">			       }</sourceline>
        <sourceline coveredcount="0">			       else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			     	  self::$level = 'info';</sourceline>
        <sourceline coveredcount="-1">			     	  $provider = 'FileLogger';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">				  	  require_once AgilePHP::getFrameworkRoot() .</sourceline>
        <sourceline coveredcount="-1">				  						DIRECTORY_SEPARATOR . 'logger' . DIRECTORY_SEPARATOR . 'FileLogger.php';</sourceline>
        <sourceline coveredcount="0">			       }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			       // Logger type specifically requested</sourceline>
        <sourceline coveredcount="1">			       self::$logger = ($logger == null) ? new $provider : new $logger;</sourceline>
        <sourceline coveredcount="1">	     		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="29">	     		return self::$logger;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns a new LogProvider with each call</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $logger The name of the LogProvider implementation to create</sourceline>
        <sourceline coveredcount="0">	      * @return LogProvider A new instance of the requested LogProvider</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public static function createLogger($logger) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">				return new $logger;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.cache" methodcount="20" methodscovered="0" statementcount="0" statementscovered="0" totalcount="20" totalcovered="0">
    <class name="ApcCacheProvider" methodcount="5" methodscovered="0" statementcount="0" statementscovered="0" totalcount="5" totalcovered="0">
      <sourcefile name="ApcCacheProvider.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/cache/ApcCacheProvider.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * APC cache provider</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class ApcCacheProvider implements CacheProvider {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Creates a new instance of ApcCacheProvider</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @throws CacheException if APC is not installed on the server</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             if(!function_exists('apc_store'))</sourceline>
        <sourceline coveredcount="0">                throw new CacheException('Alternative PHP Cache (APC) is not installed on the server');</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#set($key, $value, $minutes)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function set($key, $value, $minutes = 0) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             apc_store($key, serialize($value), $minutes);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#get($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function get($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return unserialize(apc_fetch($key));</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#get($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function delete($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return apc_delete($key);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#exists($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function exists($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return apc_exists($key);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="XCacheProvider" methodcount="5" methodscovered="0" statementcount="0" statementscovered="0" totalcount="5" totalcovered="0">
      <sourcefile name="XCacheProvider.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/cache/XCacheProvider.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * XCache cache provider</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class XCacheProvider implements CacheProvider {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Creates a new instance of XCacheProvider</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @throws CacheException if XCache is not installed on the server</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             if(!function_exists('xcache_set'))</sourceline>
        <sourceline coveredcount="0">                throw new CacheException('XCache is not installed on the server');</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#set($key, $value, $minutes)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function set($key, $value, $minutes = 0) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             xcache_set($key, serialize($value), $minutes);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#get($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function get($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return unserialize(xcache_get($key));</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#delete($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function delete($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             xcache_unset($key);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#exists($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function exists($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return xcache_isset($key);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="CacheException" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="CacheException.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/cache/CacheException.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for exceptions within the cache package</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> * @throws CacheException</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class CacheException extends FrameworkException { }</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="CachedFile" methodcount="5" methodscovered="0" statementcount="0" statementscovered="0" totalcount="5" totalcovered="0">
      <sourcefile name="FileCacheProvider.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/cache/FileCacheProvider.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * File system cache provider</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">class FileCacheProvider implements CacheProvider {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private $cache;</sourceline>
        <sourceline coveredcount="0">      private $CachedFile;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Creates a new FileSystemCache instance</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @throws CacheException if the .cache directory does not exist</sourceline>
        <sourceline coveredcount="0">       *         and can not be created.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $this-&gt;cache = AgilePHP::getWebRoot() . DIRECTORY_SEPARATOR . '.cache';</sourceline>
        <sourceline coveredcount="0">             if(!file_exists($this-&gt;cache)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                if(!mkdir($this-&gt;cache))</sourceline>
        <sourceline coveredcount="0">                   throw new CacheException('Failed to create cache directory at \'' . $this-&gt;cache . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                chmod($this-&gt;cache, 0777);</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#set($key, $value, $minutes)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function set($key, $value, $minutes = 0) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $CachedFile = new CachedFile($value, $minutes);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $h = fopen($this-&gt;cache . DIRECTORY_SEPARATOR . $key, 'w');</sourceline>
        <sourceline coveredcount="0">             fwrite($h, serialize($CachedFile));</sourceline>
        <sourceline coveredcount="0">             fclose($h);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#get($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function get($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $file = $this-&gt;cache . DIRECTORY_SEPARATOR . $key;</sourceline>
        <sourceline coveredcount="0">             if(!file_exists($file)) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $CachedFile = unserialize(file_get_contents($file));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             if($minutes = $CachedFile-&gt;getMinutes()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                $minutes = $minutes * 60;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                if(time() - $minutes &lt; filemtime($file))</sourceline>
        <sourceline coveredcount="0">                   return $CachedFile-&gt;getData();</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return $CachedFile-&gt;getData();</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#get($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function delete($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             unlink($this-&gt;cache . DIRECTORY_SEPARATOR . $key);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#exists($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function exists($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return file_exists($this-&gt;cache . DIRECTORY_SEPARATOR . $key);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Represents a cached file. Stores the cached data and its expiration value.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class CachedFile {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private $data;</sourceline>
        <sourceline coveredcount="0">      private $minutes;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Creates a new CachedFile instance</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param mixed $data The data to cache</sourceline>
        <sourceline coveredcount="0">       * @param int $minutes The number of minutes the cached data is considered valid</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function __construct($data, $minutes = 0) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $this-&gt;data = $data;</sourceline>
        <sourceline coveredcount="0">             $this-&gt;minutes = $minutes;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Sets the data to be cached</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param mixed $data The data to cache</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function setData($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $this-&gt;data = $data;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns the cached data</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return mixed The cached data</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getData() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return $this-&gt;data;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Sets the number of minutes before considering the cached data stale</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param int $expires The number of minutes to keep data cached</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function setMinutes($minutes) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $this-&gt;minutes = $minutes;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Retrieves the number of minutes before considering the cached data stale</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return int The number of minutes to keep data cached</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getMinutes() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return $this-&gt;minutes;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="FileCacheProvider" methodcount="5" methodscovered="0" statementcount="0" statementscovered="0" totalcount="5" totalcovered="0">
      <sourcefile name="FileCacheProvider.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/cache/FileCacheProvider.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * File system cache provider</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class FileCacheProvider implements CacheProvider {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private $cache;</sourceline>
        <sourceline coveredcount="0">      private $CachedFile;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Creates a new FileSystemCache instance</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @throws CacheException if the .cache directory does not exist</sourceline>
        <sourceline coveredcount="0">       *         and can not be created.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $this-&gt;cache = AgilePHP::getWebRoot() . DIRECTORY_SEPARATOR . '.cache';</sourceline>
        <sourceline coveredcount="0">             if(!file_exists($this-&gt;cache)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                if(!mkdir($this-&gt;cache))</sourceline>
        <sourceline coveredcount="0">                   throw new CacheException('Failed to create cache directory at \'' . $this-&gt;cache . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                chmod($this-&gt;cache, 0777);</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#set($key, $value, $minutes)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function set($key, $value, $minutes = 0) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $CachedFile = new CachedFile($value, $minutes);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $h = fopen($this-&gt;cache . DIRECTORY_SEPARATOR . $key, 'w');</sourceline>
        <sourceline coveredcount="0">             fwrite($h, serialize($CachedFile));</sourceline>
        <sourceline coveredcount="0">             fclose($h);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#get($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function get($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $file = $this-&gt;cache . DIRECTORY_SEPARATOR . $key;</sourceline>
        <sourceline coveredcount="0">             if(!file_exists($file)) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $CachedFile = unserialize(file_get_contents($file));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             if($minutes = $CachedFile-&gt;getMinutes()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                $minutes = $minutes * 60;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                if(time() - $minutes &lt; filemtime($file))</sourceline>
        <sourceline coveredcount="0">                   return $CachedFile-&gt;getData();</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return $CachedFile-&gt;getData();</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#get($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function delete($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             unlink($this-&gt;cache . DIRECTORY_SEPARATOR . $key);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/cache/Caching#exists($key)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function exists($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return file_exists($this-&gt;cache . DIRECTORY_SEPARATOR . $key);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Represents a cached file. Stores the cached data and its expiration value.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.cache</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">class CachedFile {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private $data;</sourceline>
        <sourceline coveredcount="0">      private $minutes;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Creates a new CachedFile instance</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param mixed $data The data to cache</sourceline>
        <sourceline coveredcount="0">       * @param int $minutes The number of minutes the cached data is considered valid</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function __construct($data, $minutes = 0) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $this-&gt;data = $data;</sourceline>
        <sourceline coveredcount="0">             $this-&gt;minutes = $minutes;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Sets the data to be cached</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param mixed $data The data to cache</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function setData($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $this-&gt;data = $data;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns the cached data</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return mixed The cached data</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getData() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return $this-&gt;data;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Sets the number of minutes before considering the cached data stale</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param int $expires The number of minutes to keep data cached</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function setMinutes($minutes) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $this-&gt;minutes = $minutes;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Retrieves the number of minutes before considering the cached data stale</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return int The number of minutes to keep data cached</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getMinutes() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             return $this-&gt;minutes;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.scope" methodcount="66" methodscovered="26" statementcount="189" statementscovered="92" totalcount="255" totalcovered="118">
    <class name="OrmSessionProvider" methodcount="14" methodscovered="7" statementcount="78" statementscovered="35" totalcount="92" totalcovered="42">
      <sourcefile name="OrmSessionProvider.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/scope/OrmSessionProvider.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Maintains persistent session data that lives over multiple page requests. This</sourceline>
        <sourceline coveredcount="0"> * data is stored in the database to allow greater flexibility and easier clustering</sourceline>
        <sourceline coveredcount="0"> * compared to the native PHP local file system strategy.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class OrmSessionProvider implements SessionProvider {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private static $instance;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $session;</sourceline>
        <sourceline coveredcount="0">	  private $persisted = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initalizes the 'SessionScope' object with a default sessionId. If an</sourceline>
        <sourceline coveredcount="0">	   * AGILEPHP_SESSION_ID is present, the session id from the cookie is used</sourceline>
        <sourceline coveredcount="0">	   * to retrieve a previously persisted Session, otherwise a new session is</sourceline>
        <sourceline coveredcount="0">	   * created and a new cookie is given to the client.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	      $this-&gt;session = new Session();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	      if(isset($_COOKIE['AGILEPHP_SESSION_ID'])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	      	 Log::debug('OrmSessionProvider::__construct Initalizing session from previous cookie.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	      	 $this-&gt;session-&gt;setId($_COOKIE['AGILEPHP_SESSION_ID']);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		 	 	 $persisted = ORM::find($this-&gt;session);</sourceline>
        <sourceline coveredcount="-1">  		 	 	 if(!isset($persisted[0])) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		 	 	 $this-&gt;persisted = true;</sourceline>
        <sourceline coveredcount="-1">  		 	 	 $data = unserialize($persisted[0]-&gt;getData());</sourceline>
        <sourceline coveredcount="-1">  		 	 	 $this-&gt;session-&gt;setData($data);</sourceline>
        <sourceline coveredcount="-1">	  	      }</sourceline>
        <sourceline coveredcount="0">	  	      else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	      	 Log::debug('OrmSessionProvider::__construct Initalizing session with a new cookie.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		  	     $this-&gt;createSessionId();</sourceline>
        <sourceline coveredcount="1">		  	     setcookie('AGILEPHP_SESSION_ID', $this-&gt;session-&gt;getId(), (time()+3600*24*30), '/'); // 30 days</sourceline>
        <sourceline coveredcount="0">	  	      }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the session model</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param SessionModel $session The session model</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setSession(SessionModel $session) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         $this-&gt;session = $session;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the session domain model object which maintains the id and data for</sourceline>
        <sourceline coveredcount="0">	   * the current Session's ActiveRecord.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Session The current Session instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSession() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 return $this-&gt;session;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the session id for the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The session id</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSessionId() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 return $this-&gt;session-&gt;getId();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the session id and restores a previously persisted Session if one exists.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setSessionId($id) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;session-&gt;setId($id);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 setcookie('AGILEPHP_SESSION_ID', $id, time()+3600*24*30, '/'); // 30 days</sourceline>
        <sourceline coveredcount="-1">	  		 Log::debug('OrmSessionProvider::setSessionId Initalizing session from specified session id and dropping a new session cookie');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if($persistedSession = ORM::find($this-&gt;getSession())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		     $this-&gt;persisted = true;</sourceline>
        <sourceline coveredcount="-1">	  		     $data = unserialize($persisted[0]-&gt;getData());</sourceline>
        <sourceline coveredcount="-1">  		 	 	 $this-&gt;session-&gt;setData($data);</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the value corresponding to the specified key stored in the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The variable's key/name</sourceline>
        <sourceline coveredcount="0">	   * @return The value if present, otherwise null.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function get($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 if(!$store = $this-&gt;session-&gt;getData()) return;</sourceline>
        <sourceline coveredcount="1">	  		 if(isset($store[$key])) return $store[$key];</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets a new Session variable.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The variable name</sourceline>
        <sourceline coveredcount="0">	   * @param String $value The variable value</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function set($key, $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 $store = $this-&gt;getSession()-&gt;getData();</sourceline>
        <sourceline coveredcount="5">	  		 $store[$key] = $value;</sourceline>
        <sourceline coveredcount="5">	  		 $this-&gt;getSession()-&gt;setData($store);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Refreshes the session by loading a fresh version from the database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function refresh() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         $this-&gt;persisted = true;</sourceline>
        <sourceline coveredcount="-1">  	 	 	 $persisted = ORM::find($this-&gt;session);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 	 	 if($persisted) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 	 	    $data = unserialize($persisted-&gt;getData());</sourceline>
        <sourceline coveredcount="-1">  	 	 	  	$this-&gt;session-&gt;setData($data);</sourceline>
        <sourceline coveredcount="-1">  	 	 	 }</sourceline>
        <sourceline coveredcount="0">  	 	 	 else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 	 	 	$this-&gt;session-&gt;setData(array());</sourceline>
        <sourceline coveredcount="0">  	 	 	 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Clears the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function clear() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 setcookie('AGILEPHP_SESSION_ID', '', time()-3600, '/');</sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;session-&gt;setData(array());</sourceline>
        <sourceline coveredcount="1">	  		 Log::debug('OrmSessionProvider::clear Session cleared');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Clears the SessionScope store and deletes the Session ActiveRecord from the</sourceline>
        <sourceline coveredcount="0">	   * database.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function destroy() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  		 	 ORM::delete($this-&gt;getSession());</sourceline>
        <sourceline coveredcount="1">  		 	 $this-&gt;clear();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Persists a serialized instance of the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function persist() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 Log::debug('OrmSessionProvider::persist Persisting session');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     if(!$store = $this-&gt;getSession()-&gt;getData()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	        if($this-&gt;persisted) $this-&gt;destroy();</sourceline>
        <sourceline coveredcount="-1">	  	        return;</sourceline>
        <sourceline coveredcount="-2">	  	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     if(is_array($this-&gt;getSession()-&gt;getData())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		 	 	$data = serialize($this-&gt;getSession()-&gt;getData());</sourceline>
        <sourceline coveredcount="-1">                $this-&gt;getSession()-&gt;setData($data);</sourceline>
        <sourceline coveredcount="-1">	  	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	 	     if(!$this-&gt;persisted) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	 	     	$this-&gt;getSession()-&gt;setCreated('now');</sourceline>
        <sourceline coveredcount="-1">			 	ORM::persist($this-&gt;getSession());</sourceline>
        <sourceline coveredcount="-1">			 	$this-&gt;persisted = true;</sourceline>
        <sourceline coveredcount="-1">			 	return;</sourceline>
        <sourceline coveredcount="-2">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		     ORM::merge($this-&gt;getSession());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean flag indicating whether or not the current session</sourceline>
        <sourceline coveredcount="0">	   * data is persisted.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the session data is persisted, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function isPersisted() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  return $this-&gt;persisted === true;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Generates a 21 character session id</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The generated session id</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createSessionId() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			  $numbers = '1234567890';</sourceline>
        <sourceline coveredcount="1">			  $lcase = 'abcdefghijklmnopqrstuvwzyz';</sourceline>
        <sourceline coveredcount="1">			  $ucase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			  $id = null;</sourceline>
        <sourceline coveredcount="1">			  for($i=0; $i&lt;21; $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			  	   if(rand(0, 1)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			  	   	   $cRand = rand(0, 25);</sourceline>
        <sourceline coveredcount="1">			  	   	   $id .= (rand(0, 1)) ? $lcase[$cRand] : $ucase[$cRand];</sourceline>
        <sourceline coveredcount="1">			  	   }</sourceline>
        <sourceline coveredcount="0">			  	   else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			  	   	   $nRand = rand(0, 9);</sourceline>
        <sourceline coveredcount="1">			  	   	   $id .= $numbers[$nRand];</sourceline>
        <sourceline coveredcount="0">			  	   }</sourceline>
        <sourceline coveredcount="1">			  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $this-&gt;session-&gt;setId($id);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Persist the Session state just before the object is destroyed.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __destruct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	 try {</sourceline>
        <sourceline coveredcount="-1">		  	       if(!ORMFactory::getDialect()-&gt;getPDO())</sourceline>
        <sourceline coveredcount="-1">		  	           ORMFactory::getDialect()-&gt;__construct(ORMFactory::getDialect()-&gt;getDatabase());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	       if(!$this-&gt;persisted) $this-&gt;persist();</sourceline>
        <sourceline coveredcount="0">		  	 }</sourceline>
        <sourceline coveredcount="-1">		  	 catch(Exception $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">		  	 	    $message = 'OrmSessionProvider::__destruct ' . $e-&gt;getMessage();</sourceline>
        <sourceline coveredcount="-2">		  		    Log::error($message);</sourceline>
        <sourceline coveredcount="0">		  	}</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="PhpSessionProvider" methodcount="12" methodscovered="0" statementcount="0" statementscovered="0" totalcount="12" totalcovered="0">
      <sourcefile name="PhpSessionProvider.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/scope/PhpSessionProvider.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Maintains persistent session data that lives over multiple page requests. Data</sourceline>
        <sourceline coveredcount="0"> * is stored in a traditional PHP session.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class PhpSessionProvider implements SessionProvider {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private $session;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if(!@session_id()) @session_start();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     if(isset($_SESSION['AGILEPHP_SESSION'])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	      	 Log::debug('SessionScope::__construct Initalizing session from previous PHP session.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	      	 $this-&gt;session = unserialize($_SESSION['AGILEPHP_SESSION']);</sourceline>
        <sourceline coveredcount="0">	  	      	 if(!$this-&gt;session) $this-&gt;session = new Session();</sourceline>
        <sourceline coveredcount="0">	  	      	 $this-&gt;session-&gt;setId(session_id());</sourceline>
        <sourceline coveredcount="0">	  	      }</sourceline>
        <sourceline coveredcount="0">	  	      else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	      	      Log::debug('SessionScope::__construct Initalizing session with new PHP session.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	      	      $this-&gt;session = new Session();</sourceline>
        <sourceline coveredcount="0">  	      	      $this-&gt;session-&gt;setId(session_id());</sourceline>
        <sourceline coveredcount="0">  	      	      $_SESSION['AGILEPHP_SESSION'] = serialize($this-&gt;session);</sourceline>
        <sourceline coveredcount="0">	  	      }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean flag indicating whether or not the current session</sourceline>
        <sourceline coveredcount="0">	   * data is persisted.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the session data is persisted, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isPersisted() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;persisted == true;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the session domain model which maintains the id and data for</sourceline>
        <sourceline coveredcount="0">	   * the current session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Session The current Session instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSession() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;session;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the session id and restores a previously persisted Session if one exists.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setSessionId($id) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         session_unset();</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;session-&gt;setId($id);</sourceline>
        <sourceline coveredcount="0">	  		 session_id($id);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the session id for the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The session id</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSessionId() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;session-&gt;getId();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the value corresponding to the specified key stored in the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The variable's key/name</sourceline>
        <sourceline coveredcount="0">	   * @return The value if present, otherwise null.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function get($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if(!$this-&gt;session-&gt;getData()) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $store = unserialize($this-&gt;session-&gt;getData());</sourceline>
        <sourceline coveredcount="0">	  		 if(isset($store[$key])) return $store[$key];</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets a new Session variable.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The variable name</sourceline>
        <sourceline coveredcount="0">	   * @param String $value The variable value</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function set($key, $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $store = unserialize($this-&gt;getSession()-&gt;getData());</sourceline>
        <sourceline coveredcount="0">	  		 $store[$key] = $value;</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;session-&gt;setData(serialize($store));</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Clears the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function clear() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         $this-&gt;session-&gt;setId(null);</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;session-&gt;setData(array());</sourceline>
        <sourceline coveredcount="0">	  		 $_SESSION['AGILEPHP_SESSION'] = serialize(null);</sourceline>
        <sourceline coveredcount="0">	  		 Log::debug('SessionScope::clear Session cleared');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Clears the SessionScope store and deletes the Session ActiveRecord from the</sourceline>
        <sourceline coveredcount="0">	   * database.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function destroy() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         unset($_SESSION);</sourceline>
        <sourceline coveredcount="0">  		 	 session_unset();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Persists a serialized instance of the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function persist() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 Log::debug('SessionScope::persist Persisting session');</sourceline>
        <sourceline coveredcount="0">	  	     $_SESSION['AGILEPHP_SESSION'] = serialize($this-&gt;session);</sourceline>
        <sourceline coveredcount="0">			 if(!$this-&gt;getSession()-&gt;getData()) $this-&gt;destroy();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Here to make interface happy. Doesn't do anything</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function refresh() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         session_id($this-&gt;session-&gt;getId());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Persist the Session data state to database just before the object</sourceline>
        <sourceline coveredcount="0">	   * is destroyed.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __destruct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	 try {</sourceline>
        <sourceline coveredcount="0">		  		   $this-&gt;persist();</sourceline>
        <sourceline coveredcount="0">		  	 }</sourceline>
        <sourceline coveredcount="0">		  	 catch(Exception $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		  	 	    $message = 'SessionScope::__destruct ' . $e-&gt;getMessage();</sourceline>
        <sourceline coveredcount="0">		  		    Log::error($message);</sourceline>
        <sourceline coveredcount="0">		  	}</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ApplicationScope" methodcount="9" methodscovered="6" statementcount="33" statementscovered="18" totalcount="42" totalcovered="24">
      <sourcefile name="ApplicationScope.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/scope/ApplicationScope.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Uses the server temp directory to store PHP application data</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class ApplicationScope {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private static $instance;</sourceline>
        <sourceline coveredcount="0">	  private static $appName;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $store = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Inializes the ApplicationScope. If a file is already present in the servers temp</sourceline>
        <sourceline coveredcount="0">	   * directory (determined by HTTP HOST header in filename), the ApplicationScope is</sourceline>
        <sourceline coveredcount="0">	   * initalized from the previously serialized state; Otherwise a new file is created</sourceline>
        <sourceline coveredcount="0">	   * with a fresh ApplicationScope state.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	 	  $file = self::getAppTempFile();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	 	  if(file_exists($file) &amp;&amp; !count($this-&gt;store)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	 	  	  $data = null;</sourceline>
        <sourceline coveredcount="-1">	  	 	  	  $h = fopen($file, 'r');</sourceline>
        <sourceline coveredcount="-1">	  	 	  	  while(!feof($h))</sourceline>
        <sourceline coveredcount="-1">	  	 	  	         $data .= fgets($h, filesize($file));</sourceline>
        <sourceline coveredcount="-1">	  	 	  	  fclose($h);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	 	  	  $this-&gt;store = unserialize($data);</sourceline>
        <sourceline coveredcount="-1">	  	 	  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a singleton instance of ApplicationScope</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $appName An optional application name. Defaults to the HTTP HOST header.</sourceline>
        <sourceline coveredcount="0">	   * @return An instance of ApplicationScope which contains the state for the specified application</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getInstance() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     if(self::$instance == null)</sourceline>
        <sourceline coveredcount="1">	  	         self::$instance = new self;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     return self::$instance;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the value corresponding to the specified key.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The key to retrieve from the ApplicationScope store.</sourceline>
        <sourceline coveredcount="0">	   * @return mixed The key value if its present, otherwise null is returned.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function get($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     if(isset($this-&gt;store[$key]) &amp;&amp; !empty($this-&gt;store[$key]))</sourceline>
        <sourceline coveredcount="1">	  	     	 return $this-&gt;store[$key];</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets an ApplicationScope variable</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The variable name</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $value The variable value</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function set($key, $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;store[$key] = $value;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Clears the ApplicationScope state</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function clear() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;store = array();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Clears the ApplicationScope store and deletes the temp file</sourceline>
        <sourceline coveredcount="0">	   * associated with the application.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function destroy() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;clear();</sourceline>
        <sourceline coveredcount="1">	  		 if(file_exists(self::getAppTempFile()))</sourceline>
        <sourceline coveredcount="1">	  		    unlink(self::getAppTempFile());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Persist the ApplicationScope state to disk</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __destruct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  $this-&gt;persist();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Persists the ApplicationScope state</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function persist() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 if(count($this-&gt;store)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	     $h = fopen(self::getAppTempFile(), 'w');</sourceline>
        <sourceline coveredcount="-1">				 fwrite($h, serialize($this-&gt;store));</sourceline>
        <sourceline coveredcount="-1">				 fclose($h);</sourceline>
        <sourceline coveredcount="-1">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 if(!count($this-&gt;store) &amp;&amp; file_exists(self::getAppTempFile()))</sourceline>
        <sourceline coveredcount="-1">			 	 unlink(self::getAppTempFile());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a string representing the full path to the temp file</sourceline>
        <sourceline coveredcount="0">	   * which stores the ApplicationScope state.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private static function getAppTempFile() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	 	  $tmp = tempnam('agilephp', 'agilephp-');</sourceline>
        <sourceline coveredcount="1"> 			  $path = dirname($tmp) . '/agilephp-' . AgilePHP::getAppName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1"> 			  if(file_exists($tmp)) unlink($tmp);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1"> 			  return $path;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="SessionScope" methodcount="13" methodscovered="6" statementcount="27" statementscovered="17" totalcount="40" totalcovered="23">
      <sourcefile name="SessionScope.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/scope/SessionScope.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Factory responsible for maintaining persistent session data that</sourceline>
        <sourceline coveredcount="0"> * lives over multiple page requests.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class SessionScope implements SessionProvider {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private static $instance;</sourceline>
        <sourceline coveredcount="0">	  private $provider;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private function __clone() { }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initializes a new SessionScope instance using agilephp.xml configuration</sourceline>
        <sourceline coveredcount="0">	   * if present, otherwise PhpSessionProvider is used as the default provider.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	          $xml = AgilePHP::getConfiguration();</sourceline>
        <sourceline coveredcount="1">              for($i=0; $i&lt;count((array)$xml-&gt;scope); $i++ ) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                  if((string)$xml-&gt;scope[$i]-&gt;attributes()-&gt;type == 'session') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                      $provider = (string)$xml-&gt;scope[$i]-&gt;attributes()-&gt;provider;</sourceline>
        <sourceline coveredcount="1">                      $this-&gt;provider = $provider ? new $provider : new PhpSessionProvider();</sourceline>
        <sourceline coveredcount="1">                      return;</sourceline>
        <sourceline coveredcount="-2">                  }</sourceline>
        <sourceline coveredcount="-1">              }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">              $this-&gt;provider = new PhpSessionProvider();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a singleton instance of SessionScope</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return SessionScope Singleton instance of SessionScope</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getInstance() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">	  	     if( self::$instance == null )</sourceline>
        <sourceline coveredcount="7">	  	         self::$instance = new self;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">	  	     return self::$instance;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the SessionProvider responsible for session persistence</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return SessionProvider The session persistence provider</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getProvider() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         return $this-&gt;provider;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the session domain model object which maintains the id and data for</sourceline>
        <sourceline coveredcount="0">	   * the current Session's ActiveRecord.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Session The current Session instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSession() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return $this-&gt;provider-&gt;getSession();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the session id for the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The session id</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSessionId() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 return $this-&gt;provider-&gt;getSessionId();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the session id and restores a previously persisted Session if one exists.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setSessionId($id) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;provider-&gt;setSessionId($id);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the value corresponding to the specified key stored in the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The variable's key/name</sourceline>
        <sourceline coveredcount="0">	   * @return The value if present, otherwise null.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function get($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return $this-&gt;provider-&gt;get($key);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets a new Session variable.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The variable name</sourceline>
        <sourceline coveredcount="0">	   * @param String $value The variable value</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function set($key, $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 $this-&gt;provider-&gt;set($key, $value);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Refreshes the session by loading a fresh version from the database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function refresh() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	          $this-&gt;provider-&gt;refresh();</sourceline>
        <sourceline coveredcount="-1">	          Log::debug( 'SessionScope::clear Session refreshed' );</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Clears the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function clear() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;provider-&gt;clear();</sourceline>
        <sourceline coveredcount="-1">	  		 Log::debug( 'SessionScope::clear Session cleared' );</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Clears the SessionScope store and deletes the Session ActiveRecord from the</sourceline>
        <sourceline coveredcount="0">	   * database.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function destroy() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  		 	 $this-&gt;provider-&gt;destroy();</sourceline>
        <sourceline coveredcount="1">  		 	 Log::debug( 'SessionScope::destroy Session destroyed' );</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Persists a serialized instance of the current Session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function persist() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     $this-&gt;provider-&gt;persist();</sourceline>
        <sourceline coveredcount="-1">	  	     Log::debug( 'SessionScope::persist Session persisted' );</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="RequestScope" methodcount="9" methodscovered="3" statementcount="44" statementscovered="17" totalcount="53" totalcovered="20">
      <sourcefile name="RequestScope.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/scope/RequestScope.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Stores PHP $_POST variables, performs sanitizing, and has built</sourceline>
        <sourceline coveredcount="0"> * in support to guard against CSFR attacks using a double cookie</sourceline>
        <sourceline coveredcount="0"> * submit approach.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class RequestScope {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private static $instance;</sourceline>
        <sourceline coveredcount="0">	  private $store;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initialize RequestScope by storing all HTTP POST variables.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * $_GET variables are not used in AgilePHP for two reasons:</sourceline>
        <sourceline coveredcount="0">	   * 1) 255 character limit</sourceline>
        <sourceline coveredcount="0">	   * 2) GET requests make XSS attacks easier to execute</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	 	  foreach($_POST as $key =&gt; $value)</sourceline>
        <sourceline coveredcount="1">	  	      	      $this-&gt;store[$key] = $_POST[$key];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	      if(isset($_COOKIE['AGILEPHP_REQUEST_TOKEN']) &amp;&amp; strtolower($_SERVER['REQUEST_METHOD']) == 'post') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	      	  if(!isset($this-&gt;store['AGILEPHP_REQUEST_TOKEN']) ||</sourceline>
        <sourceline coveredcount="-1">	  	      	  			$this-&gt;store['AGILEPHP_REQUEST_TOKEN'] != $_COOKIE['AGILEPHP_REQUEST_TOKEN']) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	      	  	  $rt = (!isset($this-&gt;store['AGILEPHP_REQUEST_TOKEN'])) ? null : $this-&gt;store['AGILEPHP_REQUEST_TOKEN'];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	      	  	  Log::debug('RequestScope::__construct Found invalid request token \'' . $rt . '\', expected \'' . $_COOKIE['AGILEPHP_REQUEST_TOKEN'] . '\'.');</sourceline>
        <sourceline coveredcount="-1">	  	      	  	  throw new FrameworkException('Invalid request token \'' . $rt . '\'. Possible Cross-Site Forgery Request (CSFR) attempt.');</sourceline>
        <sourceline coveredcount="-2">	  	      	  }</sourceline>
        <sourceline coveredcount="0">	  	      	  else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	      	  	  $this-&gt;invalidate();</sourceline>
        <sourceline coveredcount="0">	  	      	  }</sourceline>
        <sourceline coveredcount="-1">	  	      }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns singleton instance of RequestScope</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Singleton instance of RequestScope</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function getInstance() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     if(self::$instance == null)</sourceline>
        <sourceline coveredcount="1">	  	         self::$instance = new self;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     return self::$instance;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets a request variable.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The key/index of for the variable</sourceline>
        <sourceline coveredcount="0">	   * @param String $value The variable value</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function set($key, $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;store[$key] = $value;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a request variable.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $key The key/index of the variable</sourceline>
        <sourceline coveredcount="0">	   * @return The variable value</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function get($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     if(isset($this-&gt;store[$key]) &amp;&amp; !empty($this-&gt;store[$key]))</sourceline>
        <sourceline coveredcount="1">	  	     	 return (is_array($this-&gt;store[$key])) ? $this-&gt;store[$key] : urldecode($this-&gt;store[$key]);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a sanitized store variable which protects against SQL injection,</sourceline>
        <sourceline coveredcount="0">	   * XSS and XSFR attacks. The variable value is passed first through strip_tags,</sourceline>
        <sourceline coveredcount="0">	   * followed by addslashes and finally htmlspecialchars. Use htmlspecialchars_decode</sourceline>
        <sourceline coveredcount="0">	   * to decode the sanitized value.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $key The key/index of the variable</sourceline>
        <sourceline coveredcount="0">	   * @return String The sanitized value</sourceline>
        <sourceline coveredcount="0">	   * @see http://en.wikipedia.org/wiki/Cross-site_scripting</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSanitized($key) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if(isset($this-&gt;store[$key]) &amp;&amp; !empty($this-&gt;store[$key])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 	 if(is_array($this-&gt;store[$key])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	 	 for($i=0; $i&lt;count($this-&gt;store[$key]); $i++)</sourceline>
        <sourceline coveredcount="-1">	  		 	 	 	 $this-&gt;store[$key][$i] = htmlspecialchars(addslashes(strip_tags(urldecode($this-&gt;store[$key][$i]))));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	 	 return $this-&gt;store[$key];</sourceline>
        <sourceline coveredcount="-2">	  		 	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 	 return htmlspecialchars(addslashes(strip_tags(urldecode($this-&gt;store[$key]))));</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the variable store.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return array Returns an array containing all PHP $_GET and $_POST variables</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getParameters() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;store;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a 20-30 character token used to guard against CSFR attacks.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The generated request token</sourceline>
        <sourceline coveredcount="0">	   * @see http://en.wikipedia.org/wiki/Cross-site_request_forgery</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function createToken() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 $numbers = '1234567890';</sourceline>
        <sourceline coveredcount="-1">			 $lcase = 'abcdefghijklmnopqrstuvwzyz';</sourceline>
        <sourceline coveredcount="-1">			 $ucase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 $token = null;</sourceline>
        <sourceline coveredcount="-1">			 for($i=0; $i&lt;21; $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  	  if(rand(0, 1)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  	  	  $cRand = rand(0, 25);</sourceline>
        <sourceline coveredcount="-1">			  	   	  $token .= (rand(0, 1)) ? $lcase[$cRand] : $ucase[$cRand];</sourceline>
        <sourceline coveredcount="-1">			  	  }</sourceline>
        <sourceline coveredcount="0">			  	  else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  	   	  $nRand = rand(0, 9);</sourceline>
        <sourceline coveredcount="-1">			  	   	  $token .= $numbers[$nRand];</sourceline>
        <sourceline coveredcount="0">			  	  }</sourceline>
        <sourceline coveredcount="-1">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 	 setcookie('AGILEPHP_REQUEST_TOKEN', $token, time()+3600, '/'); // 1 hour</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $token;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Expires request token cookie.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function invalidate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1"> 		 	 setcookie('AGILEPHP_REQUEST_TOKEN', '', time()-3600, '/');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sanitizes the specified data by running it through htmlspecialchars,</sourceline>
        <sourceline coveredcount="0">	   * addslashes, and strip_tags.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $data The data to sanitize</sourceline>
        <sourceline coveredcount="0">	   * @return The sanitized data</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function sanitize($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return htmlspecialchars(addslashes(strip_tags($data)));</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Session" methodcount="7" methodscovered="4" statementcount="7" statementscovered="5" totalcount="14" totalcovered="9">
      <sourcefile name="Session.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/scope/Session.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Session domain model object.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class Session extends DomainModel {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $id;</sourceline>
        <sourceline coveredcount="0">	  private $data;</sourceline>
        <sourceline coveredcount="0">	  private $created;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function __construct() { }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the session id</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $id The session id</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setId($id) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;id = $id;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the session id</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String Session id</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getId() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">	  		 return  $this-&gt;id;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Stores the serialized session</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $data Serialized session data</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setData($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  		 $this-&gt;data = $data;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the serialized session data</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String Serialized session data</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getData() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">	  		 return $this-&gt;data;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Timestamp indicating when the session was created</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Date $dateTime Timestamp indicating when the session was created</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setCreated($timestamp) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;created = date('Y-m-d H:i:s', strtotime($timestamp));</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the timestamp when the session was created</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Date Timestamp indicating when the session was created</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getCreated() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;created;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Stateful" methodcount="2" methodscovered="0" statementcount="0" statementscovered="0" totalcount="2" totalcovered="0">
      <sourcefile name="Stateful.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/scope/Stateful.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for managing the state of a class which is annotated with</sourceline>
        <sourceline coveredcount="0"> * #@Stateful.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.scope</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Stateful</sourceline>
        <sourceline coveredcount="0"> * class MyStatefulClass {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 private $foo;		// retains value between page hits</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 public function __construct() { }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // ......</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="0" startclass="1">class Stateful {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Loads the class from the current session if it exists, otherwise a new</sourceline>
        <sourceline coveredcount="0">	   * instance is created and stored in the current session.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The context of the intercepted call</sourceline>
        <sourceline coveredcount="0">	   * @return InvocationContext if the authentication was successful.</sourceline>
        <sourceline coveredcount="0">	   * @throws FrameworkException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function restore(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $reflector = new ReflectionClass($ic-&gt;getTarget());</sourceline>
        <sourceline coveredcount="0">	  		 $className = $reflector-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $session = Scope::getSessionScope();</sourceline>
        <sourceline coveredcount="0">	  		 $instance = $session-&gt;get('STATEFUL_' . $className);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if($instance) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	 $ic-&gt;setTarget($instance);</sourceline>
        <sourceline coveredcount="0">	  		 	 return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  #@AfterInvoke</sourceline>
        <sourceline coveredcount="0">	  public function persist(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $reflector = new ReflectionClass($ic-&gt;getTarget());</sourceline>
        <sourceline coveredcount="0">	  		 $className = $reflector-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $session = Scope::getSessionScope();</sourceline>
        <sourceline coveredcount="0">	  		 $session-&gt;set('STATEFUL_' . $className, $ic-&gt;getTarget());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.orm" methodcount="162" methodscovered="88" statementcount="446" statementscovered="296" totalcount="608" totalcovered="384">
    <class name="IdentityMap" methodcount="5" methodscovered="0" statementcount="43" statementscovered="26" totalcount="48" totalcovered="26">
      <sourcefile name="IdentityMap.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/IdentityMap.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Ensures that each object gets loaded only once by</sourceline>
        <sourceline coveredcount="0"> * keeping every loaded object in a map. Looks up</sourceline>
        <sourceline coveredcount="0"> * objects using the map when referring to them.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class IdentityMap {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private static $map = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns the static identity map used to track domain model state.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return array Identity map</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getMap() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             return self::$map;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Retrieves the requested model from the IdentityMap.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param DomainModel $model An ActiveRecord model instance to inspect</sourceline>
        <sourceline coveredcount="0">       * @return mixed The ActiveRecord model if its already been looked up and</sourceline>
        <sourceline coveredcount="0">       *               cached, false otherwise.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function get(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             list($class, $key) = self::createKey($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                $cacheKey = 'AGILEPHP_ORM_IDENTITYMAP_' . $class . '_' . $key;</sourceline>
        <sourceline coveredcount="-1">                if($cacher-&gt;exists($cacheKey)) return $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // If the DomainModel has already been pulled, return it</sourceline>
        <sourceline coveredcount="1">             if(isset(self::$map[$class][$key])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                if(isset($cacher)) $cacher-&gt;set($cacheKey, self::$map[$class][$key]);</sourceline>
        <sourceline coveredcount="-1">                return self::$map[$class][$key];</sourceline>
        <sourceline coveredcount="-2">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             return false;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Adds a new DomainModel model instance to the IdentityMap stack.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param DomainModel $model The DomainModel instance to add to the stack.</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function add(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">             list($class, $key) = self::createKey($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">             self::$map[$class][$key] = $model;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">             if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                $cacheKey = 'AGILEPHP_ORM_IDENTITYMAP_' . $class . '_' . $key;</sourceline>
        <sourceline coveredcount="-1">                $cacher-&gt;set($cacheKey, $model);</sourceline>
        <sourceline coveredcount="-1">             }</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Removes a model from the IdentityMap (and cache if an AgilePHP CacheProvider</sourceline>
        <sourceline coveredcount="0">       * is enabled).</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param DomainModel $model The DomainModel instance to remove.</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function remove(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">             list($class, $key) = self::createKey($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">             if(isset(self::$map[$class][$key]))</sourceline>
        <sourceline coveredcount="11">                unset(self::$map[$class][$key]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">             if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                $cacheKey = 'AGILEPHP_ORM_IDENTITYMAP_' . $class . '_' . $key;</sourceline>
        <sourceline coveredcount="-1">                if($cacher-&gt;exists($cacheKey)) $cacher-&gt;delete($key);</sourceline>
        <sourceline coveredcount="-1">             }</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Create a unique class "key" used to distinguish the DomainModel. This algorithm</sourceline>
        <sourceline coveredcount="0">   	   * simple appends each primary key value and performs some generic sanitation so the</sourceline>
        <sourceline coveredcount="0">   	   * values can be used as an associative array key.</sourceline>
        <sourceline coveredcount="0">   	   *</sourceline>
        <sourceline coveredcount="0">       * @param DomainModel $model The DomainModel instance to persist</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      private static function createKey(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">              $table = ORMFactory::getDialect()-&gt;getTableByModel($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">              // If this is a many-to-many relationship, primary keys are foriegn key values</sourceline>
        <sourceline coveredcount="15">   	          $pkeys = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="15">   	          $fkeys = $table-&gt;getForeignKeyColumns();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">   	          $count = count($pkeys);</sourceline>
        <sourceline coveredcount="15">   	          $key = '';</sourceline>
        <sourceline coveredcount="15">   	          for($i=0; $i&lt;$count; $i++ ) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">   	              $accessor = 'get' . ucfirst($pkeys[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">   	              if(is_object($model-&gt;$accessor())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		 		 for($i=0; $i&lt;count($fkeys); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		 		     $fkey = $fkeys[$i]-&gt;getForeignKey();</sourceline>
        <sourceline coveredcount="-1">    		 		     $key .= '_' . $fkey-&gt;getReferencedTableInstance()-&gt;getModel() . '_' . $fkey-&gt;getReferencedColumn();</sourceline>
        <sourceline coveredcount="-1">    		 		 }</sourceline>
        <sourceline coveredcount="-1">   	              }</sourceline>
        <sourceline coveredcount="0">   	              else</sourceline>
        <sourceline coveredcount="15">   	                $key .= $model-&gt;$accessor();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">   	              if(($i+1) &lt; $count) $key .= '_-';</sourceline>
        <sourceline coveredcount="15">   	          }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">   	          return array($class = get_class($model), preg_replace('/[\s]+/', '_', $key));</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="DomainModel" methodcount="6" methodscovered="0" statementcount="33" statementscovered="2" totalcount="39" totalcovered="2">
      <sourcefile name="DomainModel.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/DomainModel.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Base implementation for domain models (a model with business logic). Provides</sourceline>
        <sourceline coveredcount="0"> * helper methods for CRUD (create/read/update/delete) operations.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">abstract class DomainModel {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">         abstract public function __construct();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">         /**</sourceline>
        <sourceline coveredcount="0">          * Persists/saves the DomainModel ActiveRecord state to</sourceline>
        <sourceline coveredcount="0">          * the data source.</sourceline>
        <sourceline coveredcount="0">          *</sourceline>
        <sourceline coveredcount="0">          * @return void</sourceline>
        <sourceline coveredcount="0">          * @throws ORMException</sourceline>
        <sourceline coveredcount="0">          */</sourceline>
        <sourceline coveredcount="0">         public function persist() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                ORMFactory::getDialect()-&gt;persist($this);</sourceline>
        <sourceline coveredcount="0">         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">          * Looks up the ActiveRecord state from the data source using</sourceline>
        <sourceline coveredcount="0">          * values for fields which map to primary keys.</sourceline>
        <sourceline coveredcount="0">          *</sourceline>
        <sourceline coveredcount="0">          * @return void</sourceline>
        <sourceline coveredcount="0">          * @throws ORMException</sourceline>
        <sourceline coveredcount="0">          * @throws FrameworkException</sourceline>
        <sourceline coveredcount="0">          */</sourceline>
        <sourceline coveredcount="0">         public function get() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                if(!$model = ORMFactory::getDialect()-&gt;get($this)) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                // @todo Interceptors are still being somewhat intrusive to reflection operations</sourceline>
        <sourceline coveredcount="-1">	  		    if(method_exists($model, 'getInterceptedInstance')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		       $data = $model-&gt;getInterceptedInstance();</sourceline>
        <sourceline coveredcount="-1">	  		       $class = new ReflectionClass($data);</sourceline>
        <sourceline coveredcount="-1">	  		    }</sourceline>
        <sourceline coveredcount="0">	  		    else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		       $class = new ReflectionClass($model);</sourceline>
        <sourceline coveredcount="-1">	  		       $data = $models[0];</sourceline>
        <sourceline coveredcount="0">	  		    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                foreach($class-&gt;getProperties() as $property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		 		 $context = null;</sourceline>
        <sourceline coveredcount="-1">		  		 		 if($property-&gt;isPublic())</sourceline>
        <sourceline coveredcount="-1">		  		 		  	$context = 'public';</sourceline>
        <sourceline coveredcount="-1">		  		 		 else if($property-&gt;isProtected())</sourceline>
        <sourceline coveredcount="-1">		  		 		 	$context = 'protected';</sourceline>
        <sourceline coveredcount="-1">		  		 		 else if($property-&gt;isPrivate())</sourceline>
        <sourceline coveredcount="-1">		  		 		  	 $context = 'private';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		 		 $value = null;</sourceline>
        <sourceline coveredcount="-1">		  		 		 if($context != 'public') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		 		  	$property-&gt;setAccessible(true);</sourceline>
        <sourceline coveredcount="-1">				  		 	$value = $property-&gt;getValue($data);</sourceline>
        <sourceline coveredcount="-1">				  		 	$property-&gt;setAccessible(false);</sourceline>
        <sourceline coveredcount="-1">		  		 		 }</sourceline>
        <sourceline coveredcount="0">		  		 		 else</sourceline>
        <sourceline coveredcount="-1">		  		 		  	$value = $property-&gt;getValue($data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		 		 $mutator = 'set' . ucfirst($property-&gt;getName());</sourceline>
        <sourceline coveredcount="-1">		  		 		 $this-&gt;$mutator($value);</sourceline>
        <sourceline coveredcount="-1">                }</sourceline>
        <sourceline coveredcount="0">         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">          * Merges/updates the data source record mapped by the</sourceline>
        <sourceline coveredcount="0">          * DomainModel ActiveRecord state.</sourceline>
        <sourceline coveredcount="0">          *</sourceline>
        <sourceline coveredcount="0">          * @return void</sourceline>
        <sourceline coveredcount="0">          * @throws ORMException</sourceline>
        <sourceline coveredcount="0">          */</sourceline>
        <sourceline coveredcount="0">         public function merge() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                ORMFactory::getDialect()-&gt;merge($this);</sourceline>
        <sourceline coveredcount="0">         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">          * Deletes/destroys the data source record mapped by the</sourceline>
        <sourceline coveredcount="0">          * DomainModel ActiveRecord state.</sourceline>
        <sourceline coveredcount="0">          *</sourceline>
        <sourceline coveredcount="0">          * @return void</sourceline>
        <sourceline coveredcount="0">          * @throws ORMException</sourceline>
        <sourceline coveredcount="0">          */</sourceline>
        <sourceline coveredcount="0">         public function delete() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                ORMFactory::getDialect()-&gt;delete($this);</sourceline>
        <sourceline coveredcount="0">         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">          * Calls/executes a stored procedure mapped to this DomainModel in orm.xml</sourceline>
        <sourceline coveredcount="0">          *</sourceline>
        <sourceline coveredcount="0">          * @return void</sourceline>
        <sourceline coveredcount="0">          * @throws ORMException</sourceline>
        <sourceline coveredcount="0">          */</sourceline>
        <sourceline coveredcount="0">         public function call() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                ORMFactory::getDialect()-&gt;call($this);</sourceline>
        <sourceline coveredcount="0">         }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">         /**</sourceline>
        <sourceline coveredcount="0">          * Performs a SELECT * on the mapped table.</sourceline>
        <sourceline coveredcount="0">          *</sourceline>
        <sourceline coveredcount="0">          * @return array An array of records or an empty array if no records were located</sourceline>
        <sourceline coveredcount="0">          */</sourceline>
        <sourceline coveredcount="0">         public function find($maxResults = 25) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                ORMFactory::getDialect()-&gt;setMaxResults($maxResults);</sourceline>
        <sourceline coveredcount="-1">                return ORMFactory::getDialect()-&gt;find($this);</sourceline>
        <sourceline coveredcount="0">         }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ORMFactory" methodcount="7" methodscovered="2" statementcount="62" statementscovered="41" totalcount="69" totalcovered="43">
      <sourcefile name="ORMFactory.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/ORMFactory.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Factory responsible for returning a SQLDialect implementation</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">abstract class ORMFactory {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 private static $dialect;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Returns a SQLDialect singleton instance. Uses AgilePHP CacheProvider if enabled.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param string $ormXml Optional file path to an ORM XML configuration file. Defaults to approot/orm.xml</sourceline>
        <sourceline coveredcount="0">		  * @return SQLDialect</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">	     public static function getDialect($ormXml = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="40">	     		 if(self::$dialect == null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		    		 $xml = self::getXml($ormXml);</sourceline>
        <sourceline coveredcount="1">    	     		 $db = self::getDatabase($xml);</sourceline>
        <sourceline coveredcount="1">		     		 self::$dialect = self::connect($db);</sourceline>
        <sourceline coveredcount="1">	     		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="40">	     		 return self::$dialect;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Replaces the singleton instance with a new SQLDialect according to the specified orm.xml configuration</sourceline>
        <sourceline coveredcount="0">	      * and returns the instance.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $dialect The name of the SQLDialect implementation to create</sourceline>
        <sourceline coveredcount="0">	      * @param string $ormXml Optional file path to an ORM XML configuration file. Defaults to approot/orm.xml</sourceline>
        <sourceline coveredcount="0">	      * @return SQLDialect</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public static function load($ormXml = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	    		 $xml = self::getXml($ormXml, $ormXml == null);</sourceline>
        <sourceline coveredcount="3">                 $db = new Database($xml-&gt;database);</sourceline>
        <sourceline coveredcount="3">                 self::$dialect = self::connect($db);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">                 return self::$dialect;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Replaces the singleton instance with a new SQLDialect according to the specified orm.xml configuration</sourceline>
        <sourceline coveredcount="0">	      * and returns the instance.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $dialect The name of the SQLDialect implementation to create</sourceline>
        <sourceline coveredcount="0">	      * @param string $ormXml Optional file path to an ORM XML configuration file. Defaults to approot/orm.xml</sourceline>
        <sourceline coveredcount="0">	      * @return SQLDialect</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public static function createDialect($ormXml = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	    		 $xml = self::getXml($ormXml, $ormXml == null);</sourceline>
        <sourceline coveredcount="-1">                 $db = new Database($xml-&gt;database);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                 return self::connect($db);</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Connects to the specified Database.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param Database $db The database object to establish a connection with</sourceline>
        <sourceline coveredcount="0">	      * @return SQLDialect A dialect instance responsible for the specified database</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public static function connect(Database $db) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	     		$root = AgilePHP::getFrameworkRoot() . DIRECTORY_SEPARATOR . 'orm' .</sourceline>
        <sourceline coveredcount="4">	     		 				 DIRECTORY_SEPARATOR . 'dialect' . DIRECTORY_SEPARATOR;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	     		     switch($db-&gt;getType()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		  	 			 case 'sqlite':</sourceline>
        <sourceline coveredcount="1">	  	     		 	  	  require_once $root . 'SQLiteDialect.php';</sourceline>
        <sourceline coveredcount="1">	  	     		 	  	  return new SQLiteDialect($db);</sourceline>
        <sourceline coveredcount="-2">		  	     		 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">		  	     	     case 'mysql':</sourceline>
        <sourceline coveredcount="2">		  	     		 	  require_once $root . 'MySQLDialect.php';</sourceline>
        <sourceline coveredcount="2">		  	     		 	  return new MySQLDialect($db);</sourceline>
        <sourceline coveredcount="-2">	  	     		 	 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     		 	 case 'pgsql':</sourceline>
        <sourceline coveredcount="1">	  	     		 		  require_once $root . 'PGSQLDialect.php';</sourceline>
        <sourceline coveredcount="1">	  	     		 		  return new PGSQLDialect($db);</sourceline>
        <sourceline coveredcount="-2">	  	     		 	 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     		 	 case 'mssql':</sourceline>
        <sourceline coveredcount="-1">		  	     	       	  require_once $root . 'MSSQLDialect.php';</sourceline>
        <sourceline coveredcount="-1">		  	     	     	  return new MSSQLDialect($db);</sourceline>
        <sourceline coveredcount="-2">	  	     	     	 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     		 	 default:</sourceline>
        <sourceline coveredcount="-1">	  	     		 	 	throw new ORMException('Invalid database type');</sourceline>
        <sourceline coveredcount="-1">	                 }</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Destroys the singleton dialect instance.</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public static function destroy() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     		self::$dialect = null;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns orm.xml configuration. Uses AgilePHP CacheProvider if enabled.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $ormXml File path to the orm.xml file to load</sourceline>
        <sourceline coveredcount="0">	      * @return SimpleXMLElement</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">		 private static function getXml($ormXml, $useCache = true) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		 		 $orm_xml =($ormXml) ? $ormXml : AgilePHP::getWebRoot() . '/orm.xml';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		 		 if($useCache &amp;&amp; $cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 		    $cacheKey = 'AGILEPHP_ORMFACTORY_XML';</sourceline>
        <sourceline coveredcount="-1">		 		    if($cacher-&gt;exists($cacheKey)) return simplexml_load_string($cacher-&gt;get($cacheKey));</sourceline>
        <sourceline coveredcount="-1">		 		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">                 if(!file_exists($orm_xml))</sourceline>
        <sourceline coveredcount="4">                    throw new ORMException('Failed to load orm.xml at \'' . $orm_xml . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">                 $xml = simplexml_load_file($orm_xml);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">                 $dom = new DOMDocument();</sourceline>
        <sourceline coveredcount="4">                 $dom-&gt;Load($orm_xml);</sourceline>
        <sourceline coveredcount="4">                 if(!$dom-&gt;validate())</sourceline>
        <sourceline coveredcount="4">                     throw new ORMException($ormXml . ' Document Object Model validation failed.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">                 if(isset($cacher)) $cacher-&gt;set($cacheKey, $xml-&gt;asXML());</sourceline>
        <sourceline coveredcount="4">                 return $xml;</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Returns a Database instance which represents orm.xml configuration. Uses AgilePHP</sourceline>
        <sourceline coveredcount="0">		  * CacheProvider if enabled.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param SimpleXMLElement $xml The Database element from orm.xml</sourceline>
        <sourceline coveredcount="0">		  * @return Database A Database instance representing orm.xml configuration</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 private static function getDatabase(SimpleXMLElement $xml) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		         if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		  	    $cacheKey = 'AGILEPHP_ORM_DATABASE_' . $xml-&gt;database-&gt;name . $xml-&gt;database-&gt;type;</sourceline>
        <sourceline coveredcount="-1">    		  		if($cacher-&gt;exists($cacheKey)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		  		   $db = $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">    		  		}</sourceline>
        <sourceline coveredcount="0">    		  		else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		  		   $db = new Database($xml-&gt;database);</sourceline>
        <sourceline coveredcount="-1">    		  		   $cacher-&gt;set($cacheKey, $db);</sourceline>
        <sourceline coveredcount="0">    		  		}</sourceline>
        <sourceline coveredcount="-1">    		  	 }</sourceline>
        <sourceline coveredcount="0">    		  	 else</sourceline>
        <sourceline coveredcount="1">    		  	    return new Database($xml-&gt;database);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">    		  	 return $db;</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ORMException" methodcount="0" methodscovered="0" statementcount="1" statementscovered="1" totalcount="1" totalcovered="1">
      <sourcefile name="ORMException.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/ORMException.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Exceptions thrown by the ORM framework</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> * @throws ORMException</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class ORMException extends FrameworkException {}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Transactional" methodcount="2" methodscovered="2" statementcount="7" statementscovered="7" totalcount="9" totalcovered="9">
      <sourcefile name="Transactional.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/Transactional.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Class and method level Interceptor responsible for transactional SQL persistence.</sourceline>
        <sourceline coveredcount="0"> * Class level annotations begin a transaction when the class is constructed and commit/rollback</sourceline>
        <sourceline coveredcount="0"> * the transaction when the class is destructed. Likewise, method level annotations begin a</sourceline>
        <sourceline coveredcount="0"> * transaction just before the method is invoked and commit/rollback the transaction when the</sourceline>
        <sourceline coveredcount="0"> * method has completed. If an exception is encountered, a ROLLBACK is automatically issued.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="1" startclass="1">class Transactional {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">      public function beginTransaction(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">             ORMFactory::getDialect()-&gt;beginTransaction();</sourceline>
        <sourceline coveredcount="4">             return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      #@AfterInvoke</sourceline>
        <sourceline coveredcount="0">      public function commit(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">             ORMFactory::getDialect()-&gt;commit();</sourceline>
        <sourceline coveredcount="2">             return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Procedure" methodcount="10" methodscovered="4" statementcount="19" statementscovered="13" totalcount="29" totalcovered="17">
      <sourcefile name="Procedure.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/Procedure.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Represents a procedure in the AgilePHP orm component.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class Procedure {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $name;</sourceline>
        <sourceline coveredcount="0">	  private $model;</sourceline>
        <sourceline coveredcount="0">	  private $display;</sourceline>
        <sourceline coveredcount="0">	  private $description;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $parameters = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new Procedure instance.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param SimpleXMLElement $procedure The SimpleXMLElement instance representing the procedure.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct( SimpleXMLElement $procedure = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 if( $procedure) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">		  		 $this-&gt;name =(string)$procedure-&gt;attributes()-&gt;name;</sourceline>
        <sourceline coveredcount="3">		  		 $this-&gt;model =(string)$procedure-&gt;attributes()-&gt;model;</sourceline>
        <sourceline coveredcount="3">		  		 $this-&gt;display =(string)$procedure-&gt;attributes()-&gt;display;</sourceline>
        <sourceline coveredcount="3">		  		 $this-&gt;description =(string)$procedure-&gt;attributes()-&gt;description;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">		  		 foreach( $procedure-&gt;parameter as $parameter)</sourceline>
        <sourceline coveredcount="3">		  		 		  array_push( $this-&gt;parameters, new ProcedureParam( $parameter));</sourceline>
        <sourceline coveredcount="3">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the procedure name</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The name of the procedure</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setName( $name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the name of the procedure</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The procedure name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the model responsible for the procedure state</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $model The class name of the model responsible for the procedure's ActiveRecord state.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setModel( $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;model = $model;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the model responsible for the procedure state</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The class name of the model responsible for the procedure's ActiveRecord state.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getModel() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return $this-&gt;model;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the display name for the procedure.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $display A friendly display name for the procedure</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setDisplay( $display) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;display = $display;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the display name for the procedure</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The friendly display name for the procedure</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDisplay() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;display;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets a description for the procedure</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $description A user friendly description about the procedure</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setDescription( $description) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;description = $description;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the description for the procedure</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string A user friendly description about the procedure</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDescription() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;description;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets a list of parameters</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return array&lt;ProcedureParam&gt; An array of ProcedureParam instances which represent IN, OUT, and INOUT parameters</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getParameters() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return $this-&gt;parameters;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ProcedureParam" methodcount="8" methodscovered="4" statementcount="14" statementscovered="10" totalcount="22" totalcovered="14">
      <sourcefile name="ProcedureParam.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/ProcedureParam.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> *(at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Represents a procedure parameter in the AgilePHP orm component.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class ProcedureParam {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $name;</sourceline>
        <sourceline coveredcount="0">	  private $property;</sourceline>
        <sourceline coveredcount="0">	  private $mode;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function __construct( SimpleXMLElement $parameter = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 if( $parameter) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 	 $this-&gt;name =(string)$parameter-&gt;attributes()-&gt;name;</sourceline>
        <sourceline coveredcount="3">		  		 $this-&gt;property =(string)$parameter-&gt;attributes()-&gt;property;</sourceline>
        <sourceline coveredcount="3">		  		 $this-&gt;mode =(string)$parameter-&gt;attributes()-&gt;mode;</sourceline>
        <sourceline coveredcount="3">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the parameter</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The parameter name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setName( $name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the name of the parameter</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The parameter name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the parameter property mapping</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $property The name of the property which the parameter maps</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setProperty( $property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;property = $property;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the parameter property mapping</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The name of the property which the parameter maps</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getProperty() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;property;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the parameter type</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $mode The parameter type(IN|OUT|INOUT)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setMode( $mode) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;mode = $mode;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the parameter type</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The parameter type(IN|OUT|INOUT)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getMode() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return $this-&gt;mode;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Helper method which provides the name of the parameter property name</sourceline>
        <sourceline coveredcount="0">	   * as it exists inside its model. If a property attribute has been set,</sourceline>
        <sourceline coveredcount="0">	   * the property is returned, otherwise the name is returned.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The name of the parameter's model property</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getModelPropertyName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return($this-&gt;property) ? $this-&gt;property : $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="1">}</sourceline>
      </sourcefile>
    </class>
    <class name="Id" methodcount="2" methodscovered="2" statementcount="28" statementscovered="28" totalcount="30" totalcovered="30">
      <sourcefile name="Id.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/Id.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP interceptor responsible for performing SQL select to populate a</sourceline>
        <sourceline coveredcount="0"> * domain model object ActiveRecord with its current record state when its</sourceline>
        <sourceline coveredcount="0"> * 'id' mutator is called.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Id</sourceline>
        <sourceline coveredcount="0"> * public function setId( $id) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  $this-&gt;id = $id;</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="1" startclass="1">class Id {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Populates model ActiveRecord state</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The interceptor invocation context</sourceline>
        <sourceline coveredcount="0">	   * @return mixed InvocationContext if the context of the call has changed, null otherwise.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function populate( InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 $callee = $ic-&gt;getCallee();</sourceline>
        <sourceline coveredcount="14">	  		 $pieces = explode( DIRECTORY_SEPARATOR, $callee['file']);</sourceline>
        <sourceline coveredcount="14">	  		 $className = str_replace( '.php', '', array_pop( $pieces));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 		 	 // Dont populate calls made from ORM</sourceline>
        <sourceline coveredcount="14">	  		 if( $className == 'Id' || preg_match( '/dialect$/i', $className))</sourceline>
        <sourceline coveredcount="14">	  		 	 return $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  	     $class = $callee['class'];</sourceline>
        <sourceline coveredcount="14">	  	     $mutator = $callee['function'];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  	     $params = $ic-&gt;getParameters();</sourceline>
        <sourceline coveredcount="14">	  	     if( !$params[0]) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  	     $model = new $class;</sourceline>
        <sourceline coveredcount="14">	  	     $model-&gt;$mutator( $params[0]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	 		 $activeRecord = ORM::find( $model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	 		 return(count( $activeRecord)) ?</sourceline>
        <sourceline coveredcount="14">	 		 	 $this-&gt;copy( $activeRecord[0]-&gt;getInterceptedInstance(), $ic-&gt;getTarget()) :</sourceline>
        <sourceline coveredcount="14">	 		 	 $ic-&gt;proceed();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Copies the values from the ActiveRecord to the intercepted model instance.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $a The first object</sourceline>
        <sourceline coveredcount="0">	   * @param $b The second object</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function copy( $a, $b) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		  $classA = new ReflectionClass( $a);</sourceline>
        <sourceline coveredcount="10">		  	  $classB = new ReflectionClass( $b);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">		  	  $propsA = $classA-&gt;getProperties();</sourceline>
        <sourceline coveredcount="10">		  	  $propsB = $classB-&gt;getProperties();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">		  	  for( $i=0; $i&lt;count( $propsA); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">		  		   $accessor = 'get' . ucfirst( $propsA[$i]-&gt;name);</sourceline>
        <sourceline coveredcount="10">		  		   $mutator = 'set' . ucfirst( $propsB[$i]-&gt;name);</sourceline>
        <sourceline coveredcount="10">	  		   	   $b-&gt;$mutator( $a-&gt;$accessor());</sourceline>
        <sourceline coveredcount="10">		  	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">  	 		  Log::debug( '#@Id::populate Created ActiveRecord state for model \'' . preg_replace( '/_Intercepted/', '' , $classA-&gt;getName()) . '\'.');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Table" methodcount="31" methodscovered="14" statementcount="86" statementscovered="49" totalcount="117" totalcovered="63">
      <sourcefile name="Table.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/Table.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Represents a data table in the AgilePHP orm component.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class Table {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $name;</sourceline>
        <sourceline coveredcount="0">	  private $model;</sourceline>
        <sourceline coveredcount="0">	  private $display;</sourceline>
        <sourceline coveredcount="0">	  private $validate = true;</sourceline>
        <sourceline coveredcount="0">	  private $description;</sourceline>
        <sourceline coveredcount="0">	  private $isIdentity = false;</sourceline>
        <sourceline coveredcount="0">	  private $isSession = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $columns = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new Table instance.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param SimpleXMLElement $table The SimpleXMLElement instance representing the</sourceline>
        <sourceline coveredcount="0">	   * 								physical database table.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct(SimpleXMLElement $table = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 if($table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;name = (string)$table-&gt;attributes()-&gt;name;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;model = (string)$table-&gt;attributes()-&gt;model;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;display = (string)$table-&gt;attributes()-&gt;display;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;validate = ($table-&gt;attributes()-&gt;validate == 'false') ? false : true;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;description = (string)$table-&gt;attributes()-&gt;description;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;isIdentity = ($table-&gt;attributes()-&gt;isIdentity == 'true') ? true : false;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;isSession = ($table-&gt;attributes()-&gt;isSession == 'true') ? true : false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		  		 foreach($table-&gt;column as $column)</sourceline>
        <sourceline coveredcount="4">		  		 		  array_push($this-&gt;columns, new Column($column, $this-&gt;name));</sourceline>
        <sourceline coveredcount="4">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the table name</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $name The name of the database table</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the database table</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The database table name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="36">	  		 return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the domain model responsible for the table</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $model The name of the domain model</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setModel($model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;model = $model;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the domain model responsible for the table</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The domain model name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getModel() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="21">	  		 return $this-&gt;model;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Text field used to configure a 'display name'. If a value is specified</sourceline>
        <sourceline coveredcount="0">	   * this is the name that is used in visual elements such as forms and result</sourceline>
        <sourceline coveredcount="0">	   * lists when referencing the table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $display The friendly display name for the table</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setDisplay($display) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;display = $display;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the friendly display name for the table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The friendly display name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDisplay() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;display;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Boolean field used to toggle automatic data validation for the table</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param bool $boolean True to enable validation, false to disable. Default is True.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setValidate($boolean) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;validate = $boolean ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the boolean field used to toggle automatic data validation.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the table gets validated automatically, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getValidate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 return $this-&gt;validate === true ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the description field for the table. This field is used by visual elements</sourceline>
        <sourceline coveredcount="0">	   * which reference the tables description.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $description A short description of the table</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setDescription($description) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;description = $description;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the table description</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The short description about the table</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDescription() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;description;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the boolean field used to identify an AgilePHP Identity table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param bool $boolean True if the table is responsible for AgilePHP Identity orm.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setIsIdentity($boolean) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;isIdentity = $boolean ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns true if the table is configured as an AgilePHP Identity table, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if this is an AgilePHP Identity table, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isIdentity() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;isIdentity === true ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the boolean field used to identity an AgilePHP Session table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param bool $boolean True if the table is responsible for AgilePHP Session orm.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setIsSession($boolean) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;isSession = $boolean ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean indicator based on whether or not this is a table</sourceline>
        <sourceline coveredcount="0">	   * responsible for AgilePHP session table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if this is an AgilePHP Session table, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isSession() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;isSession === true ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the array of columns for the table</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param array $columns An array of Column instances which belong to this table</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setColumns(array $columns) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;columns = $columns;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Pushes a new column to the table's column stack.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Column $column The Column instance to push onto the stack</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function addColumn(Column $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 array_push($this-&gt;columns, $column);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a Column instance corresponding to the specified name.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $name The column name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getColumn($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($this-&gt;columns as $c)</sourceline>
        <sourceline coveredcount="-1">	  		 	if($c-&gt;getName() == $name)</sourceline>
        <sourceline coveredcount="-1">	  		 		return $c;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean response based on the presence of one or more Column</sourceline>
        <sourceline coveredcount="0">	   * instances.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the table contains columns, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function hasColumns() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return count($this-&gt;columns) ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an array of Column instances which are configured for the table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return array Array of column instances</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getColumns() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="27">	  		 return $this-&gt;columns;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a list of primary key columns in the current table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return array An array of 'Column' objects which have been configured as primary keys</sourceline>
        <sourceline coveredcount="0">	   * 		 	   in the current table.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getPrimaryKeyColumns() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">	  		 $columns = array();</sourceline>
        <sourceline coveredcount="18">	  		 foreach($this-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="18">	  		 	      if($column-&gt;isPrimaryKey())</sourceline>
        <sourceline coveredcount="18">	  		 	      	  array_push($columns, $column);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">	  		 return $columns;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a list of foreign key columns in the current table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return array An array of 'Column' objects which contain foreign keys in the current table.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getForeignKeyColumns() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="24">	  		 $columns = array();</sourceline>
        <sourceline coveredcount="24">	  		 foreach($this-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="24">	  		 	      if($column-&gt;isForeignKey())</sourceline>
        <sourceline coveredcount="24">	  		 	      	  array_push($columns, $column);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="24">	  		 return $columns;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a list of all foreign keys which share the same 'name' attribute value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $name The name of the foreign key</sourceline>
        <sourceline coveredcount="0">	   * @return array An array of columns with the specified 'name' attribute</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getForeignKeyColumnsByKey($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     $keys = array();</sourceline>
        <sourceline coveredcount="1">	  	     foreach($this-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     		  if($column-&gt;isForeignKey())</sourceline>
        <sourceline coveredcount="1">	  	     		  	  if($column-&gt;getForeignKey()-&gt;getName() == $name)</sourceline>
        <sourceline coveredcount="1">	  	     		  	  	  array_push($keys, $column-&gt;getForeignKey());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $keys;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Looks up a 'Column' name by its orm.xml 'property' attribute.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $property The name of a domain model property to return its corresponding column name</sourceline>
        <sourceline coveredcount="0">	   * @return mixed Column name or null if the column name could not be found</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getColumnNameByProperty($property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 foreach($this-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="-1">			   		  if($column-&gt;getProperty() == $property)</sourceline>
        <sourceline coveredcount="-1">			   			  return $column-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 Log::warn('Table::getColumnByProperty Could not find a property name corresponding to \'' . $property . '\'. Attempting to return column name instead.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 foreach($this-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="-1">			   		  if($column-&gt;getName() == $property)</sourceline>
        <sourceline coveredcount="-1">			   			  return $column-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 Log::warn('Table::getColumnByProperty Warning about could not find a matching column name corresponding to \'' . $property . '\'. Returning null.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 return null;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the 'display' attribute value as configured in orm.xml for</sourceline>
        <sourceline coveredcount="0">	   * the specified 'property' value.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $property The name of the domain model property to retrieve the display name for</sourceline>
        <sourceline coveredcount="0">	   * @return The columns 'display' name or null if a display name has not been configured.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDisplayNameByProperty($property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($this-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="-1">	  		 		  if($column-&gt;getModelPropertyName() == $property)</sourceline>
        <sourceline coveredcount="-1">	  		 		  	  return $column-&gt;getDisplay() ? $column-&gt;getDisplay() : ucfirst($column-&gt;getName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 Log::debug('Table::getDisplayNameByProperty returning null value for property \'' . $property . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return null;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean response based on the 'visible' attribute in orm.xml for the</sourceline>
        <sourceline coveredcount="0">	   * column which contains the specified $property.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $property The domain object model's property name</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the column is visible or false if the column is NOT visible</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isVisible($property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($this-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="-1">	  		 		  if($column-&gt;getModelPropertyName() == $property)</sourceline>
        <sourceline coveredcount="-1">	  		 		  	  return $column-&gt;isVisible() == true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return true;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean response based on the presence of a column which is</sourceline>
        <sourceline coveredcount="0">	   * configured in orm.xml as a blob data type.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the table contains any blob columns or false if no</sourceline>
        <sourceline coveredcount="0">	   * 		 	  blob columns exist.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function hasBlobColumn() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($this-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="-1">	  		 		  if($column-&gt;getType() == 'blob')</sourceline>
        <sourceline coveredcount="-1">	  		 		  	  return true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean response based on the presence of a column which is</sourceline>
        <sourceline coveredcount="0">	   * configured in orm.xml as a foreign key.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the table contains any foriegn key columns or false if no</sourceline>
        <sourceline coveredcount="0">	   * 		 	  foreign keys exist.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function hasForeignKey() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 foreach($this-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="2">	  		 		  if($column-&gt;isForeignKey())</sourceline>
        <sourceline coveredcount="2">	  		 		  	  return true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean response based on whether or not there are any other</sourceline>
        <sourceline coveredcount="0">	   * tables which have foreign keys referencing this table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if there are any other tables in the database which</sourceline>
        <sourceline coveredcount="0">	   * 		 	  have foreign keys which reference this table.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function hasForeignKeyReferences() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $orm = ORMFactory::getDialect();</sourceline>
        <sourceline coveredcount="1">	  		 foreach($orm-&gt;getDatabase()-&gt;getTables() as $table)</sourceline>
        <sourceline coveredcount="1">	  		 	foreach($table-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="1">	  		 	   if($column-&gt;isForeignKey())</sourceline>
        <sourceline coveredcount="1">	  		 	  	  if($column-&gt;getForeignKey()-&gt;getReferencedTable() == $this-&gt;getName())</sourceline>
        <sourceline coveredcount="1">	  		 		     return true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an instance of the model as configured in orm.xml for this 'Table'.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Object An instance of the model responsible for the table's orm.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getModelInstance() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">	  		 $modelName = $this-&gt;getModel();</sourceline>
        <sourceline coveredcount="13">	  		 return new $modelName();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a name suitable for display to end users. If a friendly name has been configured</sourceline>
        <sourceline coveredcount="0">	   * for this table (by providing a display attribute value in orm.xml for the Column),</sourceline>
        <sourceline coveredcount="0">	   * then this value is returned, otherwise the table name attribute value is returned instead.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The name of the table which gets displayed to end users</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getViewDisplayName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;getDisplay() ? $this-&gt;getDisplay() : $this-&gt;getName();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ForeignKey" methodcount="27" methodscovered="20" statementcount="52" statementscovered="42" totalcount="79" totalcovered="62">
      <sourcefile name="ForeignKey.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/ForeignKey.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Represents a foreign key in the AgilePHP ORM component.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class ForeignKey {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $name;		// The name of the foreign key constraint</sourceline>
        <sourceline coveredcount="0">	  private $type;		// The type of relationship (one-to-one, one-to-many, many-to-many)</sourceline>
        <sourceline coveredcount="0">	  private $table;		// The referenced table name</sourceline>
        <sourceline coveredcount="0">	  private $column;		// The referenced column name</sourceline>
        <sourceline coveredcount="0">	  private $controller;  // The MVC controller responsible for rendering the referenced table</sourceline>
        <sourceline coveredcount="0">	  private $onUpdate;</sourceline>
        <sourceline coveredcount="0">	  private $onDelete;</sourceline>
        <sourceline coveredcount="0">	  private $select;		// Stores the name of the foreign table's column to display in a drop down</sourceline>
        <sourceline coveredcount="0">	  						// in place of the actual foreign key value.</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $fkTable ;    // Passed in from 'Column'; retains the name of the foreign key table</sourceline>
        <sourceline coveredcount="0">	  private $fkColumn;    // Passed in from 'Column'; retains the name of the foreign key column</sourceline>
        <sourceline coveredcount="0">	  private $cascade;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function __construct(SimpleXMLElement $foreign = null, $tableName, $columnName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 if($foreign) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		  	     $this-&gt;name = (string)$foreign-&gt;attributes()-&gt;name;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;type = (string)$foreign-&gt;attributes()-&gt;type;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;table = (string)$foreign-&gt;attributes()-&gt;table;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;column = (string)$foreign-&gt;attributes()-&gt;column;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;controller = (string)$foreign-&gt;attributes()-&gt;controller;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;setOnUpdate(preg_replace('/_/', ' ', (string)$foreign-&gt;attributes()-&gt;onUpdate));</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;setOnDelete(preg_replace('/_/', ' ', (string)$foreign-&gt;attributes()-&gt;onDelete));</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;setSelect((string)$foreign-&gt;attributes()-&gt;select);</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;cascade = (string)$foreign-&gt;attributes()-&gt;cascade;</sourceline>
        <sourceline coveredcount="4">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 $this-&gt;fkTable = $tableName;</sourceline>
        <sourceline coveredcount="4">		  	 $this-&gt;fkColumn = $columnName;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the foreign key. This is the actual name given to</sourceline>
        <sourceline coveredcount="0">	   * the foreign key according to the database server.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $name The foreign key name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the foreign key</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The foreign key name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">	  		 return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the foreign key value data type.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $type The data type of the value being stored in the foreign key column</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setType($type) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;type = $type;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the data type being stored in the foreign key column.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The foreign key data type</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getType() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return $this-&gt;type;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the referenced table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $tableName The name of the referenced (parent) table.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setReferencedTable($tableName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;table = $tableName;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the physical name of the referenced table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The referenced (parent) table name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getReferencedTable() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">	  		 return $this-&gt;table;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the referenced (parent) column.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $columnName The referenced column name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setReferencedColumn($columnName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;column = $columnName;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the referenced (parent) column.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The name of the referenced (parent) column.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getReferencedColumn() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">		  	 return $this-&gt;column;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the referenced MVC controller responsible</sourceline>
        <sourceline coveredcount="0">	   * for the management of the referenced domain model.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $controller The controller responsible for the management of the</sourceline>
        <sourceline coveredcount="0">	   * 						   referenced domain model</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setReferencedController($controller) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;controller = $controller;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the referenced MVC controller responsible</sourceline>
        <sourceline coveredcount="0">	   * for the management of the referenced domain model.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The referenced controller name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getReferencedController() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;controller;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the SQL 'OnUpdate' action for the foreign key. This action</sourceline>
        <sourceline coveredcount="0">	   * is performed automatically by the database server anytime the</sourceline>
        <sourceline coveredcount="0">	   * primary key in the foreign (parent) table is updated.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $action The action to perform (NO_ACTION|RESTRICT|CASCADE|SET_NULL|SET_DEFAULT)</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setOnUpdate($action) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 $this-&gt;onUpdate = $action;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the configured SQL 'OnUpdate' action for the foreign key.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The configured action (NO_ACTION|RESTRICT|CASCADE|SET_NULL|SET_DEFAULT)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getOnUpdate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return $this-&gt;onUpdate;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the SQL 'OnDelete' action which is invoked when the foreign (parent)</sourceline>
        <sourceline coveredcount="0">	   * key is updated.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $action The action to perform when the foreign (parent) key is deleted.</sourceline>
        <sourceline coveredcount="0">	   * 			   		  (NO_ACTION|RESTRICT|CASCADE|SET_NULL|SET_DEFAULT)</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setOnDelete($action) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 $this-&gt;onDelete = $action;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the configured SQL 'OnDelete' action for the foreign key.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The action to perform when the foreign (parent) key is deleted.</sourceline>
        <sourceline coveredcount="0">	   * 				(NO_ACTION|RESTRICT|CASCADE|SET_NULL|SET_DEFAULT)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getOnDelete() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return $this-&gt;onDelete;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the physical name of the foreign key table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $tableName The phsical name of the foreign key table.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setFkTable($tableName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;fkTable = $tableName;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the table that stores this foreign key.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The foreign key (parent) table</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getFkTable() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return $this-&gt;fkTable;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * The name of the column which stores this foreign key</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $columnName The physical column name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setFkColumn($columnName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;fkColumn = $columnName;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the physical name of the column which stores the foreign key.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The physical name of the column storing the foreign key</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getFkColumn() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return $this-&gt;fkColumn;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the foreign table's column which should be displayed</sourceline>
        <sourceline coveredcount="0">	   * in a drop-down in place of the actual foreign key value.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $columnName The foreign column name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setSelect($columnName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 $this-&gt;select = $columnName;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the name of the foreign table's column which should be displayed</sourceline>
        <sourceline coveredcount="0">	   * in a drop-down in place of the actual foreign key value.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Column name used to populate select combobox</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSelect() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;select;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the action to use for the parent/child relationship.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $action The action to take (none | all | save-update | delete)</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setCascade($value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         $this-&gt;cascade = $value;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the cascade action to take for the parent/child relationship.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string One of the following actions to take - (none | all | save-update | delete)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getCascade() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">	         return $this-&gt;cascade;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an instance of the referenced Table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Table The referenced table instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getReferencedTableInstance() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">	  		 return ORM::getTableByName($this-&gt;getReferencedTable());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an instance of the referenced column</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Column The referenced column instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getReferencedColumnInstance() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="17">	  		 $table = ORM::getTableByName($this-&gt;getReferencedTable());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="17">	  		 foreach($table-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="17">	  		 		  if($column-&gt;getName() == $this-&gt;getReferencedColumn())</sourceline>
        <sourceline coveredcount="17">	  		 		  	  return $column;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return null;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the column instance where the foreign key resides</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Column The foreign key column instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getColumnInstance() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 $table = ORM::getTableByName($this-&gt;getFkTable());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 foreach($table-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="2">	  		 		  if($column-&gt;getName() == $this-&gt;getFkColumn())</sourceline>
        <sourceline coveredcount="2">	  		 		  	  return $column;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return null;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the foreign (parent) column instance which contains a</sourceline>
        <sourceline coveredcount="0">	   * select="true" configuration in orm.xml. If a column is</sourceline>
        <sourceline coveredcount="0">	   * not explicitly set, the referenced column instance is returned.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Column The column instance to use to display values in an HTML select</sourceline>
        <sourceline coveredcount="0">	   * 		 		element rather than the foreign key values.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSelectedColumnInstance() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($this-&gt;getReferencedTableInstance()-&gt;getColumns() as $column)</sourceline>
        <sourceline coveredcount="-1">	  		 		  if($column-&gt;getName() == $this-&gt;getSelect())</sourceline>
        <sourceline coveredcount="-1">	  		 		  	  return $column;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;getReferencedColumnInstance();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Column" methodcount="44" methodscovered="25" statementcount="67" statementscovered="48" totalcount="111" totalcovered="73">
      <sourcefile name="Column.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/Column.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Represents a database table column in the AgilePHP ORM component.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class Column {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $name;</sourceline>
        <sourceline coveredcount="0">	  private $type;</sourceline>
        <sourceline coveredcount="0">	  private $length;</sourceline>
        <sourceline coveredcount="0">	  private $description;</sourceline>
        <sourceline coveredcount="0">	  private $property;</sourceline>
        <sourceline coveredcount="0">	  private $display;</sourceline>
        <sourceline coveredcount="0">	  private $default;</sourceline>
        <sourceline coveredcount="0">	  private $visible = true;</sourceline>
        <sourceline coveredcount="0">	  private $sortable = true;</sourceline>
        <sourceline coveredcount="0">	  private $required = false;</sourceline>
        <sourceline coveredcount="0">	  private $index = false;</sourceline>
        <sourceline coveredcount="0">	  private $primaryKey = false;</sourceline>
        <sourceline coveredcount="0">	  private $autoIncrement = false;</sourceline>
        <sourceline coveredcount="0">	  private $sanitize = true;</sourceline>
        <sourceline coveredcount="0">	  private $lazy = false;</sourceline>
        <sourceline coveredcount="0">	  private $validator;</sourceline>
        <sourceline coveredcount="0">	  private $renderer;</sourceline>
        <sourceline coveredcount="0">	  private $transformer;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $foreignKey;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function __construct(SimpleXMLElement $column = null, $tableName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 if($column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;name = (string)$column-&gt;attributes()-&gt;name;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;type = (string)$column-&gt;attributes()-&gt;type;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;length = (integer)$column-&gt;attributes()-&gt;length;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;description = (string)$column-&gt;attributes()-&gt;description;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;property = (string)$column-&gt;attributes()-&gt;property;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;default = (string)$column-&gt;attributes()-&gt;default;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;display = (string)$column-&gt;attributes()-&gt;display;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;visible = ($column-&gt;attributes()-&gt;visible == 'false') ? false : true;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;sortable = ($column-&gt;attributes()-&gt;sortable == 'false') ? false : true;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;required = ($column-&gt;attributes()-&gt;required == 'true') ? true : false;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;index = ($column-&gt;attributes()-&gt;index == 'true') ? true : false;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;primaryKey = ($column-&gt;attributes()-&gt;primaryKey == 'true') ? true : false;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;autoIncrement = ($column-&gt;attributes()-&gt;autoIncrement == 'true') ? true : false;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;sanitize = ($column-&gt;attributes()-&gt;sanitize == 'false') ? false : true;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;lazy = ($column-&gt;attributes()-&gt;lazy == 'true') ? true : false;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;validator = (string)$column-&gt;attributes()-&gt;validator;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;renderer = (string)$column-&gt;attributes()-&gt;renderer;</sourceline>
        <sourceline coveredcount="4">		  		 $this-&gt;transformer = (string)$column-&gt;attributes()-&gt;transformer;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		  		 if($column-&gt;foreignKey)</sourceline>
        <sourceline coveredcount="4">		  		 	 $this-&gt;foreignKey = new ForeignKey($column-&gt;foreignKey, $tableName, $this-&gt;name);</sourceline>
        <sourceline coveredcount="4">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the column in the physical database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $name The column name in the physical database</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the column in the physical database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The name of the column in the physical database</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="24">	  		 return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the data type which describes the type of data which is</sourceline>
        <sourceline coveredcount="0">	   * to be stored in the column/field.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $type The data type being stored (varchar|int|text|etc...)</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setType($type) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  	     $this-&gt;type = $type;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the data type which describes the type of data which is</sourceline>
        <sourceline coveredcount="0">	   * being stored in the column/field.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The data type</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getType() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return $this-&gt;type;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the length of the data being stored in the column</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $length The maximum length of the data being persisted</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setLength($length) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 $this-&gt;length = (integer)$length;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the length of the data being stored in the column</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The max length of the data being persisted</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getLength() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 return $this-&gt;length;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the friendly description of the column. This is used by visual</sourceline>
        <sourceline coveredcount="0">	   * elements to describe the column to the end user or website owner.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $description The friendly description explaining the purpose of the column, etc.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setDescription($description) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;description = $description;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the friendly description of the column.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The description of the column</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDescription() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;description;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the property in the domain model which the column maps</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $property The property name in the domain model that stores the column data</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setProperty($property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 $this-&gt;property = $property;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the property in the domain model which the column maps</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The property/field name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getProperty() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		 return $this-&gt;property;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the friendly display name of the column. This is used by visual</sourceline>
        <sourceline coveredcount="0">	   * elements (such as forms) to show a user friendly name for the column.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $text The friendly name to display</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setDisplay($text) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;display = $text;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the friendly display name for the column</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The user friendly display name for use with visual elements</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDisplay() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;display;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the default value of the column data</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $value The default value if nothing has been assigned</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setDefault($value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 $this-&gt;default = $value;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the default value assigned to the column data when a value</sourceline>
        <sourceline coveredcount="0">	   * has not been specified.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDefault() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return $this-&gt;default;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets a boolean flag used to toggle the visibility of the column. This</sourceline>
        <sourceline coveredcount="0">	   * is used to hide a particular field (such as a primary key) from a form</sourceline>
        <sourceline coveredcount="0">	   * when its rendered.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param bool $boolean The boolean flag indicating whether or not the column</sourceline>
        <sourceline coveredcount="0">	   * 				 	  should be rendered. True to render, false to hide.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setVisible($boolean) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;visible = $boolean ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean indicator based on the visibility of the column.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return True if the column is visible, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isVisible() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;visible === true ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Enables/disables sortable column headers,</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $boolean True to enable sortable column header, false to render</sourceline>
        <sourceline coveredcount="0">	   * 				 column header as plain text.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setSortable($boolean) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;sortable === true ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean flag indicating whether or not the column</sourceline>
        <sourceline coveredcount="0">	   * is sortable.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the column is sortable, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isSortable() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;sortable == true ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Boolean flag indicating whether or not the column data is required</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $boolean True if this column requires a value, false otherwise</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setRequired($boolean) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;required = $boolean ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean flag indicating whether or not the column data is required</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if a value is required, false if a value is not required</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isRequired() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 return $this-&gt;required;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Boolean flag indicating whether or not the column data is an index</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $boolean True if this column is an index, false otherwise</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setIndex($boolean) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;index = $boolean ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean flag indicating whether or not the column is an index</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the column is indexed, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isIndex() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;index;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Marks this column as a primary key</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param bool $boolean True to mark this column as a primary key, false otherwise</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setPrimaryKey($boolean) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;primaryKey = $boolean ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean flag indicating whether or not the column is a primary key</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the column is a primary key, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isPrimaryKey() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">	  		 return ($this-&gt;primaryKey === true) ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Marks the column as an AUTO_INCREMENT column.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param bool $boolean True if the column contains AUTO_INCREMENT values, false otherwise</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setAutoIncrement($boolean) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 $this-&gt;autoIncrement = $boolean ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean flag indicating whether or not this column is an</sourceline>
        <sourceline coveredcount="0">	   * AUTO_INCREMENT field.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the column is an AUTO_INCREMENT field, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isAutoIncrement() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 return $this-&gt;autoIncrement === true ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Marks the column as a foreign key column.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param ForeignKey $foreignKey A ForeignKey instance representing the relationship for this column</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setForeignKey(ForeignKey $foreignKey) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;foreignKey = $foreignKey;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean indicator based on whether or not the column is a foreign key field.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the column is a foreign key field, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isForeignKey() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="24">	  		 return $this-&gt;foreignKey ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean indicator based on whether or not the column is a foreign key field.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the column has a foreign key field, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function hasForeignKey() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;isForeignKey() ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean indicator based on whether or not the column is a foreign key field.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return ForeignKey The ForeignKey instance representing the relationship for this column</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getForeignKey() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">	  		 return $this-&gt;foreignKey;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean flag indicating whether or not the column is of the data type 'bit'. This</sourceline>
        <sourceline coveredcount="0">	   * is a *special* data type which is used to render HTML checkboxes by the presentation tier.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isBit() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1"> 		  	 return $this-&gt;getType() == 'bit';</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Boolean flag indicating whether or not to sanitize input using the RequestScope component.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param boolean $bool</sourceline>
        <sourceline coveredcount="0">	   * @return voi</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setSanitize($bool) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;sanitize = $bool;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the validator responsible for validating the data.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $validator The class name of the Validator responsible for verifying the integrity of the data</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setValidator($validator) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;validator = $validator;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the class name of the Validator responsible for validating the data.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string $validator The validator responsible for verifying the integrity of the data</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getValidator() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 return $this-&gt;validator;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the renderer responsible for formatting data for presentation</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $renderer The DataRenderer responsible for formatting the column data for presentation</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setRenderer($renderer) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;renderer = $renderer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the DataRenderer responsible for formatting the column data for presentation</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string $renderer The renderer responsible for formatting the column data for presentation</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getRenderer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">	  		 return $this-&gt;renderer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the DataTransformer responsible for transforming data before committing to the database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $transformer The class name of the DataTransformer responsible for transforming the</sourceline>
        <sourceline coveredcount="0">	   *        column data before its committed to the database.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setTransformer($transformer) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;transformer = $transformer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the class name of the DataTransformer responsible for transforming data before committing to the database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string $transformer The class name of the DataTransformer</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getTransformer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		 return $this-&gt;transformer;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean flag indicating whether or not this column should have its data sanitized by default.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return boolean False if orm.xml contains a sanitize="false" for this column, true otherwise.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSanitize() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;sanitize;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * If enabled, referenced objects are not fetched, persisted, merged, or deleted with child operations.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param bool $bool True to enable lazy loading, false otherwise. Defaults to true.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setLazy($bool = true) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;lazy = $bool;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns flag indicating whether or not referenced objects are not fetched, persisted, merged, or deleted with child operations.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if lazy loading is enabled for this column, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isLazy() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 return $this-&gt;lazy;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name which is used to access/mutate model properties/fields. If a property</sourceline>
        <sourceline coveredcount="0">	   * attribute has been configured in orm.xml for the column, the property value is</sourceline>
        <sourceline coveredcount="0">	   * returned, otherwise the column name is returned instead.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String Property attribute value in orm.xml for the column if it exists, else</sourceline>
        <sourceline coveredcount="0">	   * 		 the column name attribute value is returned instead.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getModelPropertyName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		 return $this-&gt;getProperty() == null ? $this-&gt;getName() : $this-&gt;getProperty();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * If orm.xml contains a valid 'display' attribute, this value is</sourceline>
        <sourceline coveredcount="0">	   * returned, otherwise, the column name is returned.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The orm.xml 'display' attribute value if it exists, otherwise the column name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getViewDisplayName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;getDisplay() ? $this-&gt;getDisplay() : ucfirst($this-&gt;getName());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Database" methodcount="20" methodscovered="15" statementcount="34" statementscovered="29" totalcount="54" totalcovered="44">
      <sourcefile name="Database.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/Database.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Represents a database in the AgilePHP ORM component.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class Database {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $name;</sourceline>
        <sourceline coveredcount="0">	  private $type;</sourceline>
        <sourceline coveredcount="0">	  private $hostname;</sourceline>
        <sourceline coveredcount="0">	  private $port;</sourceline>
        <sourceline coveredcount="0">	  private $username;</sourceline>
        <sourceline coveredcount="0">	  private $password;</sourceline>
        <sourceline coveredcount="0">	  private $driver;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $tables = array();</sourceline>
        <sourceline coveredcount="0">	  private $procedures = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new Database instance with optional database assignment.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param SimpleXMLElement $database A database instance represented in</sourceline>
        <sourceline coveredcount="0">	   * 						 a SimpleXMLElement structure.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct(SimpleXMLElement $database = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 if($database !== null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		  		$this-&gt;name = (string)$database-&gt;attributes()-&gt;name;</sourceline>
        <sourceline coveredcount="4">		  		$this-&gt;type = (string)$database-&gt;attributes()-&gt;type;</sourceline>
        <sourceline coveredcount="4">		  		$this-&gt;hostname = (string)$database-&gt;attributes()-&gt;hostname;</sourceline>
        <sourceline coveredcount="4">		  		$this-&gt;port = (string)$database-&gt;attributes()-&gt;port;</sourceline>
        <sourceline coveredcount="4">		  		$this-&gt;username = (string)$database-&gt;attributes()-&gt;username;</sourceline>
        <sourceline coveredcount="4">		  		$this-&gt;password = (string)$database-&gt;attributes()-&gt;password;</sourceline>
        <sourceline coveredcount="4">		  		$this-&gt;driver = (string)$database-&gt;attributes()-&gt;driver;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		  		foreach($database-&gt;table as $table)</sourceline>
        <sourceline coveredcount="4">		  		     array_push($this-&gt;tables, new Table($table));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		  		foreach($database-&gt;procedure as $procedure)</sourceline>
        <sourceline coveredcount="4">		  		     array_push($this-&gt;procedures, new Procedure($procedure));</sourceline>
        <sourceline coveredcount="4">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the name of the database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $name The database name</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setName($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;name = $name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The database name</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getName() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 return $this-&gt;name;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the type of database server</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $type The database server type (sqlite|mysql|pgsql|mssql)</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setType($type) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;type = $type;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the database server type.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The type of database server type (sqlite|mysql|pgsql|mssql)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getType() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 return $this-&gt;type;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the hostname of the database server</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $hostname The hostname of the database server (or file path for sqlite databases).</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setHostname($hostname) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;hostname = $hostname;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the hostname of the database server.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The hostname of the database server (or file path for sqlite databases).</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getHostname() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 return $this-&gt;hostname;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the database server's TCP/IP listen port.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param int $port The TCP/IP port</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setPort($port) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         $this-&gt;port = $port;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Gets the database server's TCP/IP listen port.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return int The TCP/IP port</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getPort() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	         return $this-&gt;port;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the username required to access the database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $username The username to connect to the database with</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setUsername($username) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;username = $username;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the username which is used to connect to the database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The username thats used to connect to the database</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getUsername() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 return $this-&gt;username;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the password which is used to connect to the database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $password The password used to authenticate access to the database</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setPassword($password) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 $this-&gt;password = $password;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the password thats used to connect to the database</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The password used to authenticate access to the database</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getPassword() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 return $this-&gt;password;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the driver string used in ODBC connections.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $driver The driver name.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setDriver($driver) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;driver = $driver;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the driver used in ODBC connections.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The driver name.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDriver() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;driver;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the array of Table instances which represent a table in the physical</sourceline>
        <sourceline coveredcount="0">	   * database.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param array $tables An array of Table instances which represent a table in the</sourceline>
        <sourceline coveredcount="0">	   * 					  physical database.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setTables(array $tables) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;tables = $tables;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Pushes a new Table instance onto the stack</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Table $table The table instance to push onto the stack</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function addTable(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 array_push($this-&gt;tables, $table);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean indicator based on the presence of any Table instances</sourceline>
        <sourceline coveredcount="0">	   * configured for the database.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return True if the database has any one or more tables, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function hasTables() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return isset($this-&gt;tables[0]) ? true : false;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an array of Table instances which represent a table in the physical</sourceline>
        <sourceline coveredcount="0">	   * database.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Array of Table instances each representing a table in the physical database.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getTables() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="36">	  		 return $this-&gt;tables;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function getProcedures() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 return $this-&gt;procedures;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.orm.dialect" methodcount="118" methodscovered="39" statementcount="1222" statementscovered="965" totalcount="1340" totalcovered="1004">
    <class name="SQLiteDialect" methodcount="21" methodscovered="6" statementcount="237" statementscovered="160" totalcount="258" totalcovered="166">
      <sourcefile name="SQLiteDialect.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/dialect/SQLiteDialect.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm.dialect</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for SQLite specific database operations</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm.dialect</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">final class SQLiteDialect extends BaseDialect implements SQLDialect {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $connectFlag = -1;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function __construct(Database $db) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 try {</sourceline>
        <sourceline coveredcount="1">			  	     $this-&gt;pdo = new PDO('sqlite:' . $db-&gt;getName());</sourceline>
        <sourceline coveredcount="1">			 	     $this-&gt;database = $db;</sourceline>
        <sourceline coveredcount="1">			 	     $this-&gt;connectFlag = 1;</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="1">	  		 catch(PDOException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	  		 		$this-&gt;connectFlag = -1;</sourceline>
        <sourceline coveredcount="-2">	  		 	    throw new ORMException($e-&gt;getMessage());</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#isConnected()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isConnected() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;connectFlag;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#create()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function create() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 foreach($this-&gt;database-&gt;getTables() as $table)</sourceline>
        <sourceline coveredcount="1">	  		 		$this-&gt;createTable($table);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 foreach($this-&gt;database-&gt;getTables() as $table)</sourceline>
        <sourceline coveredcount="1">	  		 		$this-&gt;createTriggers($table);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function call(DomainModel $model) { }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#createTable(Table $table)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function createTable(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $sql = 'CREATE TABLE "' . $table-&gt;getName() . '" (';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  		  	 $bCandidate = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	  	     // Format compound keys</sourceline>
        <sourceline coveredcount="1">             $pkeyColumns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="1">  	 		 if(count($pkeyColumns) &gt; 1) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		 		 foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		 			      if($column-&gt;isAutoIncrement())</sourceline>
        <sourceline coveredcount="-1">  		 			     	  Log::debug('Ignoring autoIncrement="true" for column ' . $column-&gt;getName() . '. Sqlite does not support the use of auto-increment with compound primary keys');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		 				  $sql .= '"' . $column-&gt;getName() . '" ' . $column-&gt;getType() .</sourceline>
        <sourceline coveredcount="-1">  		 						 (($column-&gt;isRequired() == true) ? ' NOT NULL' : '') .</sourceline>
        <sourceline coveredcount="-1">  		 						 (($column-&gt;getDefault()) ? ' DEFAULT \'' . $column-&gt;getDefault() . '\'' : '') . ', ';</sourceline>
        <sourceline coveredcount="-1">  		 		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		 		 $sql .= 'PRIMARY KEY (';</sourceline>
        <sourceline coveredcount="-1">  		 		 for($i=0; $i&lt;count($pkeyColumns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		 			  $sql .= '"' . $pkeyColumns[$i]-&gt;getName() . '"';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		 			  if(($i+1) &lt; count($pkeyColumns))</sourceline>
        <sourceline coveredcount="-1">  		 				  $sql .= ', ';</sourceline>
        <sourceline coveredcount="-1">  		 		 }</sourceline>
        <sourceline coveredcount="-1">  		 		 $sql .= '));';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 		 }</sourceline>
        <sourceline coveredcount="0">  	 		 else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  		 		foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  		 			     if($column-&gt;isAutoIncrement() &amp;&amp; $column-&gt;isPrimaryKey())</sourceline>
        <sourceline coveredcount="1">  		 			     	 $bCandidate = true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  		 				 $sql .= '"' . $column-&gt;getName() . '" ' . $column-&gt;getType() . (($column-&gt;isPrimaryKey() === true) ? ' PRIMARY KEY' : '') .</sourceline>
        <sourceline coveredcount="1">  		 						 (($column-&gt;isAutoIncrement() === true) ? ' AUTOINCREMENT' : '') .</sourceline>
        <sourceline coveredcount="1">  		 						 (($column-&gt;isRequired() == true) ? ' NOT NULL' : '') .</sourceline>
        <sourceline coveredcount="1">  		 						 (($column-&gt;getDefault()) ? ' DEFAULT \'' . $column-&gt;getDefault() . '\'' : '') .</sourceline>
        <sourceline coveredcount="1">								 (($column-&gt;isForeignKey()) ? ' CONSTRAINT ' . $column-&gt;getForeignKey()-&gt;getName() . ' REFERENCES ' . $column-&gt;getForeignKey()-&gt;getReferencedTable() . '(' . $column-&gt;getForeignKey()-&gt;getReferencedColumn() . ')' : '') . ', ';</sourceline>
        <sourceline coveredcount="1">  		 		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  		 		// remove last comma and space</sourceline>
        <sourceline coveredcount="1">		   		$sql = substr($sql, 0, -2);</sourceline>
        <sourceline coveredcount="0">  	 		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 		$sql .= ');';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	   		//if($bCandidate &amp;&amp; (count($table-&gt;getPrimaryKeyColumns()) &gt; 1))</sourceline>
        <sourceline coveredcount="0">	   			//throw new ORMException('Sqlite does not allow the use of auto-increment with compound primary keys (' . $table-&gt;getName() . ')');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	   		$this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	   		// Throw exceptions</sourceline>
        <sourceline coveredcount="1">  	 		if($this-&gt;pdo-&gt;errorInfo() !== null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 			$info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="1">  	 			if($info[0] != '0000')</sourceline>
        <sourceline coveredcount="1">  	 				throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="1">			}</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a set of triggers which enforce referential integrity</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Table $table The table to create the trigger for</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createTriggers(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  foreach($table-&gt;getForeignKeyColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		   			// Create default restrict triggers for inserts, updates, and deletes to referenced column</sourceline>
        <sourceline coveredcount="1">		   			$this-&gt;createInsertRestrictTrigger($column-&gt;getForeignKey()-&gt;getName() . '_fkInsert', $table-&gt;getName(), $column-&gt;getName(), $column-&gt;getForeignKey()-&gt;getReferencedTable(), $column-&gt;getForeignKey()-&gt;getReferencedColumn(), $column-&gt;isRequired());</sourceline>
        <sourceline coveredcount="1">		   			$this-&gt;createUpdateRestrictTrigger($column-&gt;getForeignKey()-&gt;getName() . '_refUpdate', $table-&gt;getName(), $column-&gt;getName(), $column-&gt;getForeignKey()-&gt;getReferencedTable(), $column-&gt;getForeignKey()-&gt;getReferencedColumn(), $column-&gt;isRequired());</sourceline>
        <sourceline coveredcount="1">		   			$this-&gt;createDeleteRestrictTrigger($column-&gt;getForeignKey()-&gt;getName() . '_refDelete', $table-&gt;getName(), $column-&gt;getName(), $column-&gt;getForeignKey()-&gt;getReferencedTable(), $column-&gt;getForeignKey()-&gt;getReferencedColumn(), $column-&gt;isRequired());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		   			// Set appropriate ON UPDATE clause based on orm.xml configuration</sourceline>
        <sourceline coveredcount="1">		   			switch($column-&gt;getForeignKey()-&gt;getOnUpdate()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		   				case 'NO ACTION':</sourceline>
        <sourceline coveredcount="-1">		   					break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		   				case 'RESTRICT':</sourceline>
        <sourceline coveredcount="-1">		   					$this-&gt;createUpdateRestrictTrigger($column-&gt;getForeignKey()-&gt;getName(), $column-&gt;getForeignKey()-&gt;getReferencedTable(), $column-&gt;getForeignKey()-&gt;getReferencedColumn(), $table-&gt;getName(), $column-&gt;getName(), $column-&gt;isRequired());</sourceline>
        <sourceline coveredcount="-1">		   					break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		   				case 'CASCADE':</sourceline>
        <sourceline coveredcount="1">		   					$this-&gt;createUpdateCascadeTrigger($column-&gt;getForeignKey()-&gt;getName(), $table-&gt;getName(), $column-&gt;getName(), $column-&gt;getForeignKey()-&gt;getReferencedTable(), $column-&gt;getForeignKey()-&gt;getReferencedColumn(), $column-&gt;isRequired());</sourceline>
        <sourceline coveredcount="1">		   					break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		   				case 'SET NULL':</sourceline>
        <sourceline coveredcount="-1">							$this-&gt;createUpdateSetNullTrigger($column-&gt;getForeignKey()-&gt;getName(), $table-&gt;getName(), $column-&gt;getName(), $column-&gt;getForeignKey()-&gt;getReferencedTable(), $column-&gt;getForeignKey()-&gt;getReferencedColumn(), $column-&gt;isRequired());</sourceline>
        <sourceline coveredcount="-1">		   					break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		   				case 'SET DEFAULT':</sourceline>
        <sourceline coveredcount="-1">		   					$this-&gt;createUpdateSetDefaultTrigger($column-&gt;getForeignKey()-&gt;getName(), $table-&gt;getName(), $column-&gt;getName(), $column-&gt;getForeignKey()-&gt;getReferencedTable(), $column-&gt;getForeignKey()-&gt;getReferencedColumn(), $column-&gt;isRequired(), $column-&gt;getDefault());</sourceline>
        <sourceline coveredcount="-1">		   					break;</sourceline>
        <sourceline coveredcount="1">		   			}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		   			// Set appropriate ON DELETE clause based on orm.xml configuration</sourceline>
        <sourceline coveredcount="1">		   			switch($column-&gt;getForeignKey()-&gt;getOnDelete()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		   				case 'NO ACTION':</sourceline>
        <sourceline coveredcount="-1">		   					break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		   				case 'RESTRICT':</sourceline>
        <sourceline coveredcount="-1">		   					$this-&gt;createDeleteRestrictTrigger($column-&gt;getForeignKey()-&gt;getName(), $column-&gt;getForeignKey()-&gt;getReferencedTable(), $column-&gt;getForeignKey()-&gt;getReferencedColumn(), $table-&gt;getName(), $column-&gt;getName(), $column-&gt;isRequired());</sourceline>
        <sourceline coveredcount="-1">		   					break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		   				case 'CASCADE':</sourceline>
        <sourceline coveredcount="-1">		   					$this-&gt;createDeleteCascadeTrigger($column-&gt;getForeignKey()-&gt;getName(), $table-&gt;getName(), $column-&gt;getName(), $column-&gt;getForeignKey()-&gt;getReferencedTable(), $column-&gt;getForeignKey()-&gt;getReferencedColumn(), $column-&gt;isRequired());</sourceline>
        <sourceline coveredcount="-1">		   					break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		   				case 'SET NULL':</sourceline>
        <sourceline coveredcount="1">		   					$this-&gt;createDeleteSetNullTrigger($column-&gt;getForeignKey()-&gt;getName(), $table-&gt;getName(), $column-&gt;getName(), $column-&gt;getForeignKey()-&gt;getReferencedTable(), $column-&gt;getForeignKey()-&gt;getReferencedColumn(), $column-&gt;isRequired());</sourceline>
        <sourceline coveredcount="1">		   					break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		   				case 'SET_DEFAULT':</sourceline>
        <sourceline coveredcount="-1">							$this-&gt;createDeleteSetDefaultTrigger($column-&gt;getForeignKey()-&gt;getName(), $table-&gt;getName(), $column-&gt;getName(), $column-&gt;getForeignKey()-&gt;getReferencedTable(), $column-&gt;getForeignKey()-&gt;getReferencedColumn(), $column-&gt;isRequired(), $column-&gt;getDefault());</sourceline>
        <sourceline coveredcount="-1">		   					break;</sourceline>
        <sourceline coveredcount="1">		   			}</sourceline>
        <sourceline coveredcount="1">		   }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/BaseDialect#truncate(DomainModel $model)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function truncate(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     $table = $this-&gt;getTableByModel($model);</sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;query('DELETE FROM ' . $table-&gt;getName() . ';');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#dropTable()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function dropTable(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;query('DROP TABLE ' . $table-&gt;getName());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#drop()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function drop() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 	 	 $dbfile = $this-&gt;database-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 	 	 if(!file_exists($dbfile))</sourceline>
        <sourceline coveredcount="1">  	  	 	 	 throw new ORMException('Could not locate sqlite database: ' . $dbfile);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	  	 	 chmod($dbfile, 0777);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	  	 	 if(!unlink($dbfile))</sourceline>
        <sourceline coveredcount="1">  		 	 	throw new ORMException('Could not drop/delete the sqlite database: ' . $dbfile);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#reverseEngineer()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function reverseEngineer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $Database = new Database();</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setName($this-&gt;database-&gt;getName());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setType($this-&gt;database-&gt;getType());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setHostname($this-&gt;database-&gt;getHostname());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setUsername($this-&gt;database-&gt;getUsername());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setPassword($this-&gt;database-&gt;getPassword());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $stmt = $this-&gt;query("SELECT name, sql FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%' ORDER BY 1");</sourceline>
        <sourceline coveredcount="1">	  		 $stmt-&gt;setFetchMode(PDO::FETCH_OBJ);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 foreach($stmt-&gt;fetchAll() as $table)</sourceline>
        <sourceline coveredcount="1">  		 		$Database-&gt;addTable($this-&gt;parseTable($table-&gt;sql));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  		 	 return $Database;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Parses SQL database table SQL into AgilePHP Table objects.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $sql CREATE TABLE SQL statement</sourceline>
        <sourceline coveredcount="0">	   * @return Table The parsed table instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function parseTable($sql) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  preg_match('/TABLE\\s*"(.*?)"\\s/i', $sql, $name);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $Table = new Table();</sourceline>
        <sourceline coveredcount="1">	  		  $Table-&gt;setName($name[1]);</sourceline>
        <sourceline coveredcount="1">	  		  $Table-&gt;setModel(ucfirst($name[1]));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  foreach($this-&gt;parseColumns($sql, $Table-&gt;getName()) as $column)</sourceline>
        <sourceline coveredcount="1"> 		  			$Table-&gt;addColumn($column);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  return $Table;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Parses SQL columns from a CREATE TABLE sql statement</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $sql The CREATE TABLE SQL statement to parse</sourceline>
        <sourceline coveredcount="0">	   * @param String $tblName The name of the table being parsed</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function parseColumns($sql, $tblName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $colz = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  preg_match('/\((.*)\)/', $sql, $cols);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $columns = explode(',', $cols[1]);</sourceline>
        <sourceline coveredcount="1">	  		  foreach($columns as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  		preg_match('/"(.*)"/', $column, $name);</sourceline>
        <sourceline coveredcount="1">	  		  		preg_match('/\\s(\\w+)/', $column, $type);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  		$Column = new Column(null, $tblName);</sourceline>
        <sourceline coveredcount="1">	  		  		$Column-&gt;setName($name[1]);</sourceline>
        <sourceline coveredcount="1">	  		  		$Column-&gt;setType(strtolower($type[1]));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  		if(preg_match('/primary key/i', $column))</sourceline>
        <sourceline coveredcount="1">	  		  			$Column-&gt;setPrimaryKey(true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  		if(preg_match('/not null/i', $column))</sourceline>
        <sourceline coveredcount="1">	  		  			$Column-&gt;setRequired(true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  		preg_match('/default\\s(.*)/i', $column, $default);</sourceline>
        <sourceline coveredcount="1">	  		  		if(count($default))</sourceline>
        <sourceline coveredcount="1">	  		  			$Column-&gt;setDefault(trim(str_replace("'", '', $default[1])));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  		preg_match('/(constraint\\s(.*?)\\sreferences\\s?(.*)\((.*)\))/i', $column, $fkey);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  		if(count($fkey) == 5) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  			$ForeignKey = new ForeignKey(null, $tblName, $name[1]);</sourceline>
        <sourceline coveredcount="1">	  		  			$ForeignKey-&gt;setName($fkey[2]);</sourceline>
        <sourceline coveredcount="1">	  		  			$ForeignKey-&gt;setSelect($fkey[4]);</sourceline>
        <sourceline coveredcount="1">						$ForeignKey-&gt;setType('one-to-many');</sourceline>
        <sourceline coveredcount="1">						$ForeignKey-&gt;setReferencedTable($fkey[3]);</sourceline>
        <sourceline coveredcount="1">						$ForeignKey-&gt;setReferencedColumn($fkey[4]);</sourceline>
        <sourceline coveredcount="1">						$ForeignKey-&gt;setReferencedController(ucfirst($fkey[3]) . 'Controller');</sourceline>
        <sourceline coveredcount="1">						$ForeignKey-&gt;setOnDelete('SET_NULL');</sourceline>
        <sourceline coveredcount="1">						$ForeignKey-&gt;setOnUpdate('CASCADE');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						$Column-&gt;setForeignKey($ForeignKey);</sourceline>
        <sourceline coveredcount="1">	  		  		}</sourceline>
        <sourceline coveredcount="1">	  		  		array_push($colz, $Column);</sourceline>
        <sourceline coveredcount="1">	  		  }</sourceline>
        <sourceline coveredcount="1">	  		  return $colz;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates an insert trigger responsible for enforcing foreign key constraints by restricting</sourceline>
        <sourceline coveredcount="0">	   * insert statements in the foreign key field that do not exist in the referenced table.column.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $fkName The foreign key / constraint name</sourceline>
        <sourceline coveredcount="0">	   * @param String $table The table name containing the foreign key</sourceline>
        <sourceline coveredcount="0">	   * @param String $column The foreign key column name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rTable The referenced table name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rColumn The referenced column name</sourceline>
        <sourceline coveredcount="0">	   * @param bool $notNull True if the column is marked as NOT NULL / required, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createInsertRestrictTrigger($fkName, $table, $column, $rTable, $rColumn, $notNull = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $sql = 'CREATE TRIGGER tir' . $fkName . '</sourceline>
        <sourceline coveredcount="1">	  		  			BEFORE INSERT ON [' . $table . ']</sourceline>
        <sourceline coveredcount="0">	  		  			FOR EACH ROW BEGIN</sourceline>
        <sourceline coveredcount="1">	  		  				SELECT RAISE(ROLLBACK, \'Insert on table "' . $table . '" violates foreign key constraint "' . str_replace('_fkInsert', '', $fkName) . '"\')</sourceline>
        <sourceline coveredcount="1">	  		  				WHERE NEW.' . $column . ' IS NOT NULL AND (SELECT ' . $rColumn . ' FROM ' . $rTable . ' WHERE ' . $rColumn . ' = NEW.' . $column . ') IS NULL;</sourceline>
        <sourceline coveredcount="1">	  		  			END;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 		  if($this-&gt;pdo-&gt;errorInfo() !== null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 			  $info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="1">  	 			  if($info[0] == '0000') return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	      throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="-2">		  	  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates an update trigger responsible for enforcing referential integrity of foreign key constraints</sourceline>
        <sourceline coveredcount="0">	   * by restricting update statements in the foreign key field that do not relate to a value in the referenced table.column.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $fkName The foreign key / constraint name</sourceline>
        <sourceline coveredcount="0">	   * @param String $table The table name containing the foreign key</sourceline>
        <sourceline coveredcount="0">	   * @param String $column The foreign key column name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rTable The referenced table name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rColumn The referenced column name</sourceline>
        <sourceline coveredcount="0">	   * @param bool $notNull True if the column is marked as NOT NULL / required, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createUpdateRestrictTrigger($fkName, $table, $column, $rTable, $rColumn, $notNull = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $sql = 'CREATE TRIGGER tur' . $fkName . '</sourceline>
        <sourceline coveredcount="1">						BEFORE UPDATE ON [' . $table . ']</sourceline>
        <sourceline coveredcount="0">						FOR EACH ROW BEGIN</sourceline>
        <sourceline coveredcount="1">						    SELECT RAISE(ROLLBACK, \'Update on table "' . $table . '" violates foreign key constraint "' . str_replace('_refUpdate', '', $fkName) . '"\')</sourceline>
        <sourceline coveredcount="1">						      WHERE NEW.' . $column . ' IS NOT NULL AND (SELECT ' . $rColumn . ' FROM ' . $rTable . ' WHERE ' . $rColumn . ' = NEW.' . $column . ') IS NULL;</sourceline>
        <sourceline coveredcount="1">						END;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 		  if($this-&gt;pdo-&gt;errorInfo() !== null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 			  $info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="1">  	 			  if($info[0] == '0000') return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	      throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="-2">		  	  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a delete trigger responsible for enforcing referential integrity of foreign key constraints</sourceline>
        <sourceline coveredcount="0">	   * by restricting delete statements in the referenced table while references still exist in the foreign table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $fkName The foreign key / constraint name</sourceline>
        <sourceline coveredcount="0">	   * @param String $table The table name containing the foreign key</sourceline>
        <sourceline coveredcount="0">	   * @param String $column The foreign key column name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rTable The referenced table name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rColumn The referenced column name</sourceline>
        <sourceline coveredcount="0">	   * @param bool $notNull True if the column is marked as NOT NULL / required, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createDeleteRestrictTrigger($fkName, $table, $column, $rTable, $rColumn, $notNull = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $sql = 'CREATE TRIGGER tdr' . $fkName . '</sourceline>
        <sourceline coveredcount="1">						BEFORE DELETE ON [' . $rTable . ']</sourceline>
        <sourceline coveredcount="0">						FOR EACH ROW BEGIN</sourceline>
        <sourceline coveredcount="1">						  SELECT RAISE(ROLLBACK, \'Delete on table "' . $rTable . '" violates foreign key constraint "' . str_replace('_refDelete', '', $fkName) . '"\')</sourceline>
        <sourceline coveredcount="1">						  WHERE (SELECT ' . $column . ' FROM ' . $table . ' WHERE ' . $column . ' = OLD.' . $rColumn . ') IS NOT NULL;</sourceline>
        <sourceline coveredcount="1">						END;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 		  if($this-&gt;pdo-&gt;errorInfo() !== null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 			  $info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="1">  	 			  if($info[0] == '0000') return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	      throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="-2">		  	  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates an update trigger responsible for enforcing referential integrity of foreign key constraints</sourceline>
        <sourceline coveredcount="0">	   * by cascading updates to the foreign key.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $fkName The foreign key / constraint name</sourceline>
        <sourceline coveredcount="0">	   * @param String $table The table name containing the foreign key</sourceline>
        <sourceline coveredcount="0">	   * @param String $column The foreign key column name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rTable The referenced table name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rColumn The referenced column name</sourceline>
        <sourceline coveredcount="0">	   * @param bool $notNull True if the column is marked as NOT NULL / required, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createUpdateCascadeTrigger($fkName, $table, $column, $rTable, $rColumn, $notNull = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $sql = 'CREATE TRIGGER tuc' . $fkName . '</sourceline>
        <sourceline coveredcount="1">						BEFORE UPDATE ON [' . $rTable . ']</sourceline>
        <sourceline coveredcount="0">						FOR EACH ROW BEGIN</sourceline>
        <sourceline coveredcount="1">						    UPDATE ' . $table . ' SET ' . $column . ' = NEW.' . $rColumn . ' WHERE ' . $table . '.' . $column . ' = OLD.' . $rColumn . ';</sourceline>
        <sourceline coveredcount="1">						END;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 		  if($this-&gt;pdo-&gt;errorInfo() !== null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 			  $info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="1">  	 			  if($info[0] == '0000') return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	      throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="-2">		  	  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a delete trigger responsible for enforcing referential integrity of foreign key constraints</sourceline>
        <sourceline coveredcount="0">	   * by cascading deletes to the foreign key.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $fkName The foreign key / constraint name</sourceline>
        <sourceline coveredcount="0">	   * @param String $table The table name containing the foreign key</sourceline>
        <sourceline coveredcount="0">	   * @param String $column The foreign key column name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rTable The referenced table name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rColumn The referenced column name</sourceline>
        <sourceline coveredcount="0">	   * @param bool $notNull True if the column is marked as NOT NULL / required, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createDeleteCascadeTrigger($fkName, $table, $column, $rTable, $rColumn, $notNull = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  $sql = 'CREATE TRIGGER tdc' . $fkName . '</sourceline>
        <sourceline coveredcount="-1">						BEFORE DELETE ON [' . $rTable . ']</sourceline>
        <sourceline coveredcount="0">						FOR EACH ROW BEGIN</sourceline>
        <sourceline coveredcount="-1">						    DELETE FROM ' . $table . ' WHERE ' . $table . '.' . $column . ' = OLD.' . $rColumn . ';</sourceline>
        <sourceline coveredcount="-1">						END;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  $this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 		  if($this-&gt;pdo-&gt;errorInfo() !== null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 			  $info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="-1">  	 			  if($info[0] == '0000') return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	      throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="-2">		  	  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a delete trigger responsible for enforcing referential integrity of foreign key constraints</sourceline>
        <sourceline coveredcount="0">	   * by setting the foreign key to null.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $fkName The foreign key / constraint name</sourceline>
        <sourceline coveredcount="0">	   * @param String $table The table name containing the foreign key</sourceline>
        <sourceline coveredcount="0">	   * @param String $column The foreign key column name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rTable The referenced table name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rColumn The referenced column name</sourceline>
        <sourceline coveredcount="0">	   * @param bool $notNull True if the column is marked as NOT NULL / required, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createUpdateSetNullTrigger($fkName, $table, $column, $rTable, $rColumn, $notNull = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  $sql = 'CREATE TRIGGER tusn' . $fkName . '</sourceline>
        <sourceline coveredcount="-1">						BEFORE UPDATE ON [' . $rTable . ']</sourceline>
        <sourceline coveredcount="0">						FOR EACH ROW BEGIN</sourceline>
        <sourceline coveredcount="-1">						    UPDATE ' . $table . ' SET ' . $column . ' = NULL WHERE ' . $column . ' = OLD.' . $rColumn . ';</sourceline>
        <sourceline coveredcount="-1">						END;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  $this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 		  if($this-&gt;pdo-&gt;errorInfo() !== null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 			  $info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="-1">  	 			  if($info[0] == '0000') return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	      throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="-2">		  	  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates an update trigger responsible for enforcing referential integrity of foreign key constraints</sourceline>
        <sourceline coveredcount="0">	   * by setting the foreign key to null.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $fkName The foreign key / constraint name</sourceline>
        <sourceline coveredcount="0">	   * @param String $table The table name containing the foreign key</sourceline>
        <sourceline coveredcount="0">	   * @param String $column The foreign key column name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rTable The referenced table name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rColumn The referenced column name</sourceline>
        <sourceline coveredcount="0">	   * @param bool $notNull True if the column is marked as NOT NULL / required, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createDeleteSetNullTrigger($fkName, $table, $column, $rTable, $rColumn, $notNull = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $sql = 'CREATE TRIGGER tdsn' . $fkName . '</sourceline>
        <sourceline coveredcount="1">						BEFORE DELETE ON [' . $rTable . ']</sourceline>
        <sourceline coveredcount="0">						FOR EACH ROW BEGIN</sourceline>
        <sourceline coveredcount="1">						    UPDATE ' . $table . ' SET ' . $column . ' = NULL WHERE ' . $column . ' = OLD.' . $rColumn . ';</sourceline>
        <sourceline coveredcount="1">						END;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 		  if($this-&gt;pdo-&gt;errorInfo() !== null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 			  $info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="1">  	 			  if($info[0] == '0000') return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	      throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="-2">		  	  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a delete trigger responsible for enforcing referential integrity of foreign key constraints</sourceline>
        <sourceline coveredcount="0">	   * by setting the foreign key to the columns default value.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $fkName The foreign key / constraint name</sourceline>
        <sourceline coveredcount="0">	   * @param String $table The table name containing the foreign key</sourceline>
        <sourceline coveredcount="0">	   * @param String $column The foreign key column name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rTable The referenced table name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rColumn The referenced column name</sourceline>
        <sourceline coveredcount="0">	   * @param bool $notNull True if the column is marked as NOT NULL / required, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $default The default value of the column to set as configured in orm.xml</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createUpdateSetDefaultTrigger($fkName, $table, $column, $rTable, $rColumn, $notNull = false, $default) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  $sql = 'CREATE TRIGGER tusd' . $fkName . '</sourceline>
        <sourceline coveredcount="-1">						BEFORE UPDATE ON [' . $rTable . ']</sourceline>
        <sourceline coveredcount="0">						FOR EACH ROW BEGIN</sourceline>
        <sourceline coveredcount="-1">						    UPDATE ' . $table . ' SET ' . $column . ' = "' . $default . '" WHERE ' . $column . ' = OLD.' . $rColumn . ';</sourceline>
        <sourceline coveredcount="-1">						END;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  $this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 		  if($this-&gt;pdo-&gt;errorInfo() !== null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 			  $info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="-1">  	 			  if($info[0] == '0000') return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	      throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="-2">		  	  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates an update trigger responsible for enforcing referential integrity of foreign key constraints</sourceline>
        <sourceline coveredcount="0">	   * by setting the foreign key to the columns default value.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $fkName The foreign key / constraint name</sourceline>
        <sourceline coveredcount="0">	   * @param String $table The table name containing the foreign key</sourceline>
        <sourceline coveredcount="0">	   * @param String $column The foreign key column name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rTable The referenced table name</sourceline>
        <sourceline coveredcount="0">	   * @param String $rColumn The referenced column name</sourceline>
        <sourceline coveredcount="0">	   * @param bool $notNull True if the column is marked as NOT NULL / required, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $default The default value of the column to set as configured in orm.xml</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function createDeleteSetDefaultTrigger($fkName, $table, $column, $rTable, $rColumn, $notNull = false, $default) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  $sql = 'CREATE TRIGGER tdsd' . $fkName . '</sourceline>
        <sourceline coveredcount="-1">						BEFORE DELETE ON [' . $rTable . ']</sourceline>
        <sourceline coveredcount="0">						FOR EACH ROW BEGIN</sourceline>
        <sourceline coveredcount="-1">						    UPDATE ' . $table . ' SET ' . $column . ' = "' . $default . '" WHERE ' . $column . ' = OLD.' . $rColumn . ';</sourceline>
        <sourceline coveredcount="-1">						END;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  $this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 		  if($this-&gt;pdo-&gt;errorInfo() !== null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 			  $info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="-1">  	 			  if($info[0] == '0000') return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	      throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="-2">		  	  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="MySQLDialect" methodcount="9" methodscovered="4" statementcount="192" statementscovered="187" totalcount="201" totalcovered="191">
      <sourcefile name="MySQLDialect.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/dialect/MySQLDialect.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm.dialect</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Handles MySQL specific queries</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm.dialect</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">final class MySQLDialect extends BaseDialect implements SQLDialect {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $connectFlag = -1;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initalize MySQLDialect</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Database $db The Database object representing orm.xml</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct(Database $db) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     try {</sourceline>
        <sourceline coveredcount="2">	  	            $parameters = 'mysql:host=' . $db-&gt;getHostname() . ';' .</sourceline>
        <sourceline coveredcount="2">	  	                         (($db-&gt;getPort()) ? 'port=' . $db-&gt;getPort() . ';' : '') .</sourceline>
        <sourceline coveredcount="2">	  	                         'dbname=' . $db-&gt;getName() . ';';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  	  			$this-&gt;pdo = new PDO($parameters, $db-&gt;getUsername(), $db-&gt;getPassword());</sourceline>
        <sourceline coveredcount="1">	  	  			$this-&gt;connectFlag = 1;</sourceline>
        <sourceline coveredcount="0">	  	     }</sourceline>
        <sourceline coveredcount="2">	  	     catch(PDOException $pdoe) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     	    Log::debug('MySQLDialect::__construct Warning about \'' . $pdoe-&gt;getMessage() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     		// If the database doesnt exist, try a generic connection to the server. This allows the create() method to</sourceline>
        <sourceline coveredcount="0">	  	     		// be invoked to create the database schema.</sourceline>
        <sourceline coveredcount="1">	  	     	    if(strpos($pdoe-&gt;getMessage(), 'Unknown database')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     	    	$this-&gt;pdo = new PDO('mysql:host=' . $db-&gt;getHostname() . ';', $db-&gt;getUsername(), $db-&gt;getPassword());</sourceline>
        <sourceline coveredcount="1">	  	     	    	$this-&gt;connectFlag = 0;</sourceline>
        <sourceline coveredcount="1">	  	     	    }</sourceline>
        <sourceline coveredcount="0">	  	     	    else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	  	     	    	$this-&gt;connectFlag = -1;</sourceline>
        <sourceline coveredcount="-2">	  	     	    	throw new ORMException('Failed to create MySQLDialect instance. ' . $pdoe-&gt;getMessage());</sourceline>
        <sourceline coveredcount="0">	  	     	    }</sourceline>
        <sourceline coveredcount="0">	  	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	 	     $this-&gt;database = $db;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#isConnected()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isConnected() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;connectFlag;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#call($model)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function call(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     $values = array();</sourceline>
        <sourceline coveredcount="1">	  		 $outs = array();</sourceline>
        <sourceline coveredcount="1">	  		 $params = array();</sourceline>
        <sourceline coveredcount="1">	  		 $class = get_class($model);</sourceline>
        <sourceline coveredcount="1">	  		 $proc = $this-&gt;getProcedureByModel($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 foreach($proc-&gt;getParameters() as $param) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 		  if($param-&gt;getMode() == 'IN' || $param-&gt;getMode() == 'INOUT') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 			  $accessor = $this-&gt;toAccessor($param-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="1">	  		 			  array_push($params, $model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="1">	  		 		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 		  if($param-&gt;getMode() == 'OUT' || $param-&gt;getMode() == 'INOUT')</sourceline>
        <sourceline coveredcount="1">	  		 			  $outs[$param-&gt;getName()] = $param-&gt;getModelPropertyName();</sourceline>
        <sourceline coveredcount="1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $query = 'call ' . $proc-&gt;getName() . '(';</sourceline>
        <sourceline coveredcount="1">	  		 for($i=0; $i&lt;count($params); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 		$values[$i] = $params[$i];</sourceline>
        <sourceline coveredcount="1">	  		 		$query .= '?' . (($i+1) == count($query) ? ', ': '');</sourceline>
        <sourceline coveredcount="1">	  		 }</sourceline>
        <sourceline coveredcount="1">	  		 $query .= ');';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;prepare($query);</sourceline>
        <sourceline coveredcount="1">	  		 $stmt = $this-&gt;execute($values);</sourceline>
        <sourceline coveredcount="1">	  		 $stmt-&gt;setFetchMode(PDO::FETCH_ASSOC);</sourceline>
        <sourceline coveredcount="1">	  		 $results = $stmt-&gt;fetchAll();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if(!$results) return true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if(count($results) &gt; 1) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		  		 $models = array();</sourceline>
        <sourceline coveredcount="1">		 		 foreach($results as $record) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		 		 		  $m = new $class;</sourceline>
        <sourceline coveredcount="1">		 		 		  foreach($record as $column =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		 		 		  		   $mutator = $this-&gt;toMutator($outs[$column]);</sourceline>
        <sourceline coveredcount="1">		  		 		  		   $m-&gt;$mutator($value);</sourceline>
        <sourceline coveredcount="1">		 		 		  }</sourceline>
        <sourceline coveredcount="1">		 		 		  array_push($models, $m);</sourceline>
        <sourceline coveredcount="1">	 		 	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	 		 	 return $models;</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 foreach($results as $record) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 		  $m = new $class;</sourceline>
        <sourceline coveredcount="1">		 		 	  foreach($record as $column =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		 		 		  	   $mutator = $this-&gt;toMutator($outs[$column]);</sourceline>
        <sourceline coveredcount="1">		  		 		  	   $m-&gt;$mutator($value);</sourceline>
        <sourceline coveredcount="1">		 		      }</sourceline>
        <sourceline coveredcount="1">		 		 	  return $m;</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#create()</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @todo Add engine and charset attributes to orm.xml 'table' element</sourceline>
        <sourceline coveredcount="0">	   * 	   and assign values from xml definitions. Also need support for dynamic</sourceline>
        <sourceline coveredcount="0">	   * 	   setting of unique key, fulltext, key, index, etc...</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function create() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;query('CREATE DATABASE ' . $this-&gt;database-&gt;getName() . ';');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Now that the database is present, connect directly to the database.</sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;pdo = new PDO('mysql:host=' . $this-&gt;database-&gt;getHostname() . ';dbname=' . $this-&gt;database-&gt;getName(),</sourceline>
        <sourceline coveredcount="1">	  		 						 $this-&gt;database-&gt;getUsername(), $this-&gt;database-&gt;getPassword());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			 $this-&gt;query('SET foreign_key_checks = 0;');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 foreach($this-&gt;database-&gt;getTables() as $table)</sourceline>
        <sourceline coveredcount="1">			   		  $this-&gt;query($this-&gt;toCreateTableSQL($table));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;query('SET foreign_key_checks = 1;');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#createTable(Table $table)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function createTable(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">      	     $this-&gt;query($this-&gt;toCreateTableSQL($table));</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Generates SQL CREATE TABLE for the specified table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Table $table The table to generate the CREATE TABLE code for</sourceline>
        <sourceline coveredcount="0">	   * @return string The SQL CREATE TABLE code</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function toCreateTableSQL(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $defaultKeywords = array('CURRENT_TIMESTAMP');  // Default values that get passed unquoted</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 		  $sql = 'CREATE TABLE `' . $table-&gt;getName() . '` (';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 		  foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 				   $sql .= '`' . $column-&gt;getName() . '` ' . $column-&gt;getType() .</sourceline>
        <sourceline coveredcount="1">  	 						   (($column-&gt;getLength()) ? '(' . $column-&gt;getLength() . ')' : '') .</sourceline>
        <sourceline coveredcount="1">  	 						   (($column-&gt;isRequired() == true) ? ' NOT NULL' : '') .</sourceline>
        <sourceline coveredcount="1">  	 						   (($column-&gt;isAutoIncrement() === true) ? ' AUTO_INCREMENT' : '') .</sourceline>
        <sourceline coveredcount="1">  	 						   (($column-&gt;getDefault()) ? ' DEFAULT ' . (in_array($column-&gt;getDefault(),$defaultKeywords) ? $column-&gt;getDefault() : '\'' . $column-&gt;getDefault() . '\'') . '': '') .</sourceline>
        <sourceline coveredcount="1">  	 						   ((!$column-&gt;getDefault() &amp;&amp; !$column-&gt;isRequired()) ? ' DEFAULT NULL' : '') . ', ';</sourceline>
        <sourceline coveredcount="1">  	 		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   			  $pkeyColumns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="1">   			  if(count($pkeyColumns)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   			  	  $sql .= ' PRIMARY KEY (';</sourceline>
        <sourceline coveredcount="1">   				  for($i=0; $i&lt;count($pkeyColumns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   					   $sql .= '`' . $pkeyColumns[$i]-&gt;getName() . '`';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   						   if(($i+1) &lt; count($pkeyColumns))</sourceline>
        <sourceline coveredcount="1">   						   	   $sql .= ', ';</sourceline>
        <sourceline coveredcount="1">   				  }</sourceline>
        <sourceline coveredcount="1">   				  $sql .= ')';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   				  /*</sourceline>
        <sourceline coveredcount="0">   				  if(count($pkeyColumns) &gt; 1)</sourceline>
        <sourceline coveredcount="0">   				  	  $sql .= ', UNIQUE KEY `' . $pkeyColumns[0]-&gt;getName() . '` (`' . $pkeyColumns[0]-&gt;getName() . '`)';</sourceline>
        <sourceline coveredcount="0">   				  */</sourceline>
        <sourceline coveredcount="1">   			  }</sourceline>
        <sourceline coveredcount="0">   			  else</sourceline>
        <sourceline coveredcount="-1">   			      $sql = substr($sql, 0, -2); // chop off trailing comma due to missing primary key</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	   		  if($table-&gt;hasForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	      		  $bProcessedKeys = array();</sourceline>
        <sourceline coveredcount="1">	   		  	  $foreignKeyColumns = $table-&gt;getForeignKeyColumns();</sourceline>
        <sourceline coveredcount="1">	   		  	  for($h=0; $h&lt;count($foreignKeyColumns); $h++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	   		  	  		   $fk = $foreignKeyColumns[$h]-&gt;getForeignKey();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   		  	  		       if(in_array($fk-&gt;getName(), $bProcessedKeys))</sourceline>
        <sourceline coveredcount="1">	   		  	  		      continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   	  	  	       		   // Get foreign keys which are part of the same relationship</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   $relatedKeys = $table-&gt;getForeignKeyColumnsByKey($fk-&gt;getName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   	  	  	       		   $sql .= ', KEY `' . $fk-&gt;getName() . '` (';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   	  	  	       		   for($j=0; $j&lt;count($relatedKeys); $j++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   	  	  	       		   		array_push($bProcessedKeys, $relatedKeys[$j]-&gt;getName());</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   		$sql .= '`' . $relatedKeys[$j]-&gt;getColumnInstance()-&gt;getName() . '`';</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   		if(($j+1) &lt; count($relatedKeys))</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   		    $sql .= ', ';</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   }</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   $sql .= '), CONSTRAINT `' . $fk-&gt;getName() . '`';</sourceline>
        <sourceline coveredcount="1">       	       		   	 	   $sql .= ' FOREIGN KEY (';</sourceline>
        <sourceline coveredcount="1">   	  	  		    	   for($j=0; $j&lt;count($relatedKeys); $j++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   	  	  	       		   	 	$sql .= '`' . $relatedKeys[$j]-&gt;getColumnInstance()-&gt;getName() . '`';</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   		if(($j+1) &lt; count($relatedKeys))</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   		    $sql .= ', ';</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   }</sourceline>
        <sourceline coveredcount="1">						   $sql .= ') REFERENCES `' . $fk-&gt;getReferencedTable() . '` (';</sourceline>
        <sourceline coveredcount="1">   	  	  		    	   for($j=0; $j&lt;count($relatedKeys); $j++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">       	       		   		 	    $sql .= '`' . $relatedKeys[$j]-&gt;getReferencedColumn() . '`';</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   	    if(($j+1) &lt; count($relatedKeys))</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   		     $sql .= ', ';</sourceline>
        <sourceline coveredcount="1">   	  	  		    	   }</sourceline>
        <sourceline coveredcount="1">   	  	  	       		   $sql .= ') ';</sourceline>
        <sourceline coveredcount="1">     	  		   			   $sql .= (($fk-&gt;getOnUpdate()) ? ' ON UPDATE ' . $fk-&gt;getOnUpdate() : '');</sourceline>
        <sourceline coveredcount="1">     	  		   			   $sql .= (($fk-&gt;getOnDelete()) ? ' ON DELETE ' . $fk-&gt;getOnDelete() : '');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	   		  	  		   array_push($bProcessedKeys, $fk-&gt;getName());</sourceline>
        <sourceline coveredcount="1">	   		  	  }</sourceline>
        <sourceline coveredcount="1">	   		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   			  $engineType = ($table-&gt;hasForeignKey() || $table-&gt;hasForeignKeyReferences()) ? 'INNODB' : 'MYISAM';</sourceline>
        <sourceline coveredcount="1">			  $sql .= ') ENGINE=' . $engineType . ' DEFAULT CHARSET=latin1;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	   		  return $sql;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#dropTable(Table $table)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function dropTable(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	 	 	 $this-&gt;query('DROP TABLE ' . $table-&gt;getName() . ';');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#drop()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function drop() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 	 	 $this-&gt;query('DROP DATABASE ' . $this-&gt;database-&gt;getName() . ';');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#reverseEngineer()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function reverseEngineer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $Database = new Database();</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setName($this-&gt;database-&gt;getName());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setType($this-&gt;database-&gt;getType());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setHostname($this-&gt;database-&gt;getHostname());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setUsername($this-&gt;database-&gt;getUsername());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setPassword($this-&gt;database-&gt;getPassword());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $stmt = $this-&gt;prepare('SHOW TABLES');</sourceline>
        <sourceline coveredcount="1">      	     $stmt-&gt;execute();</sourceline>
        <sourceline coveredcount="1">      	     $stmt-&gt;setFetchMode(PDO::FETCH_OBJ);</sourceline>
        <sourceline coveredcount="1">      	     $tables = $stmt-&gt;fetchAll();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	     $tblIndex = 'Tables_in_' . $this-&gt;getDatabase()-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      	     $fkeyQuery  = 'SELECT</sourceline>
        <sourceline coveredcount="0">								kcu.CONSTRAINT_NAME AS \'constraint\',</sourceline>
        <sourceline coveredcount="0">								kcu.TABLE_NAME AS \'table\',</sourceline>
        <sourceline coveredcount="0">								kcu.COLUMN_NAME AS \'column\',</sourceline>
        <sourceline coveredcount="0">								kcu.REFERENCED_TABLE_NAME AS \'referenced_table\',</sourceline>
        <sourceline coveredcount="0">								kcu.REFERENCED_COLUMN_NAME AS \'referenced_column\',</sourceline>
        <sourceline coveredcount="0">								rc.UPDATE_RULE AS \'update_rule\',</sourceline>
        <sourceline coveredcount="0">								rc.DELETE_RULE AS \'delete_rule\'</sourceline>
        <sourceline coveredcount="0">							FROM information_schema.key_column_usage AS kcu</sourceline>
        <sourceline coveredcount="0">							INNER JOIN information_schema.REFERENTIAL_CONSTRAINTS AS rc</sourceline>
        <sourceline coveredcount="0">							WHERE kcu.TABLE_SCHEMA = rc.CONSTRAINT_SCHEMA</sourceline>
        <sourceline coveredcount="0">							  AND kcu.CONSTRAINT_NAME = rc.CONSTRAINT_NAME</sourceline>
        <sourceline coveredcount="1">							  AND rc.CONSTRAINT_SCHEMA = \'' . $Database-&gt;getName() . '\'</sourceline>
        <sourceline coveredcount="1">							  AND kcu.REFERENCED_TABLE_NAME IS NOT NULL';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	     $stmt = $this-&gt;query($fkeyQuery);</sourceline>
        <sourceline coveredcount="1">      	     $stmt-&gt;setFetchMode(PDO::FETCH_OBJ);</sourceline>
        <sourceline coveredcount="1">			 $foreignKeys = $stmt-&gt;fetchAll();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	     foreach($tables as $sqlTable) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	     		 $Table = new Table();</sourceline>
        <sourceline coveredcount="1">      	     		 $Table-&gt;setName(str_replace(' ', '_', $sqlTable-&gt;$tblIndex));</sourceline>
        <sourceline coveredcount="1">      	     		 $Table-&gt;setModel(ucfirst($Table-&gt;getName()));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	      		 $stmt = $this-&gt;query('DESC ' . $sqlTable-&gt;$tblIndex);</sourceline>
        <sourceline coveredcount="1">      	      		 $stmt-&gt;setFetchMode(PDO::FETCH_OBJ);</sourceline>
        <sourceline coveredcount="1">      	      		 $descriptions = $stmt-&gt;fetchAll();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	      		 foreach($descriptions as $desc) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	      		   	   $type = $desc-&gt;Type;</sourceline>
        <sourceline coveredcount="1">	      	      		   $length = null;</sourceline>
        <sourceline coveredcount="1">	      	      		   $pos = strpos($desc-&gt;Type, '(');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	      	      		   if($pos !== false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	      	      		   	   $type = preg_match_all('/^(.*)\((.*)\).*$/i', $desc-&gt;Type, $matches);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	      	      		   	   $type = $matches[1][0];</sourceline>
        <sourceline coveredcount="1">	      	      		   	   $length = $matches[2][0];</sourceline>
        <sourceline coveredcount="1">	      	      		   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	      	      		   $Column = new Column(null, $Table-&gt;getName());</sourceline>
        <sourceline coveredcount="1">						   $Column-&gt;setName($desc-&gt;Field);</sourceline>
        <sourceline coveredcount="1">						   $Column-&gt;setType($type);</sourceline>
        <sourceline coveredcount="1">						   $Column-&gt;setLength($length);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						   if(isset($desc-&gt;Default) &amp;&amp; $desc-&gt;Default)</sourceline>
        <sourceline coveredcount="1">						   	  $Column-&gt;setDefault($desc-&gt;Default);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						   if(isset($desc-&gt;Null) &amp;&amp; $desc-&gt;Null == 'NO')</sourceline>
        <sourceline coveredcount="1">						   	  $Column-&gt;setRequired(true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						   if(isset($desc-&gt;Key) &amp;&amp; $desc-&gt;Key == 'PRI')</sourceline>
        <sourceline coveredcount="1">						   	  $Column-&gt;setPrimaryKey(true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						   if(isset($desc-&gt;Extra) &amp;&amp; $desc-&gt;Extra == 'auto_increment')</sourceline>
        <sourceline coveredcount="1">						   	  $Column-&gt;setAutoIncrement(true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	      	      		   foreach($foreignKeys as $fkey) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">									if($fkey-&gt;table == $Table-&gt;getName() &amp;&amp;</sourceline>
        <sourceline coveredcount="1">									   $fkey-&gt;column == $Column-&gt;getName()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">											$ForeignKey = new ForeignKey(null, $fkey-&gt;table, $fkey-&gt;column);</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setName($fkey-&gt;constraint);</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setType('one-to-many');</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setReferencedTable($fkey-&gt;referenced_table);</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setReferencedColumn($fkey-&gt;referenced_column);</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setReferencedController(ucfirst($fkey-&gt;referenced_table) . 'Controller');</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setOnDelete($fkey-&gt;delete_rule);</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setOnUpdate($fkey-&gt;update_rule);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">											$Column-&gt;setForeignKey($ForeignKey);</sourceline>
        <sourceline coveredcount="1">											$Column-&gt;setProperty(ucfirst($fkey-&gt;referenced_table));</sourceline>
        <sourceline coveredcount="1">										}</sourceline>
        <sourceline coveredcount="1">	      	      		   }</sourceline>
        <sourceline coveredcount="1">      	      		  	   $Table-&gt;addColumn($Column);</sourceline>
        <sourceline coveredcount="1">      	      		  }</sourceline>
        <sourceline coveredcount="1">      	      		  $Database-&gt;addTable($Table);</sourceline>
        <sourceline coveredcount="1">      	      }</sourceline>
        <sourceline coveredcount="1">      	      return $Database;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="MSSQLDialect" methodcount="21" methodscovered="0" statementcount="0" statementscovered="0" totalcount="21" totalcovered="0">
      <sourcefile name="MSSQLDialect.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/dialect/MSSQLDialect.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm.dialect</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for MSSQL specific database operations.</sourceline>
        <sourceline coveredcount="0"> * NOTE: This class uses the "Microsft SQL Server Driver for PHP".</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm.dialect</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">final class MSSQLDialect extends BaseDialect implements SQLDialect {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $conn;</sourceline>
        <sourceline coveredcount="0">	  private $stmt;</sourceline>
        <sourceline coveredcount="0">	  private $statement;</sourceline>
        <sourceline coveredcount="0">	  private $connectFlag = -1;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   *  Initalize MSSQLDialect.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Database $db The Database object representing orm.xml</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	   public function __construct(Database $db) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	   		  if(!function_exists('sqlsrv_connect'))</sourceline>
        <sourceline coveredcount="0">	   		  	  throw new ORMException('Microsoft SQL Server Driver for PHP is not installed on the server.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	   		  $params = array('Database' =&gt; $db-&gt;getName(), 'UID' =&gt; $db-&gt;getUsername(), 'PWD' =&gt; $db-&gt;getPassword());</sourceline>
        <sourceline coveredcount="0">	   		  $noDbParams = array('UID' =&gt; $db-&gt;getUsername(), 'PWD' =&gt; $db-&gt;getPassword());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	      if(!$this-&gt;conn = sqlsrv_connect($db-&gt;getHostname(), $params)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	      	  $this-&gt;connectFlag = 0;</sourceline>
        <sourceline coveredcount="0">			 	  if(!$this-&gt;conn = sqlsrv_connect($db-&gt;getHostname(), $noDbParams)) { // Create statement needs to bind to server</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 	  	  $this-&gt;connectFlag = -1;</sourceline>
        <sourceline coveredcount="0">			 	  	  throw new ORMException(print_r(sqlsrv_errors(), true));</sourceline>
        <sourceline coveredcount="0">			 	  }</sourceline>
        <sourceline coveredcount="0">	  	      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	      $this-&gt;connectFlag = 1;</sourceline>
        <sourceline coveredcount="0">	 	      $this-&gt;database = $db;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#isConnected()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isConnected() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return $this-&gt;connectFlag;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function call(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $values = array();</sourceline>
        <sourceline coveredcount="0">	  		 $outs = array();</sourceline>
        <sourceline coveredcount="0">	  		 $params = array();</sourceline>
        <sourceline coveredcount="0">	  		 $class = get_class($model);</sourceline>
        <sourceline coveredcount="0">	  		 $proc = $this-&gt;getProcedureByModel($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 foreach($proc-&gt;getParameters() as $param) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		  if($param-&gt;getMode() == 'IN' || $param-&gt;getMode() == 'INOUT') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 			  $accessor = $this-&gt;toAccessor($param-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0">	  		 			  array_push($params, $model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="0">	  		 		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		  if($param-&gt;getMode() == 'OUT' || $param-&gt;getMode() == 'INOUT')</sourceline>
        <sourceline coveredcount="0">	  		 			  $outs[$param-&gt;getName()] = $param-&gt;getModelPropertyName();</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $query = '{call ' . $proc-&gt;getName() . ' (';</sourceline>
        <sourceline coveredcount="0">	  		 for($i=0; $i&lt;count($params); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		$values[$i] = $params[$i];</sourceline>
        <sourceline coveredcount="0">	  		 		$query .= '?' . (($i+1) == count($query) ? ', ' : '');</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0">	  		 $query .= ') }';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $models = array();</sourceline>
        <sourceline coveredcount="0">	  		 $params = array_merge($params, $outs);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 Log::debug('MSSQLDialect::call ' . $query . ' with params ' . print_r($params, true));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $stmt = sqlsrv_query($this-&gt;conn, $query, array_merge($params, $outs));</sourceline>
        <sourceline coveredcount="0">			 while($record = sqlsrv_fetch_array($stmt, SQLSRV_FETCH_ASSOC)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 		$m = new $class;</sourceline>
        <sourceline coveredcount="0">		 		 	foreach($record as $column =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 		 			 if($value instanceof DateTime)</sourceline>
        <sourceline coveredcount="0">		 		 			 	 $value = $value-&gt;date;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 		 	 		 $mutator = $this-&gt;toMutator($outs[$column]);</sourceline>
        <sourceline coveredcount="0">		  		 		  	 $m-&gt;$mutator($value);</sourceline>
        <sourceline coveredcount="0">		 		    }</sourceline>
        <sourceline coveredcount="0">		 		 	array_push($models, $m);</sourceline>
        <sourceline coveredcount="0">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 return (count($models) == 1) ? $models[0] : $models;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#create()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function create() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;query('CREATE DATABASE ' . $this-&gt;database-&gt;getName() . ';');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Close the connection to the server and bind to the new database.</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;close();</sourceline>
        <sourceline coveredcount="0">	  		 $params = array('Database' =&gt; $this-&gt;database-&gt;getName(), 'UID' =&gt; $this-&gt;database-&gt;getUsername(), 'PWD' =&gt; $this-&gt;database-&gt;getPassword());</sourceline>
        <sourceline coveredcount="0">	  		 if(!$this-&gt;conn = sqlsrv_connect($this-&gt;database-&gt;getHostname(), $params))</sourceline>
        <sourceline coveredcount="0">	  		 	 throw new ORMException(print_r(sqlsrv_errors(), true));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $constraintFails = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 foreach($this-&gt;database-&gt;getTables() as $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                                  $sql = $this-&gt;toCreateTableSQL($table);</sourceline>
        <sourceline coveredcount="0">                                  if(!$this-&gt;query($sql)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                                          $error = sqlsrv_errors();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                                          // This saves the create operation from blowing up if orm.xml defines a table</sourceline>
        <sourceline coveredcount="0">                                          // that references a table further down the orm.xml file that has not been</sourceline>
        <sourceline coveredcount="0">                                          // created yet. Is there a cleaner way - like disabling constraint checks?</sourceline>
        <sourceline coveredcount="0">                                          if(stristr($error[0]['message'], 'references invalid table')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                                                  array_push($constraintFails, $sql);</sourceline>
        <sourceline coveredcount="0">                                                  continue;</sourceline>
        <sourceline coveredcount="0">                                          }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                                          throw new ORMException(print_r(sqlsrv_errors(), true));</sourceline>
        <sourceline coveredcount="0">                                  }</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Constraint hack continued</sourceline>
        <sourceline coveredcount="0">	  		 if(count($constraintFails))</sourceline>
        <sourceline coveredcount="0">	  		 	 foreach($constraintFails as $sql)</sourceline>
        <sourceline coveredcount="0">	  		 	 		if(!$this-&gt;query($sql))</sourceline>
        <sourceline coveredcount="0">		  		 	 		throw new ORMException(print_r(sqlsrv_errors(), true));</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#createTable(Table $table)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function createTable(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">              $this-&gt;query($this-&gt;toCreateTableSQL($table));</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#dropTable(Table $table)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">      public function dropTable(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             $this-&gt;query('DROP TABLE ' . $table-&gt;getName());</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns SQL CREATE TABLE statement for the specified table</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param Table $table The table to create the SQL code for</sourceline>
        <sourceline coveredcount="0">       * @return string The SQL CREATE TABLE statement</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      private function toCreateTableSQL(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">              $sql = 'CREATE TABLE ' . $table-&gt;getName() . ' (';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">              foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                       $sql .= '[' . $column-&gt;getName() . '] ' . $column-&gt;getType() .</sourceline>
        <sourceline coveredcount="0">                                 (($column-&gt;getLength()) ? '(' . $column-&gt;getLength() . ')' : '') .</sourceline>
        <sourceline coveredcount="0">                                 (($column-&gt;isRequired() == true) ? ' NOT NULL' : '') .</sourceline>
        <sourceline coveredcount="0">                                 (($column-&gt;isAutoIncrement() === true) ? ' IDENTITY(1,1)' : '') .</sourceline>
        <sourceline coveredcount="0">                                 (($column-&gt;getDefault() &amp;&amp; $column-&gt;getType() != 'datetime' &amp;&amp;</sourceline>
        <sourceline coveredcount="0">                                     $column-&gt;getType() != 'timestamp' &amp;&amp; !$column-&gt;isAutoIncrement() &amp;&amp;</sourceline>
        <sourceline coveredcount="0">                                     !$column-&gt;isPrimaryKey()) ? ' DEFAULT ' . $column-&gt;getDefault() : '') .</sourceline>
        <sourceline coveredcount="0">                                 ((!$column-&gt;getDefault() &amp;&amp; !$column-&gt;isRequired() &amp;&amp; !$column-&gt;isAutoIncrement() &amp;&amp;</sourceline>
        <sourceline coveredcount="0">                                      !$column-&gt;isPrimaryKey()) ? ' DEFAULT NULL' : '') . ', ';</sourceline>
        <sourceline coveredcount="0">              }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">              $pkeyColumns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">              if(count($pkeyColumns)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                  $sql .= ' PRIMARY KEY (';</sourceline>
        <sourceline coveredcount="0">                  for($i=0; $i&lt;count($pkeyColumns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                       $sql .= '[' . $pkeyColumns[$i]-&gt;getName() . ']';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                       if(($i+1) &lt; count($pkeyColumns))</sourceline>
        <sourceline coveredcount="0">                           $sql .= ', ';</sourceline>
        <sourceline coveredcount="0">                  }</sourceline>
        <sourceline coveredcount="0">	              $sql .= '), ';</sourceline>
        <sourceline coveredcount="0">              }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">              if($table-&gt;hasForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                  $bProcessedKeys = array();</sourceline>
        <sourceline coveredcount="0">                  $foreignKeyColumns = $table-&gt;getForeignKeyColumns();</sourceline>
        <sourceline coveredcount="0">                  for($h=0; $h&lt;count($foreignKeyColumns); $h++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                        $fk = $foreignKeyColumns[$h]-&gt;getForeignKey();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                        if(in_array($fk-&gt;getName(), $bProcessedKeys))</sourceline>
        <sourceline coveredcount="0">                            continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                        $fk-&gt;setOnUpdate(str_replace('_', ' ', $fk-&gt;getOnUpdate()));</sourceline>
        <sourceline coveredcount="0">                        $fk-&gt;setOnDelete(str_replace('_', ' ', $fk-&gt;getOnDelete()));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                        // Get foreign keys which are part of the same relationship</sourceline>
        <sourceline coveredcount="0">                        $relatedKeys = $table-&gt;getForeignKeyColumnsByKey($fk-&gt;getName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                        $sql .= ' CONSTRAINT ' . $fk-&gt;getName() . '';</sourceline>
        <sourceline coveredcount="0">                        $sql .= ' FOREIGN KEY (';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                        for($j=0; $j&lt;count($relatedKeys); $j++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                             $sql .= $relatedKeys[$j]-&gt;getColumnInstance()-&gt;getName();</sourceline>
        <sourceline coveredcount="0">                             if(($j+1) &lt; count($relatedKeys))</sourceline>
        <sourceline coveredcount="0">                                 $sql .= ', ';</sourceline>
        <sourceline coveredcount="0">                        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                        $sql .= ') REFERENCES ' . $fk-&gt;getReferencedTable() . ' (';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                        for($j=0; $j&lt;count($relatedKeys); $j++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                             $sql .= '' . $relatedKeys[$j]-&gt;getReferencedColumn() . '';</sourceline>
        <sourceline coveredcount="0">                             if(($j+1) &lt; count($relatedKeys))</sourceline>
        <sourceline coveredcount="0">                                 $sql .= ', ';</sourceline>
        <sourceline coveredcount="0">                        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                        $sql .= ') ';</sourceline>
        <sourceline coveredcount="0">                        $sql .= (($fk-&gt;getOnUpdate()) ? ' ON UPDATE ' . $fk-&gt;getOnUpdate() : '');</sourceline>
        <sourceline coveredcount="0">                        $sql .= (($fk-&gt;getOnDelete()) ? ' ON DELETE ' . $fk-&gt;getOnDelete() : '') . ', ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                        array_push($bProcessedKeys, $fk-&gt;getName());</sourceline>
        <sourceline coveredcount="0">                   }</sourceline>
        <sourceline coveredcount="0">              }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">              $sql .= ');';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">              return $sql;</sourceline>
        <sourceline coveredcount="0">          }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/AgilePHP/orm/BaseDialect#beginTransaction()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function beginTransaction() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 Log::debug('MSSQLDialect::beginTransaction Beginning transaction');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/AgilePHP/orm/BaseDialect#commit()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function commit() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 sqlsrv_commit($this-&gt;conn);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 Log::debug('MSSQLDialect::commit Transaction successfully committed.');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/AgilePHP/orm/BaseDialect#rollBack($message, $code)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function rollBack($message = null, $code = 0) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 Log::debug('MSSQLDialect::rollBack ' . (($message == null) ? '' : ' ' . $message));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;transactionInProgress = false;</sourceline>
        <sourceline coveredcount="0">	  		 sqlsrv_rollback($this-&gt;conn);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if($message) throw new ORMException($message, $code);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * A statement resource. If the statement cannot be created and/or executed, false is returned.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $sql The SQL statement to execute</sourceline>
        <sourceline coveredcount="0">	   * @param array $params Optional array of values that correspond to parameters in a parameterized query.</sourceline>
        <sourceline coveredcount="0">	   * @return A statement resource. If the statement cannot be created and/or executed, false is returned.</sourceline>
        <sourceline coveredcount="0">	   * @see src/AgilePHP/orm/BaseDialect#query($sql)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function query($sql, $params = array()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 Log::debug('MSSQLDialect::query Executing' .</sourceline>
        <sourceline coveredcount="0">			  	     					(($this-&gt;transactionInProgress) ? ' (transactional) ' : ' ') .</sourceline>
        <sourceline coveredcount="0">			  	     					'raw PDO::query ' . $sql . 'with $params ' . print_r($params, true));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return sqlsrv_query($this-&gt;conn, $sql, (count($params)) ? $params : null);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/BaseDialect#prepare($statement)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function prepare($statement) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 Log::debug('MSSQLDialect::prepare Preparing' .</sourceline>
        <sourceline coveredcount="0">			  	     					(($this-&gt;transactionInProgress) ? ' (transactional) ' : ' ') .</sourceline>
        <sourceline coveredcount="0">			  	     					'statement ' . $statement);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;statement = $statement;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/BaseDialect#execute($inputParameters)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function execute(array $inputParameters = array()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 Log::debug('MSSQLDialect::execute Executing' .</sourceline>
        <sourceline coveredcount="0">			  	     		(($this-&gt;transactionInProgress) ? ' (transactional) ' : ' ') .</sourceline>
        <sourceline coveredcount="0">			  	     		'prepared statement with inputParameters ' . print_r($inputParameters, true));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // SQLSRV driver requires parameters passed to prepare be passed by reference</sourceline>
        <sourceline coveredcount="0">	  		 $params = array();</sourceline>
        <sourceline coveredcount="0">	  		 for($i=0; $i&lt;count($inputParameters); $i++)</sourceline>
        <sourceline coveredcount="0">	  		 	 $params[$i] = &amp;$inputParameters[$i];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if(!$this-&gt;stmt = sqlsrv_prepare($this-&gt;conn, $this-&gt;statement, $params))</sourceline>
        <sourceline coveredcount="0">	  		 	 throw new ORMException(print_r(sqlsrv_errors(), true));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if(!sqlsrv_execute($this-&gt;stmt))</sourceline>
        <sourceline coveredcount="0">	  		 	 throw new ORMException(print_r(sqlsrv_errors(), true));</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/BaseDialect#truncate(DomainModel $model)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function truncate(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     $table = $this-&gt;getTableByModel($model);</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;query('TRUNCATE table ' . $table-&gt;getName() . ';');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#drop()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function drop() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	 	 	 $this-&gt;query('DROP DATABASE ' . $this-&gt;getDatabase()-&gt;getName());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	/**</sourceline>
        <sourceline coveredcount="0">	   	 * Persists a domain model object</sourceline>
        <sourceline coveredcount="0">	     *</sourceline>
        <sourceline coveredcount="0">	     * @param DomainModel $model The domain model object to persist</sourceline>
        <sourceline coveredcount="0">	     * @return PDOStatement</sourceline>
        <sourceline coveredcount="0">	     * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	     */</sourceline>
        <sourceline coveredcount="0">	    public function persist(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	   $this-&gt;model = $model;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	   		   $values = array();</sourceline>
        <sourceline coveredcount="0">			   $table = $this-&gt;getTableByModel($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   Log::debug('MSSQLDialect::persist Performing persist on model \'' . $table-&gt;getModel() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	   		   $this-&gt;validate($table, true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   $sql = 'INSERT INTO ' . $table-&gt;getName() . '(';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   $cols = $table-&gt;getColumns();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   $columns = array();</sourceline>
        <sourceline coveredcount="0">			   foreach($cols as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   		if($column-&gt;getType() == 'timestamp') continue;</sourceline>
        <sourceline coveredcount="0">			   		if($column-&gt;isAutoIncrement()) continue;</sourceline>
        <sourceline coveredcount="0">			   		if($column-&gt;isLazy()) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   		array_push($columns, $column);</sourceline>
        <sourceline coveredcount="0">			   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   for($i=0; $i&lt;count($columns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   		$sql .= $columns[$i]-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   		if(($i + 1) &lt; count($columns))</sourceline>
        <sourceline coveredcount="0">			   			$sql .= ', ';</sourceline>
        <sourceline coveredcount="0">			   }</sourceline>
        <sourceline coveredcount="0">			   $sql .= ') VALUES (';</sourceline>
        <sourceline coveredcount="0">			   for($i=0; $i&lt;count($columns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   		$sql .= '?';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   	    $accessor = $this-&gt;toAccessor($columns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0">			   	    if($columns[$i]-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   	    	if(is_object($model-&gt;$accessor())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   	    		$refAccessor = $this-&gt;toAccessor($columns[$i]-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0">			   	    		// Get foreign key value from the referenced field/instance accessor</sourceline>
        <sourceline coveredcount="0">			   	    		if($model-&gt;$accessor()-&gt;$refAccessor() != null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   	    			switch($columns[$i]-&gt;getForeignKey()-&gt;getCascade()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   	    		       case 'all':</sourceline>
        <sourceline coveredcount="0">			   	    		       case 'persist-merge':</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  		   			   	    			try {</sourceline>
        <sourceline coveredcount="0">        			   	    				  // Try to persist the referenced entity first</sourceline>
        <sourceline coveredcount="0">        					   	    		  $this-&gt;persist($model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="0">        			   	    			}</sourceline>
        <sourceline coveredcount="0">        			   	    			catch(Exception $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        			   	    				   // The referenced entity already exists - merge instead</sourceline>
        <sourceline coveredcount="0">        			   	    				   if(preg_match('/duplicate/i', $e-&gt;getMessage()))</sourceline>
        <sourceline coveredcount="0">        			   	    				   	  $this-&gt;merge($model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="0">        			   	    			}</sourceline>
        <sourceline coveredcount="0">        			   	    		break;</sourceline>
        <sourceline coveredcount="0">			   	    		   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   	    		   if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="0">			   	    		     array_push($values, $transformer::transform($model-&gt;$accessor()-&gt;$refAccessor()));</sourceline>
        <sourceline coveredcount="0">			   	    		   else</sourceline>
        <sourceline coveredcount="0">	   	    		             array_push($values, $model-&gt;$accessor()-&gt;$refAccessor());</sourceline>
        <sourceline coveredcount="0">			   	    		}</sourceline>
        <sourceline coveredcount="0">			   	    	}</sourceline>
        <sourceline coveredcount="0">			   	    	else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   	    		array_push($values, null);</sourceline>
        <sourceline coveredcount="0">			   	    	}</sourceline>
        <sourceline coveredcount="0">			   	    }</sourceline>
        <sourceline coveredcount="0">			   	    else // No foreign key</sourceline>
        <sourceline coveredcount="0">			   	    	array_push($values, (($model-&gt;$accessor() == '') ? NULL : $model-&gt;$accessor()));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   		if(($i + 1) &lt; count($columns))</sourceline>
        <sourceline coveredcount="0">				   		$sql .= ', ';</sourceline>
        <sourceline coveredcount="0">			   }</sourceline>
        <sourceline coveredcount="0">			   $sql .= ');';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	   		   $this-&gt;prepare($sql);</sourceline>
        <sourceline coveredcount="0">	  		   return $this-&gt;execute($values);</sourceline>
        <sourceline coveredcount="0">	    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Overrides parent find method to provide MSSQL specific syntax.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param DomainModel $model A domain model object. Any fields which are set in the object are used to filter results.</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException If any primary keys contain null values or any</sourceline>
        <sourceline coveredcount="0">	   * 		   errors are encountered executing queries</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function find(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	 $table = $this-&gt;getTableByModel($model);</sourceline>
        <sourceline coveredcount="0">			 $newModel = $table-&gt;getModelInstance();</sourceline>
        <sourceline coveredcount="0">			 $values = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 Log::debug('MSSQLDialect::find Performing find on model \'' . $table-&gt;getModel() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 try {</sourceline>
        <sourceline coveredcount="0">	  		  	    $pkeyColumns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="0">	  		   		if($this-&gt;isEmpty($model)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	   	        $sql = 'SELECT';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	   	        if($this-&gt;isDistinct() != null)</sourceline>
        <sourceline coveredcount="0">	    	   	        	$sql .= ' DISTINCT ' . $this-&gt;isDistinct();</sourceline>
        <sourceline coveredcount="0">	    	   	        else</sourceline>
        <sourceline coveredcount="0">	    	   	        		$sql .= ($this-&gt;getMaxResults() ? ' TOP ' . $this-&gt;getMaxResults() . ' *' : '');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	   	        $sql .= ' FROM ' . $table-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	   	        $order = $this-&gt;getOrderBy();</sourceline>
        <sourceline coveredcount="0">	    	   	        $offset = $this-&gt;getOffset();</sourceline>
        <sourceline coveredcount="0">	    	   	        $groupBy = $this-&gt;getGroupBy();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    	   	         	$sql .= ($this-&gt;getRestrictions() != null) ? $this-&gt;createRestrictSQL() : '';</sourceline>
        <sourceline coveredcount="0">					 	$sql .= ($order != null) ? ' ORDER BY ' . $order['column'] . ' ' . $order['direction'] : '';</sourceline>
        <sourceline coveredcount="0">					 	$sql .= ($groupBy)? ' GROUP BY ' . $this-&gt;getGroupBy() : '';</sourceline>
        <sourceline coveredcount="0">    	   	         	$sql .= ';';</sourceline>
        <sourceline coveredcount="0">	    	   		 }</sourceline>
        <sourceline coveredcount="0">	    	   		 else {</sourceline>
        <sourceline coveredcount="0">	    	   		 		$where = '';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    	   		 		$columns = $table-&gt;getColumns();</sourceline>
        <sourceline coveredcount="0">							for($i=0; $i&lt;count($columns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								 if($columns[$i]-&gt;isLazy()) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							 	 $accessor = $this-&gt;toAccessor($columns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0">						     	 if($model-&gt;$accessor() == null) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						     	 $where .= (count($values) ? ' AND ' : ' ') . $columns[$i]-&gt;getName() . '=?';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								 if(is_object($model-&gt;$accessor())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						     	 	 $refAccessor = $this-&gt;toAccessor($columns[$i]-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						     	 	 if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="0">						     	        array_push($values, $transformer::transform($model-&gt;$accessor()-&gt;$refAccessor()));</sourceline>
        <sourceline coveredcount="0">						     	     else</sourceline>
        <sourceline coveredcount="0">				     	 	     	    array_push($values, $model-&gt;$accessor()-&gt;$refAccessor());</sourceline>
        <sourceline coveredcount="0">						     	 }</sourceline>
        <sourceline coveredcount="0">						     	 else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						     	     if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="0">						     	        array_push($values, $transformer::transform($model-&gt;$accessor()));</sourceline>
        <sourceline coveredcount="0">						     	     else</sourceline>
        <sourceline coveredcount="0">				     	 	     	    array_push($values, $model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="0">						     	 }</sourceline>
        <sourceline coveredcount="0">						    }</sourceline>
        <sourceline coveredcount="0">						    $sql = 'SELECT * FROM ' . $table-&gt;getName() . ' WHERE' . $where;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					 $this-&gt;setDistinct(null);</sourceline>
        <sourceline coveredcount="0">	   	         	 $this-&gt;setRestrictions(array());</sourceline>
        <sourceline coveredcount="0">	   	         	 $this-&gt;setRestrictionsLogicOperator('AND');</sourceline>
        <sourceline coveredcount="0">	   	         	 $this-&gt;setOrderBy(null, 'ASC');</sourceline>
        <sourceline coveredcount="0">	   	         	 $this-&gt;setGroupBy(null);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					 $this-&gt;prepare($sql);</sourceline>
        <sourceline coveredcount="0">					 $this-&gt;execute($values);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					 if(!sqlsrv_has_rows($this-&gt;stmt)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					 	Log::debug('MSSQLDialect::find Empty result set for model \'' . $table-&gt;getModel() . '\'.');</sourceline>
        <sourceline coveredcount="0">					 	return array();</sourceline>
        <sourceline coveredcount="0">					 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				 	 $index = 0;</sourceline>
        <sourceline coveredcount="0">				 	 $models = array();</sourceline>
        <sourceline coveredcount="0">					 while($stdClass = sqlsrv_fetch_object($this-&gt;stmt)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					 		  $m = $table-&gt;getModelInstance();</sourceline>
        <sourceline coveredcount="0">					 	   	  foreach(get_object_vars($stdClass) as $name =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					 	   	  		   $modelProperty = $this-&gt;getPropertyNameForColumn($table, $name);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					 	   	  		   if(is_object($value))</sourceline>
        <sourceline coveredcount="0">					 	   	  		   	   $value = $this-&gt;cast($value);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							 	   	   // Create foreign model instances from foreign values</sourceline>
        <sourceline coveredcount="0">						 	 		   foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	 		   			if($column-&gt;getName() != $name) continue;</sourceline>
        <sourceline coveredcount="0">						 	 		   		    if($column-&gt;isLazy()) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	 		   		    if($renderer = $column-&gt;getRenderer())</sourceline>
        <sourceline coveredcount="0">                        				   	       $value = $renderer::render($value);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                        				   	    if(!$value) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	 		  		    if($column-&gt;isForeignKey() &amp;&amp; $column-&gt;getName() == $name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	 		  		   	    $foreignModel = $column-&gt;getForeignKey()-&gt;getReferencedTableInstance()-&gt;getModel();</sourceline>
        <sourceline coveredcount="0">						 	 		  		   	    $foreignInstance = new $foreignModel();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	 		  		   	    $foreignMutator = $this-&gt;toMutator($column-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0">						 	 		  		   	    $foreignInstance-&gt;$foreignMutator($value);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	 		  		   	    $persisted = $this-&gt;find($foreignInstance);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	 		  		   	    // php namespace support - remove \ character from fully qualified paths</sourceline>
        <sourceline coveredcount="0">							 	 		  		   	$foreignModelPieces = explode('\\', $foreignModel);</sourceline>
        <sourceline coveredcount="0">							 	 		  		   	$foreignClassName = array_pop($foreignModelPieces);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	 		  		   	    $instanceMutator = $this-&gt;toMutator($modelProperty);</sourceline>
        <sourceline coveredcount="0">						 	 		  		   	    $m-&gt;$instanceMutator($persisted[0]);</sourceline>
        <sourceline coveredcount="0">						 	 		  		    }</sourceline>
        <sourceline coveredcount="0">						 	 		  		    else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	 		  		   		$mutator = $this-&gt;toMutator($modelProperty);</sourceline>
        <sourceline coveredcount="0">					 	   	   		  				$m-&gt;$mutator($value);</sourceline>
        <sourceline coveredcount="0">						 	 		  		    }</sourceline>
        <sourceline coveredcount="0">						 	 		   }</sourceline>
        <sourceline coveredcount="0">					 	   	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					 	   	  array_push($models, $m);</sourceline>
        <sourceline coveredcount="0">					 	   	  $index++;</sourceline>
        <sourceline coveredcount="0">					 	   	  if($index == $this-&gt;getMaxResults())  break;</sourceline>
        <sourceline coveredcount="0">				     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				     return $models;</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0">	  		 catch(Exception $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		throw new ORMException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/AgilePHP/orm/BaseDialect#close()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function close() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if($this-&gt;conn)</sourceline>
        <sourceline coveredcount="0">	  		 	sqlsrv_close($this-&gt;conn);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#reverseEngineer()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function reverseEngineer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $lengthables = array('binary', 'char', 'decimal', 'nchar', 'numeric', 'nvarchar', 'varbinary', 'varchar');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $Database = new Database();</sourceline>
        <sourceline coveredcount="0">	  		 $Database-&gt;setName($this-&gt;database-&gt;getName());</sourceline>
        <sourceline coveredcount="0">	  		 $Database-&gt;setType($this-&gt;database-&gt;getType());</sourceline>
        <sourceline coveredcount="0">	  		 $Database-&gt;setHostname($this-&gt;database-&gt;getHostname());</sourceline>
        <sourceline coveredcount="0">	  		 $Database-&gt;setUsername($this-&gt;database-&gt;getUsername());</sourceline>
        <sourceline coveredcount="0">	  		 $Database-&gt;setPassword($this-&gt;database-&gt;getPassword());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $stmt = $this-&gt;prepare('select * from information_schema.tables;');</sourceline>
        <sourceline coveredcount="0">	  		 $this-&gt;execute();</sourceline>
        <sourceline coveredcount="0">			 $tables = array();</sourceline>
        <sourceline coveredcount="0">			 while($stdClass = sqlsrv_fetch_object($this-&gt;stmt))</sourceline>
        <sourceline coveredcount="0">			 	array_push($tables, $stdClass);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $stmt2 = $this-&gt;query('SELECT</sourceline>
        <sourceline coveredcount="0">							    FK_Table  = FK.TABLE_NAME,</sourceline>
        <sourceline coveredcount="0">							    FK_Column = CU.COLUMN_NAME,</sourceline>
        <sourceline coveredcount="0">							    PK_Table  = PK.TABLE_NAME,</sourceline>
        <sourceline coveredcount="0">							    PK_Column = PT.COLUMN_NAME,</sourceline>
        <sourceline coveredcount="0">							    Constraint_Name = C.CONSTRAINT_NAME</sourceline>
        <sourceline coveredcount="0">							FROM</sourceline>
        <sourceline coveredcount="0">							    INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS C</sourceline>
        <sourceline coveredcount="0">							    INNER JOIN</sourceline>
        <sourceline coveredcount="0">							    INFORMATION_SCHEMA.TABLE_CONSTRAINTS FK</sourceline>
        <sourceline coveredcount="0">							        ON C.CONSTRAINT_NAME = FK.CONSTRAINT_NAME</sourceline>
        <sourceline coveredcount="0">							    INNER JOIN</sourceline>
        <sourceline coveredcount="0">							    INFORMATION_SCHEMA.TABLE_CONSTRAINTS PK</sourceline>
        <sourceline coveredcount="0">							        ON C.UNIQUE_CONSTRAINT_NAME = PK.CONSTRAINT_NAME</sourceline>
        <sourceline coveredcount="0">							    INNER JOIN</sourceline>
        <sourceline coveredcount="0">							    INFORMATION_SCHEMA.KEY_COLUMN_USAGE CU</sourceline>
        <sourceline coveredcount="0">							        ON C.CONSTRAINT_NAME = CU.CONSTRAINT_NAME</sourceline>
        <sourceline coveredcount="0">							    INNER JOIN</sourceline>
        <sourceline coveredcount="0">							    (</sourceline>
        <sourceline coveredcount="0">							        SELECT</sourceline>
        <sourceline coveredcount="0">							            i1.TABLE_NAME, i2.COLUMN_NAME</sourceline>
        <sourceline coveredcount="0">							        FROM</sourceline>
        <sourceline coveredcount="0">							            INFORMATION_SCHEMA.TABLE_CONSTRAINTS i1</sourceline>
        <sourceline coveredcount="0">							            INNER JOIN</sourceline>
        <sourceline coveredcount="0">							            INFORMATION_SCHEMA.KEY_COLUMN_USAGE i2</sourceline>
        <sourceline coveredcount="0">							            ON i1.CONSTRAINT_NAME = i2.CONSTRAINT_NAME</sourceline>
        <sourceline coveredcount="0">							            WHERE i1.CONSTRAINT_TYPE = \'PRIMARY KEY\'</sourceline>
        <sourceline coveredcount="0">							   ) PT</sourceline>
        <sourceline coveredcount="0">							    ON PT.TABLE_NAME = PK.TABLE_NAME');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 $foreignKeys = array();</sourceline>
        <sourceline coveredcount="0">			 while($stdClass = sqlsrv_fetch_object($stmt2))</sourceline>
        <sourceline coveredcount="0">			 	array_push($foreignKeys, $stdClass);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 foreach($tables as $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 		// ignore system tables</sourceline>
        <sourceline coveredcount="0">				 	if(substr($table-&gt;TABLE_NAME, 0, 3) == 'sys' || $table-&gt;TABLE_NAME == 'dtproperties')</sourceline>
        <sourceline coveredcount="0">				 	 	continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 		$stmt3 = $this-&gt;query('SELECT [name]</sourceline>
        <sourceline coveredcount="0">									 FROM syscolumns</sourceline>
        <sourceline coveredcount="0">									 WHERE [id] IN (SELECT [id]</sourceline>
        <sourceline coveredcount="0">									                  FROM sysobjects</sourceline>
        <sourceline coveredcount="0">									                 WHERE [name] = \'' . $table-&gt;TABLE_NAME . '\')</sourceline>
        <sourceline coveredcount="0">									   AND colid IN (SELECT SIK.colid</sourceline>
        <sourceline coveredcount="0">									                   FROM sysindexkeys SIK</sourceline>
        <sourceline coveredcount="0">									                   JOIN sysobjects SO ON SIK.[id] = SO.[id]</sourceline>
        <sourceline coveredcount="0">									                  WHERE SIK.indid = 1</sourceline>
        <sourceline coveredcount="0">									                    AND SO.[name] = \'' . $table-&gt;TABLE_NAME . '\')');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					$primaryKeys = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					if($stmt3) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						while($stdClass = sqlsrv_fetch_object($stmt3))</sourceline>
        <sourceline coveredcount="0">							array_push($primaryKeys, $stdClass);</sourceline>
        <sourceline coveredcount="0">					}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 		$Table = new Table();</sourceline>
        <sourceline coveredcount="0">			 		$Table-&gt;setName($table-&gt;TABLE_NAME);</sourceline>
        <sourceline coveredcount="0">			 		$Table-&gt;setModel(ucfirst($table-&gt;TABLE_NAME));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 		$this-&gt;prepare('exec sp_columns ' . $table-&gt;TABLE_NAME);</sourceline>
        <sourceline coveredcount="0">			  		$this-&gt;execute();</sourceline>
        <sourceline coveredcount="0">					$columns = array();</sourceline>
        <sourceline coveredcount="0">					while($stdClass = sqlsrv_fetch_object($this-&gt;stmt))</sourceline>
        <sourceline coveredcount="0">						array_push($columns, $stdClass);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					foreach($columns as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							$type = preg_match_all('/^(.*)\\s+(identity).*$/i', $column-&gt;TYPE_NAME, $matches);</sourceline>
        <sourceline coveredcount="0">							$identity = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							if(count($matches) == 3 &amp;&amp; !empty($matches[1])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								$type = $matches[1][0];</sourceline>
        <sourceline coveredcount="0">	      	      		   		$identity = $matches[2][0];</sourceline>
        <sourceline coveredcount="0">							}</sourceline>
        <sourceline coveredcount="0">							else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								$type = $column-&gt;TYPE_NAME;</sourceline>
        <sourceline coveredcount="0">							}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							$Column = new Column(null, $table-&gt;TABLE_NAME);</sourceline>
        <sourceline coveredcount="0">							$Column-&gt;setName($column-&gt;COLUMN_NAME);</sourceline>
        <sourceline coveredcount="0">							$Column-&gt;setType($type);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							if(in_array($column-&gt;TYPE_NAME, $lengthables))</sourceline>
        <sourceline coveredcount="0">								$Column-&gt;setLength(($column-&gt;LENGTH == 2147483647) ? 8000 : $column-&gt;LENGTH);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							$Column-&gt;setRequired(($column-&gt;IS_NULLABLE == 'YES') ? true : false);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							if($identity)</sourceline>
        <sourceline coveredcount="0">								$Column-&gt;setAutoIncrement(true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							foreach($primaryKeys as $pkey) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								if($column-&gt;COLUMN_NAME == $pkey-&gt;name)</sourceline>
        <sourceline coveredcount="0">									$Column-&gt;setPrimaryKey(true);</sourceline>
        <sourceline coveredcount="0">							}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							foreach($foreignKeys as $fkey) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">								if($fkey-&gt;FK_Table == $table-&gt;TABLE_NAME &amp;&amp;</sourceline>
        <sourceline coveredcount="0">									$fkey-&gt;FK_Column == $column-&gt;COLUMN_NAME) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										$ForeignKey = new ForeignKey(null, $fkey-&gt;FK_Table, $fkey-&gt;FK_Column);</sourceline>
        <sourceline coveredcount="0">										$ForeignKey-&gt;setName($fkey-&gt;Constraint_Name);</sourceline>
        <sourceline coveredcount="0">										$ForeignKey-&gt;setType('one-to-many');</sourceline>
        <sourceline coveredcount="0">										$ForeignKey-&gt;setReferencedTable($fkey-&gt;PK_Table);</sourceline>
        <sourceline coveredcount="0">										$ForeignKey-&gt;setReferencedColumn($fkey-&gt;PK_Column);</sourceline>
        <sourceline coveredcount="0">										$ForeignKey-&gt;setReferencedController(ucfirst($fkey-&gt;FK_Table) . 'Controller');</sourceline>
        <sourceline coveredcount="0">										$ForeignKey-&gt;setOnDelete(($Column-&gt;isRequired()) ? 'CASCADE' : 'SET_NULL');</sourceline>
        <sourceline coveredcount="0">										$ForeignKey-&gt;setOnUpdate('CASCADE');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">										$Column-&gt;setForeignKey($ForeignKey);</sourceline>
        <sourceline coveredcount="0">									}</sourceline>
        <sourceline coveredcount="0">							}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							$Table-&gt;addColumn($Column);</sourceline>
        <sourceline coveredcount="0">					}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					$Database-&gt;addTable($Table);</sourceline>
        <sourceline coveredcount="0">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 // sp_stored_procedures</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			 return $Database;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the total number of records in the specified model.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param DomainModel $model The domain object to get the count for.</sourceline>
        <sourceline coveredcount="0">	   * @return Integer The total number of records in the table.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function count(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 $sql = 'SELECT count(*) as count FROM ' . $this-&gt;getTableByModel($model)-&gt;getName();</sourceline>
        <sourceline coveredcount="0">			 $sql .= ($this-&gt;createRestrictSQL() == null) ? '' : $this-&gt;createRestrictSQL();</sourceline>
        <sourceline coveredcount="0">			 $sql .= ';';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     	 $this-&gt;prepare($sql);</sourceline>
        <sourceline coveredcount="0">	     	 $this-&gt;execute();</sourceline>
        <sourceline coveredcount="0">  			 $result = sqlsrv_fetch_object($this-&gt;stmt);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  			 return ($result == null) ? 0 : $result-&gt;count;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Provides unitlity method for casting SQL SERVER objects to PHP values.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Object $value The SQL SERVER object to extract the PHP value from.</sourceline>
        <sourceline coveredcount="0">	   * @return mixed The extracted PHP value.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function cast($value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  if($value instanceof DateTime)</sourceline>
        <sourceline coveredcount="0">	  		  	  if(isset($value-&gt;date))</sourceline>
        <sourceline coveredcount="0">	  		  	  	  return $value-&gt;date;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="BaseDialect" methodcount="56" methodscovered="26" statementcount="509" statementscovered="356" totalcount="565" totalcovered="382">
      <sourcefile name="BaseDialect.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/dialect/BaseDialect.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm.dialect</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Base ORM class which assists with common dialect tasks.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm.dialect</sourceline>
        <sourceline coveredcount="0"> * @abstract</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">abstract class BaseDialect {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 protected $PDOStatement;			 // Internally used PDO::Statement</sourceline>
        <sourceline coveredcount="0">		 private $maxResults = 25;			 // Used during a call to 'find'</sourceline>
        <sourceline coveredcount="0">		 private $distinct;					 // Sets SQL DISTINCT clause</sourceline>
        <sourceline coveredcount="0">		 private $restrictions;				 // WHERE clause restrictions</sourceline>
        <sourceline coveredcount="0">	     private $restrictionsLogic = 'AND'; // Logic operator to use in WHERE clause (and|or)</sourceline>
        <sourceline coveredcount="0">	     private $comparisonLogic = '=';	 // Logic operator to use in WHERE clause (=|&lt;|&gt;|LIKE)</sourceline>
        <sourceline coveredcount="0">	     private $orderBy;					 // Stores the column name to sort the result set by</sourceline>
        <sourceline coveredcount="0">	     private $orderDirection;			 // The direction to sort the result set (Default is 'ASC')</sourceline>
        <sourceline coveredcount="0">	     private $offset;					 // Stores the offset for a LIMIT clause.</sourceline>
        <sourceline coveredcount="0">	     private $groupBy;					 // GROUP BY clause</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 protected $pdo;					 // PHP Data Objects</sourceline>
        <sourceline coveredcount="0">	     protected $model;					 // Domain model object (ActiveRecord)</sourceline>
        <sourceline coveredcount="0">		 protected $database;				 // Database object</sourceline>
        <sourceline coveredcount="0">		 protected $transactionInProgress;	 // True when a transaction is in progress</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Returns the PDO instance in use by the ORM framework.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @return PDO The PDO instance in use by the framework.</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 public function getPDO() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 		return $this-&gt;pdo;</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Returns the Database instance the ORM is currently managing.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @return Database The Database object representation of orm.xml</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 public function getDatabase() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		 		return $this-&gt;database;</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Adds an SQL distinct clause to 'find' operation.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param string $columnName The column name to get the distinct values for</sourceline>
        <sourceline coveredcount="0">		  * @return void</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 public function setDistinct($columnName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">		 		$this-&gt;distinct = $columnName;</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Returns the 'distinct' column to use in an SQL SELECT statement</sourceline>
        <sourceline coveredcount="0">		  * if one has been defined.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @return string The DISTINCT column name or null if a column name has not been defined.</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 public function isDistinct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">		 		return $this-&gt;distinct;</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Sets the maxResults property value which is used during</sourceline>
        <sourceline coveredcount="0">		  * find operations which contain an empty model.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param integer $maxResults Optional number of records to return in result sets. Defaults to 25.</sourceline>
        <sourceline coveredcount="0">		  * @return void</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 public function setMaxResults($maxResults = 25) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 		$this-&gt;maxResults = $maxResults;</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Returns the 'maxResults' property value which is used during</sourceline>
        <sourceline coveredcount="0">		  * a 'find' operation which contains an empty model.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @return integer The total number of records to return in a result set.</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 public function getMaxResults() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">		 		return $this-&gt;maxResults;</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Sets the offset used in a SQL LIMIT clause.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param integer $offset The limit offset.</sourceline>
        <sourceline coveredcount="0">		  * @return void</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 public function setOffset($offset) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 		$this-&gt;offset = $offset;</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">		  * Returns the SQL LIMIT offset value.</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @return Integer The LIMIT offset.</sourceline>
        <sourceline coveredcount="0">		  */</sourceline>
        <sourceline coveredcount="0">		 public function getOffset() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">		 		return $this-&gt;offset;</sourceline>
        <sourceline coveredcount="0">		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	      * Sets the SQL 'group by' clause.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @param string $column The column name to group the result set by</sourceline>
        <sourceline coveredcount="0">	      * @return void</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function setGroupBy($column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	     		   $this-&gt;groupBy = $column;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns SQL GROUP BY clause.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return String GROUP BY value</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function getGroupBy() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	     		return $this-&gt;groupBy;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	     /**</sourceline>
        <sourceline coveredcount="0">	      * Returns boolean flag indicating whether or not a transaction is in progress.</sourceline>
        <sourceline coveredcount="0">	      *</sourceline>
        <sourceline coveredcount="0">	      * @return bool True if a transaction is in progress, false otherwise.</sourceline>
        <sourceline coveredcount="0">	      */</sourceline>
        <sourceline coveredcount="0">	     public function hasTransactionInProgress() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	            return $this-&gt;transactionInProgress;</sourceline>
        <sourceline coveredcount="0">	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Begins a transaction</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @return void</sourceline>
        <sourceline coveredcount="0">	  	  * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	  	  * @see http://us2.php.net/manual/en/pdo.transactions.php</sourceline>
        <sourceline coveredcount="0">	  	  * @see http://usphp.com/manual/en/function.PDO-beginTransaction.php</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">	  	 public function beginTransaction() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		    Log::debug('BaseDialect::beginTransaction Beginning transaction');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		    try {</sourceline>
        <sourceline coveredcount="4">	  		   	 	  $this-&gt;pdo-&gt;beginTransaction();</sourceline>
        <sourceline coveredcount="4">	  		   	 	  $this-&gt;transactionInProgress = true;</sourceline>
        <sourceline coveredcount="0">	  		    }</sourceline>
        <sourceline coveredcount="4">	  		    catch(PDOException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	  		   		   throw new ORMException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">	  		    }</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Commits an already started transaction.</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @return void</sourceline>
        <sourceline coveredcount="0">	  	  * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	  	  * @see http://us2.php.net/manual/en/pdo.transactions.php</sourceline>
        <sourceline coveredcount="0">	  	  * @see http://usphp.com/manual/en/function.PDO-commit.php</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">	  	 public function commit() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  	        if(!$this-&gt;transactionInProgress) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	           Log::warn('BaseDialect::commit Warning about commit() without an active transaction. Aborting commit!');</sourceline>
        <sourceline coveredcount="-1">	  	           return false;</sourceline>
        <sourceline coveredcount="-2">	  	        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		    try {</sourceline>
        <sourceline coveredcount="2">	  		   		  $this-&gt;pdo-&gt;commit();</sourceline>
        <sourceline coveredcount="2">	  		   		  $this-&gt;transactionInProgress = false;</sourceline>
        <sourceline coveredcount="2">	  		   		  Log::debug('BaseDialect::commit Transaction successfully committed');</sourceline>
        <sourceline coveredcount="0">	  		    }</sourceline>
        <sourceline coveredcount="2">	  		    catch(PDOException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	  		          $this-&gt;rollback($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">	  		    }</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Rolls back a transaction.</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @param string $message Error/reason why the transaction was rolled back</sourceline>
        <sourceline coveredcount="0">	  	  * @param integer $code An error/reason code</sourceline>
        <sourceline coveredcount="0">	  	  * @return void</sourceline>
        <sourceline coveredcount="0">	  	  * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	  	  * @see http://us2.php.net/manual/en/pdo.transactions.php</sourceline>
        <sourceline coveredcount="0">	  	  * @see http://usphp.com/manual/en/function.PDO-rollBack.php</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">	  	 public function rollBack($message = null, $code = 0) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		    try {</sourceline>
        <sourceline coveredcount="2">	  		    	  $this-&gt;pdo-&gt;rollBack();</sourceline>
        <sourceline coveredcount="2">	  		    	  $this-&gt;transactionInProgress = false;</sourceline>
        <sourceline coveredcount="2">	  		    	  Log::debug('BaseDialect::rollBack' . (($message == null) ? '' : ' ' . $message));</sourceline>
        <sourceline coveredcount="0">	  		    }</sourceline>
        <sourceline coveredcount="2">	  		    catch(PDOException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	  		   		   throw new ORMException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">	  		    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		    if($message) throw new ORMException($message, $code);</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">		  * Prepares an SQL prepared statement</sourceline>
        <sourceline coveredcount="0">		  *</sourceline>
        <sourceline coveredcount="0">		  * @param string $statement The SQL statement to prepare</sourceline>
        <sourceline coveredcount="0">		  * @return boolean False if the statement could not execute successfully</sourceline>
        <sourceline coveredcount="0">		  * @throws ORMException</sourceline>
        <sourceline coveredcount="0">		  * @see http://usphp.com/manual/en/function.PDO-prepare.php</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">	  	 public function prepare($statement) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		    Log::debug('BaseDialect::prepare Preparing' .</sourceline>
        <sourceline coveredcount="15">			  	     					(($this-&gt;transactionInProgress) ? ' (transactional) ' : ' ') .</sourceline>
        <sourceline coveredcount="15">			  	     					'statement ' . $statement);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				try {</sourceline>
        <sourceline coveredcount="15">						if(!$this-&gt;PDOStatement = $this-&gt;pdo-&gt;prepare($statement)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">					  	  	$info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">					  	  	if($this-&gt;transactionInProgress)</sourceline>
        <sourceline coveredcount="-1">			  	 		    	$this-&gt;rollBack($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">						  	throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="-2">					    }</sourceline>
        <sourceline coveredcount="0">				}</sourceline>
        <sourceline coveredcount="15">				catch(PDOException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">					   throw new ORMException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">				}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		    return $this-&gt;PDOStatement;</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Executes a prepared statement with optional parameters</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @param array $inputParameters Optional array of input parameters</sourceline>
        <sourceline coveredcount="0">	  	  * @return boolean True if successful, false on fail</sourceline>
        <sourceline coveredcount="0">	  	  * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	  	  * @see http://usphp.com/manual/en/function.PDOStatement-execute.php</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">	  	 public function execute(array $inputParameters = array()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	  		    Log::debug('BaseDialect::execute Executing' .</sourceline>
        <sourceline coveredcount="15">			  	     					(($this-&gt;transactionInProgress) ? ' (transactional) ' : ' ') .</sourceline>
        <sourceline coveredcount="15">			  	     					'prepared statement with $inputParameters ' . print_r($inputParameters, true));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  	try {</sourceline>
        <sourceline coveredcount="15">					  	if(!$this-&gt;PDOStatement-&gt;execute($inputParameters)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">						    $info = $this-&gt;PDOStatement-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">					        if($this-&gt;transactionInProgress)</sourceline>
        <sourceline coveredcount="-1">					  			$this-&gt;rollBack($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">						  	throw new ORMException($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="-2">					    }</sourceline>
        <sourceline coveredcount="0">			  	}</sourceline>
        <sourceline coveredcount="15">			  	catch(PDOException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  		   if($this-&gt;transactionInProgress)</sourceline>
        <sourceline coveredcount="-1">					  	   $this-&gt;rollBack();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  		   throw new ORMException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">			  	}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">			    return $this-&gt;PDOStatement;</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	 /**</sourceline>
        <sourceline coveredcount="0">	  	  * Executes an SQL statement and returns the number of rows affected by the query.</sourceline>
        <sourceline coveredcount="0">	  	  *</sourceline>
        <sourceline coveredcount="0">	  	  * @param string $statement The SQL statement to execute.</sourceline>
        <sourceline coveredcount="0">	  	  * @return integer The number of rows affected by the query.</sourceline>
        <sourceline coveredcount="0">	  	  * @see http://usphp.com/manual/en/function.PDO-exec.php</sourceline>
        <sourceline coveredcount="0">	  	  */</sourceline>
        <sourceline coveredcount="0">	  	 public function exec($statement) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    Log::debug('BaseDialect::exec Executing raw' .</sourceline>
        <sourceline coveredcount="-1">			  	     					(($this-&gt;transactionInProgress) ? ' (transactional) ' : ' ') .</sourceline>
        <sourceline coveredcount="-1">			  	     					'PDO::exec query ' . $sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		    return $this-&gt;pdo-&gt;exec($statement);</sourceline>
        <sourceline coveredcount="0">	  	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		 /**</sourceline>
        <sourceline coveredcount="0">	   	  * Executes a raw SQL query</sourceline>
        <sourceline coveredcount="0">	   	  *</sourceline>
        <sourceline coveredcount="0">	   	  * @param string $sql The SQL statement to execute</sourceline>
        <sourceline coveredcount="0">	   	  * @return PDOStatement The PDOStatement returned by PDO::query</sourceline>
        <sourceline coveredcount="0">	   	  * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   	  * @see http://usphp.com/manual/en/function.PDO-query.php</sourceline>
        <sourceline coveredcount="0">	   	  */</sourceline>
        <sourceline coveredcount="0">	  	 public function query($sql) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">	  		    Log::debug('BaseDialect::query Executing' .</sourceline>
        <sourceline coveredcount="7">			  	     					(($this-&gt;transactionInProgress) ? ' (transactional) ' : ' ') .</sourceline>
        <sourceline coveredcount="7">			  	     					'raw PDO::query ' . $sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">	  		    $stmt = $this-&gt;pdo-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">	  	        if($this-&gt;pdo-&gt;errorCode() &gt; 0) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">                    $info = $this-&gt;pdo-&gt;errorInfo();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">                    if($this-&gt;transactionInProgress)</sourceline>
        <sourceline coveredcount="3">			  			$this-&gt;rollBack($info[2], $info[1]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     	    throw new ORMException($info[2], $this-&gt;pdo-&gt;errorCode());</sourceline>
        <sourceline coveredcount="-2">	  	        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">	  	        return $stmt;</sourceline>
        <sourceline coveredcount="0">	  	}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	/**</sourceline>
        <sourceline coveredcount="0">	  	 * Quotes a string so its theoretically safe to pass into a statement</sourceline>
        <sourceline coveredcount="0">	  	 *</sourceline>
        <sourceline coveredcount="0">	  	 * @param string $data The data to quote</sourceline>
        <sourceline coveredcount="0">	  	 * @return The quoted data</sourceline>
        <sourceline coveredcount="0">	  	 * @see http://www.php.net/manual/en/pdo.quote.php</sourceline>
        <sourceline coveredcount="0">	  	 */</sourceline>
        <sourceline coveredcount="0">	  	public function quote($data) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		   return $this-&gt;pdo-&gt;quote($data);</sourceline>
        <sourceline coveredcount="0">	  	}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	/**</sourceline>
        <sourceline coveredcount="0">	   	 * Persists a domain model object</sourceline>
        <sourceline coveredcount="0">	     *</sourceline>
        <sourceline coveredcount="0">	     * @param DomainModel $model The domain model to persist</sourceline>
        <sourceline coveredcount="0">	     * @return PDOStatement</sourceline>
        <sourceline coveredcount="0">	     * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	     * @todo Work out foreign key auto persist/merge logic or drop support?</sourceline>
        <sourceline coveredcount="0">	     */</sourceline>
        <sourceline coveredcount="0">	    public function persist(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	    	   $this-&gt;model = $model;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	   		   $values = array();</sourceline>
        <sourceline coveredcount="10">			   $table = $this-&gt;getTableByModel($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   Log::debug('BaseDialect::persist Performing persist on model \'' . $table-&gt;getModel() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	   		   $this-&gt;validate($table, true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	   		   $columns = $table-&gt;getColumns();</sourceline>
        <sourceline coveredcount="10">			   $columnCount = count($columns);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   $sql = 'INSERT INTO ' . $table-&gt;getName() . '(';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   for($i=0; $i&lt;$columnCount; $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   		if($columns[$i]-&gt;isAutoIncrement()) continue;</sourceline>
        <sourceline coveredcount="10">			   		if($columns[$i]-&gt;isLazy()) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   		$sql .= $columns[$i]-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   		if(($i + 1) &lt; $columnCount)</sourceline>
        <sourceline coveredcount="10">			   			$sql .= ', ';</sourceline>
        <sourceline coveredcount="10">			   }</sourceline>
        <sourceline coveredcount="10">			   $sql .= ') VALUES (';</sourceline>
        <sourceline coveredcount="10">			   for($i=0; $i&lt;$columnCount; $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   		if($columns[$i]-&gt;isAutoIncrement()) continue;</sourceline>
        <sourceline coveredcount="10">			   		if($columns[$i]-&gt;isLazy()) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   		$sql .= '?';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   	    $accessor = $this-&gt;toAccessor($columns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="10">			   	    if($columns[$i]-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   	    	if(is_object($model-&gt;$accessor())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">			   	    		$refAccessor = $this-&gt;toAccessor($columns[$i]-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">			   	    		if($model-&gt;$accessor()-&gt;$refAccessor() != null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">			   	    		   switch($columns[$i]-&gt;getForeignKey()-&gt;getCascade()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">			   	    		       case 'all':</sourceline>
        <sourceline coveredcount="5">			   	    		       case 'persist-merge':</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  		   			   	    			try {</sourceline>
        <sourceline coveredcount="0">        			   	    				  // Try to persist the referenced entity first</sourceline>
        <sourceline coveredcount="4">        					   	    		  $this-&gt;persist($model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="0">        			   	    			}</sourceline>
        <sourceline coveredcount="4">        			   	    			catch(Exception $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        			   	    				   // The referenced entity already exists - merge instead</sourceline>
        <sourceline coveredcount="-2">        			   	    				   if(preg_match('/duplicate/i', $e-&gt;getMessage()))</sourceline>
        <sourceline coveredcount="-2">        			   	    				   	  $this-&gt;merge($model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="0">        			   	    			}</sourceline>
        <sourceline coveredcount="4">        			   	    		break;</sourceline>
        <sourceline coveredcount="5">			   	    		   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">			   	    		   if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="5">			   	    		     array_push($values, $transformer::transform($model-&gt;$accessor()-&gt;$refAccessor()));</sourceline>
        <sourceline coveredcount="0">			   	    		  else</sourceline>
        <sourceline coveredcount="5">	   	    		             array_push($values, $model-&gt;$accessor()-&gt;$refAccessor());</sourceline>
        <sourceline coveredcount="5">			   	    		}</sourceline>
        <sourceline coveredcount="5">			   	    	}</sourceline>
        <sourceline coveredcount="0">			   	    	else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">			   	    		array_push($values, null);</sourceline>
        <sourceline coveredcount="0">			   	    	}</sourceline>
        <sourceline coveredcount="10">			   	    }</sourceline>
        <sourceline coveredcount="0">			   	    else { // No foreign key</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   	        if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="10">					   	   array_push($values, $transformer::transform((($model-&gt;$accessor() == '') ? NULL : $model-&gt;$accessor())));</sourceline>
        <sourceline coveredcount="0">					   	else</sourceline>
        <sourceline coveredcount="10">					   	   array_push($values, (($model-&gt;$accessor() == '') ? NULL : $model-&gt;$accessor()));</sourceline>
        <sourceline coveredcount="0">			   	    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			   		if(($i + 1) &lt; count($columns)) $sql .= ', ';</sourceline>
        <sourceline coveredcount="10">			   }</sourceline>
        <sourceline coveredcount="10">			   $sql .= ');';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	   		   $this-&gt;prepare($sql);</sourceline>
        <sourceline coveredcount="10">	  		   $retval = $this-&gt;execute($values);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		   IdentityMap::add($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		   return $retval;</sourceline>
        <sourceline coveredcount="0">	    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    /**</sourceline>
        <sourceline coveredcount="0">	     * Merges/updates a persisted domain model object</sourceline>
        <sourceline coveredcount="0">	     *</sourceline>
        <sourceline coveredcount="0">	     * @param DomainModel $model The domain model object to merge/update</sourceline>
        <sourceline coveredcount="0">	     * @return PDOStatement</sourceline>
        <sourceline coveredcount="0">	     * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	     * @todo Work out foreign key auto persist/merge logic or drop support?</sourceline>
        <sourceline coveredcount="0">	     */</sourceline>
        <sourceline coveredcount="0">	    public function merge(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	    	   $this-&gt;model = $model;</sourceline>
        <sourceline coveredcount="4">	    	   $table = $this-&gt;getTableByModel($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	    	   Log::debug('BaseDialect::merge Performing merge on model \'' . $table-&gt;getModel() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	    	   $this-&gt;model = $model;</sourceline>
        <sourceline coveredcount="4">	  	       $values = array();</sourceline>
        <sourceline coveredcount="4">	  	       $cols = array();</sourceline>
        <sourceline coveredcount="4">			   $this-&gt;validate($table);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   $sql = 'UPDATE ' . $table-&gt;getName() . ' SET ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		   $columns = $table-&gt;getColumns();</sourceline>
        <sourceline coveredcount="4">	  		   $naCount = 0;</sourceline>
        <sourceline coveredcount="4">			   for($i=0; $i&lt;count($columns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   	    if($columns[$i]-&gt;isPrimaryKey() || $columns[$i]-&gt;isAutoIncrement()) continue;</sourceline>
        <sourceline coveredcount="4">			   		if($columns[$i]-&gt;isLazy()) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   		$accessor = $this-&gt;toAccessor($columns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0">			   		// Extract foreign key value from the referenced column</sourceline>
        <sourceline coveredcount="4">			   	    if($columns[$i]-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   	    	if(is_object($model-&gt;$accessor())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   	    		$refAccessor = $this-&gt;toAccessor($columns[$i]-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="4">			   	    		if($model-&gt;$accessor()-&gt;$refAccessor() != null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   	    		   switch($columns[$i]-&gt;getForeignKey()-&gt;getCascade()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   	    		       case 'all':</sourceline>
        <sourceline coveredcount="4">			   	    		       case 'persist-merge':</sourceline>
        <sourceline coveredcount="3">  		   			   	    			$this-&gt;merge($model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="3">      			   	    		   break;</sourceline>
        <sourceline coveredcount="4">			   	    		   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   	    		   if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="4">   			   	    			  array_push($values, $transformer::transform($model-&gt;$accessor()-&gt;$refAccessor()));</sourceline>
        <sourceline coveredcount="0">   			   	    		   else</sourceline>
        <sourceline coveredcount="4">   			   	    			  array_push($values, $model-&gt;$accessor()-&gt;$refAccessor());</sourceline>
        <sourceline coveredcount="4">			   	    		}</sourceline>
        <sourceline coveredcount="0">			   	    		else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			   	    		   switch($columns[$i]-&gt;getForeignKey()-&gt;getCascade()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			   	    		       case 'all':</sourceline>
        <sourceline coveredcount="-1">			   	    		       case 'persist-merge':</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			   	    		           // Persist the referenced model instance, and use its new id as the foreign key value</sourceline>
        <sourceline coveredcount="-1">			   	    		           $this-&gt;persist($model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="-1">      			   	    		   break;</sourceline>
        <sourceline coveredcount="-1">			   	    		   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			   	    		   if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="-1">   	    				   	      array_push($values, $transformer::transform($this-&gt;pdo-&gt;lastInsertId()));</sourceline>
        <sourceline coveredcount="0">   	    				   	   else</sourceline>
        <sourceline coveredcount="-1">   	    				   	      array_push($values, $this-&gt;pdo-&gt;lastInsertId());</sourceline>
        <sourceline coveredcount="0">			   	    		}</sourceline>
        <sourceline coveredcount="4">			   	    	}</sourceline>
        <sourceline coveredcount="0">			   	    	else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			   	        	array_push($values, null);</sourceline>
        <sourceline coveredcount="0">			   	        }</sourceline>
        <sourceline coveredcount="4">			   	    }</sourceline>
        <sourceline coveredcount="0">			   	    else { // not a foreign key</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   	        if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="4">				   	       array_push($values, $transformer::transform($model-&gt;$accessor()));</sourceline>
        <sourceline coveredcount="0">				   	    else</sourceline>
        <sourceline coveredcount="4">				   	       array_push($values, $model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="0">			   	    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   	    array_push($cols, $columns[$i]-&gt;getName());</sourceline>
        <sourceline coveredcount="4">			   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   $sql .= implode($cols, '=?, ') . '=? WHERE ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   $pkeyColumns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="4">			   for($i=0; $i&lt;count($pkeyColumns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			        // Primary keys which are also foreign keys are many-to-many</sourceline>
        <sourceline coveredcount="4">			        if($pkeyColumns[$i]-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			           $fkAccessor = $this-&gt;toAccessor($columns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="-1">			           $accessor = $this-&gt;toAccessor($pkeyColumns[$i]-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="-1">			           $sql .= $columns[$i]-&gt;getName() . '=\'' . $model-&gt;$fkAccessor()-&gt;$accessor() . '\'';</sourceline>
        <sourceline coveredcount="-1">			        }</sourceline>
        <sourceline coveredcount="0">			        else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">					   $accessor = $this-&gt;toAccessor($columns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="4">			           $sql .= $columns[$i]-&gt;getName() . '=\'' . $model-&gt;$accessor() . '\'';</sourceline>
        <sourceline coveredcount="0">			        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			  		if(($i+1) &lt; count($pkeyColumns))</sourceline>
        <sourceline coveredcount="4">			  		    $sql .= ' AND ';</sourceline>
        <sourceline coveredcount="4">			   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">			   $sql .= ';';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">		       $this-&gt;prepare($sql);</sourceline>
        <sourceline coveredcount="4">	  	       $retval = $this-&gt;execute($values);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  	       IdentityMap::add($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  	       return $retval;</sourceline>
        <sourceline coveredcount="0">	    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    /**</sourceline>
        <sourceline coveredcount="0">	     * Deletes a persisted domain model object (ActiveRecord)</sourceline>
        <sourceline coveredcount="0">	     *</sourceline>
        <sourceline coveredcount="0">	     * @param DomainModel $model The domain model object to delete</sourceline>
        <sourceline coveredcount="0">	     * @return PDOStatement</sourceline>
        <sourceline coveredcount="0">	     * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	     */</sourceline>
        <sourceline coveredcount="0">	    public function delete(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">	      	   $table = $this-&gt;getTableByModel($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">	      	   Log::debug('BaseDialect::delete Performing delete on model \'' . $table-&gt;getModel() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">	    	   $values = array();</sourceline>
        <sourceline coveredcount="11">		       $columns = $table-&gt;getColumns();</sourceline>
        <sourceline coveredcount="11">		       $pkeyCount = count($table-&gt;getPrimaryKeyColumns());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">		       $sql = 'DELETE FROM ' . $table-&gt;getName() . ' WHERE ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">		       for($i=0; $i&lt;count($columns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">		   		    if($columns[$i]-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">		   		        $fkAccessor = $this-&gt;toAccessor($columns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="10">			            $accessor = $this-&gt;toAccessor($columns[$i]-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">		                switch($columns[$i]-&gt;getForeignKey()-&gt;getCascade()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">		   	    		       case 'all':</sourceline>
        <sourceline coveredcount="10">		   	    		       case 'delete':</sourceline>
        <sourceline coveredcount="9">		   	    		            if(is_object($model-&gt;$fkAccessor()))</sourceline>
        <sourceline coveredcount="9">		   			   	    		   $this-&gt;delete($model-&gt;$fkAccessor());</sourceline>
        <sourceline coveredcount="9">      			   	    	   break;</sourceline>
        <sourceline coveredcount="10">			   	    	}</sourceline>
        <sourceline coveredcount="10">		   		    }</sourceline>
        <sourceline coveredcount="11">		   		    elseif($columns[$i]-&gt;isPrimaryKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">    		   		        $accessor = $this-&gt;toAccessor($columns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="11">    		   			    $sql .= '' . $columns[$i]-&gt;getName() . '=?';</sourceline>
        <sourceline coveredcount="11">    		   			    $sql .= ($i+1) &lt; $pkeyCount ? ' AND ' : ';';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">    		   			    if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="11">    				   	       array_push($values, $transformer::transform($model-&gt;$accessor()));</sourceline>
        <sourceline coveredcount="0">    				   	    else</sourceline>
        <sourceline coveredcount="11">    				   	       array_push($values, $model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="11">		   		    }</sourceline>
        <sourceline coveredcount="11">		       }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">		       $this-&gt;prepare($sql);</sourceline>
        <sourceline coveredcount="11">		       $retval = $this-&gt;execute($values);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">		       IdentityMap::remove($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="11">		       return $retval;</sourceline>
        <sourceline coveredcount="0">	    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		/**</sourceline>
        <sourceline coveredcount="0">	     * Looks up a single record using the primary keys values set in the model. Shorthand for find($model)[0].</sourceline>
        <sourceline coveredcount="0">	     *</sourceline>
        <sourceline coveredcount="0">	     * @param DomainModel $model A domain model object. Any fields which are set in the object are used to filter results.</sourceline>
        <sourceline coveredcount="0">	     * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	     */</sourceline>
        <sourceline coveredcount="0">	    public function get(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	           if($m = IdentityMap::get($model)) return $m;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	    	   $records = $this-&gt;find($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	    	   if(isset($records[0])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	    	      IdentityMap::add($records[0]);</sourceline>
        <sourceline coveredcount="-1">	    	      return $records[0];</sourceline>
        <sourceline coveredcount="-2">	    	   }</sourceline>
        <sourceline coveredcount="0">	    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	    /**</sourceline>
        <sourceline coveredcount="0">	     * Attempts to locate the specified model by values. Any fields set in the object are used</sourceline>
        <sourceline coveredcount="0">	     * in search criteria. Alternatively, setRestrictions and setOrderBy methods can be used to</sourceline>
        <sourceline coveredcount="0">	     * filter results.</sourceline>
        <sourceline coveredcount="0">	     *</sourceline>
        <sourceline coveredcount="0">	     * @param DomainModel $model The domain model object. Any fields which are set in the object are used to filter results.</sourceline>
        <sourceline coveredcount="0">	     * @throws ORMException If any primary keys contain null values or any errors are encountered executing queries.</sourceline>
        <sourceline coveredcount="0">	     */</sourceline>
        <sourceline coveredcount="0">	    public function find(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	           //if($m = IdentityMap::get($model)) return array($m);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">	    	   $table = $this-&gt;getTableByModel($model);</sourceline>
        <sourceline coveredcount="13">			   $values = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">			   Log::debug('BaseDialect::find Performing find on model \'' . $table-&gt;getModel() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		   try {</sourceline>
        <sourceline coveredcount="13">	  		   		 if($this-&gt;isEmpty($model)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	    	   	         $sql = 'SELECT ' . (($this-&gt;isDistinct() == null) ? '*' : 'DISTINCT ' . $this-&gt;isDistinct()) . ' FROM ' . $table-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	    	   	         $order = $this-&gt;getOrderBy();</sourceline>
        <sourceline coveredcount="2">	    	   	         $offset = $this-&gt;getOffset();</sourceline>
        <sourceline coveredcount="2">	    	   	         $groupBy = $this-&gt;getGroupBy();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">    	   	         	 $sql .= ($this-&gt;restrictions != null) ? $this-&gt;createRestrictSQL() : '';</sourceline>
        <sourceline coveredcount="2">					 	 $sql .= ($order != null) ? ' ORDER BY ' . $order['column'] . ' ' . $order['direction'] : '';</sourceline>
        <sourceline coveredcount="2">					 	 $sql .= ($groupBy)? ' GROUP BY ' . $this-&gt;getGroupBy() : '';</sourceline>
        <sourceline coveredcount="2">					 	 $sql .= ($offset &amp;&amp; $this-&gt;getMaxResults()) ? ' LIMIT ' . $offset . ', ' . $this-&gt;getMaxResults() : '';</sourceline>
        <sourceline coveredcount="2">					 	 $sql .= (!$offset &amp;&amp; $this-&gt;getMaxResults()) ? ' LIMIT ' . $this-&gt;getMaxResults() : '';</sourceline>
        <sourceline coveredcount="2">    	   	         	 $sql .= ';';</sourceline>
        <sourceline coveredcount="2">	    	   		 }</sourceline>
        <sourceline coveredcount="0">	    	   		 else {</sourceline>
        <sourceline coveredcount="13">	    	   		 		$where = '';</sourceline>
        <sourceline coveredcount="13">	    	   		 		$order = $this-&gt;getOrderBy();</sourceline>
        <sourceline coveredcount="13">	    	   	         	$offset = $this-&gt;getOffset();</sourceline>
        <sourceline coveredcount="13">	    	   	         	$groupBy = $this-&gt;getGroupBy();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">	    	   		 		$columns = $table-&gt;getColumns();</sourceline>
        <sourceline coveredcount="13">							for($i=0; $i&lt;count($columns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">							 	 if($columns[$i]-&gt;isLazy()) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">							 	 $accessor = $this-&gt;toAccessor($columns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="13">						     	 if($model-&gt;$accessor() == null) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">						     	 $where .= (count($values) ? ' ' . $this-&gt;restrictionsLogic . ' ' : ' ') . $columns[$i]-&gt;getName() . ' ' . $this-&gt;comparisonLogic . ' ?';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">						     	 if(is_object($model-&gt;$accessor())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">						     	 	 $refAccessor = $this-&gt;toAccessor($columns[$i]-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">						     	 	 if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="2">						     	        array_push($values, $transformer::transform($model-&gt;$accessor()-&gt;$refAccessor()));</sourceline>
        <sourceline coveredcount="0">						     	     else</sourceline>
        <sourceline coveredcount="2">				     	 	     	    array_push($values, $model-&gt;$accessor()-&gt;$refAccessor());</sourceline>
        <sourceline coveredcount="2">						     	 }</sourceline>
        <sourceline coveredcount="0">						     	 else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">						     	     if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="13">						     	        array_push($values, $transformer::transform($model-&gt;$accessor()));</sourceline>
        <sourceline coveredcount="0">						     	     else</sourceline>
        <sourceline coveredcount="13">				     	 	     	    array_push($values, $model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="0">						     	 }</sourceline>
        <sourceline coveredcount="13">						    }</sourceline>
        <sourceline coveredcount="13">						    $sql = 'SELECT * FROM ' . $table-&gt;getName() . ' WHERE' . $where;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">					 	    $sql .= ($order != null) ? ' ORDER BY ' . $order['column'] . ' ' . $order['direction'] : '';</sourceline>
        <sourceline coveredcount="13">					 	 	$sql .= ($groupBy)? ' GROUP BY ' . $this-&gt;getGroupBy() : '';</sourceline>
        <sourceline coveredcount="13">					 	 	$sql .= ($offset &amp;&amp; $this-&gt;getMaxResults()) ? ' LIMIT ' . $offset . ', ' . $this-&gt;getMaxResults() : '';</sourceline>
        <sourceline coveredcount="13">					 	 	$sql .= (!$offset &amp;&amp; $this-&gt;getMaxResults()) ? ' LIMIT ' . $this-&gt;getMaxResults() : '';</sourceline>
        <sourceline coveredcount="13">    	   	         	 	$sql .= ';';</sourceline>
        <sourceline coveredcount="0">	    	   		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">	    	   		 $this-&gt;setDistinct(null);</sourceline>
        <sourceline coveredcount="13">	   	         	 $this-&gt;setRestrictions(array());</sourceline>
        <sourceline coveredcount="13">	   	         	 $this-&gt;setRestrictionsLogicOperator('AND');</sourceline>
        <sourceline coveredcount="13">	   	         	 $this-&gt;setOrderBy(null, 'ASC');</sourceline>
        <sourceline coveredcount="13">	   	         	 $this-&gt;setGroupBy(null);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">					 $this-&gt;prepare($sql);</sourceline>
        <sourceline coveredcount="13">					 $this-&gt;PDOStatement-&gt;setFetchMode(PDO::FETCH_OBJ);</sourceline>
        <sourceline coveredcount="13">					 $result = $this-&gt;execute($values);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">					 if(!count($result)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">					 	 Log::debug('BaseDialect::find Empty result set for model \'' . $table-&gt;getModel() . '\'.');</sourceline>
        <sourceline coveredcount="-1">					 	 return;</sourceline>
        <sourceline coveredcount="-2">					 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">				 	 $index = 0;</sourceline>
        <sourceline coveredcount="13">				 	 $models = array();</sourceline>
        <sourceline coveredcount="13">					 foreach($result as $stdClass ) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="12">					 		  $m = $table-&gt;getModelInstance();</sourceline>
        <sourceline coveredcount="12">					 	   	  foreach(get_object_vars($stdClass) as $name =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="12">					 	   	  		   $modelProperty = $this-&gt;getPropertyNameForColumn($table, $name);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							 	   	   // Create foreign model instances from foreign values</sourceline>
        <sourceline coveredcount="12">						 	 		   foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="12">						 	 		   		    if($column-&gt;getName() != $name) continue;</sourceline>
        <sourceline coveredcount="12">						 	 		   		    if($column-&gt;isLazy()) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="12">						 	 		   		    if($renderer = $column-&gt;getRenderer())</sourceline>
        <sourceline coveredcount="12">                        				   	       $value = $renderer::render($value);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="12">                        				   	    if(!$value) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="12">						 	 		  		    if($column-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">						 	 		  		   	    $foreignModel = $column-&gt;getForeignKey()-&gt;getReferencedTableInstance()-&gt;getModel();</sourceline>
        <sourceline coveredcount="7">						 	 		  		   	    $foreignInstance = new $foreignModel();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">						 	 		  		   	    $foreignMutator = $this-&gt;toMutator($column-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="7">						 	 		  		   	    $foreignInstance-&gt;$foreignMutator($value);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">						 	 		  		   	    $persisted = $this-&gt;find($foreignInstance);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	 		  		   	    // php namespace support - remove \ character from fully qualified paths</sourceline>
        <sourceline coveredcount="7">							 	 		  		   	$foreignModelPieces = explode('\\', $foreignModel);</sourceline>
        <sourceline coveredcount="7">							 	 		  		   	$foreignClassName = array_pop($foreignModelPieces);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">						 	 		  		   	    $instanceMutator = $this-&gt;toMutator($modelProperty);</sourceline>
        <sourceline coveredcount="7">						 	 		  		   	    $m-&gt;$instanceMutator($persisted[0]);</sourceline>
        <sourceline coveredcount="7">						 	 		  		    }</sourceline>
        <sourceline coveredcount="0">						 	 		  		    else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="12">						 	 		  		   		$mutator = $this-&gt;toMutator($modelProperty);</sourceline>
        <sourceline coveredcount="12">					 	   	   		  				$m-&gt;$mutator($value);</sourceline>
        <sourceline coveredcount="0">						 	 		  		    }</sourceline>
        <sourceline coveredcount="12">						 	 		   }</sourceline>
        <sourceline coveredcount="12">					 	   	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="12">					 	   	  IdentityMap::add($m);</sourceline>
        <sourceline coveredcount="12">					 	   	  array_push($models, $m);</sourceline>
        <sourceline coveredcount="12">					 	   	  $index++;</sourceline>
        <sourceline coveredcount="12">					 	   	  if($index == $this-&gt;maxResults)  break;</sourceline>
        <sourceline coveredcount="13">				     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">				     return $models;</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="-2">	  		 catch(Exception $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	  		 		throw new ORMException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 	  /**</sourceline>
        <sourceline coveredcount="0">	   * Truncates the table for the specified domain model object</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param DomainModel $model A domain model object</sourceline>
        <sourceline coveredcount="0">	   * @return PDOStatement</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function truncate(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 $table = $this-&gt;getTableByModel();</sourceline>
        <sourceline coveredcount="-1">			 $sql = 'TRUNCATE TABLE ' . $table-&gt;getName() . ';';</sourceline>
        <sourceline coveredcount="-1">			 $this-&gt;prepare($sql);</sourceline>
        <sourceline coveredcount="-1">		     return $this-&gt;execute();</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the total number of records in the specified model.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param DomainModel $model The domain object to get the count for.</sourceline>
        <sourceline coveredcount="0">	   * @return integer The total number of records in the table.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function count(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $sql = 'SELECT count(*) as count FROM ' . $this-&gt;getTableByModel($model)-&gt;getName();</sourceline>
        <sourceline coveredcount="-1">			 $sql .= ($this-&gt;createRestrictSQL() == null) ? '' : $this-&gt;createRestrictSQL();</sourceline>
        <sourceline coveredcount="-1">			 $sql .= ';';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     	 $stmt = $this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="-1">  			 $stmt-&gt;setFetchMode(PDO::FETCH_OBJ);</sourceline>
        <sourceline coveredcount="-1">  			 $result = $stmt-&gt;fetchAll();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  			 return ($result == null) ? 0 : $result[0]-&gt;count;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Closes the connection to the database.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function close() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  	     $this-&gt;pdo = null;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the SQL 'order by' clause.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $column The column name to order the result set by</sourceline>
        <sourceline coveredcount="0">	   * $param string $direction The direction to sort the result set (ASC|DESC).</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setOrderBy($column, $direction) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	         $this-&gt;orderBy = $column;</sourceline>
        <sourceline coveredcount="14">	     	 $this-&gt;orderDirection = $direction;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an associative array containing the current 'orderBy' clause. The results</sourceline>
        <sourceline coveredcount="0">	   * are returned with the name of the column as the index and the direction as the value.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return An associative array containing the name of the column to sort as the key/index</sourceline>
        <sourceline coveredcount="0">	   * 		and the direction of the sort order (ASC|DESC) as the value or void if not specified.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getOrderBy() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 if(!$this-&gt;orderBy) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     return array('column' =&gt; $this-&gt;orderBy, 'direction' =&gt; $this-&gt;orderDirection);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets WHERE clause restrictions</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param array $restrictions An associative array containing WHERE clause restrictions. (For example: array('id' =&gt; 21))</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setRestrictions(array $restrictions) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	   		 $this-&gt;restrictions = $restrictions;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the WHERE clause restrictions</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return array SQL WHERE clause restrictions</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getRestrictions() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 return $this-&gt;restrictions;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the restriction operator (and|or) used in SQL WHERE clause.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $operator The logical operator 'and'/'or' to be used in SQL WHERE clause. Default is 'AND'.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException if the specified restrictions logic operator is not "and", or "or".</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setRestrictionsLogicOperator($operator) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	   	     if(strtolower($operator) !== 'and' &amp;&amp; strtolower($operator) !== 'or')</sourceline>
        <sourceline coveredcount="14">	     	     throw new ORMException('Restrictions logic operator must be either \'and\' or \'or\'. Found \'' . $operator . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	     	 $this-&gt;restrictionsLogic = $operator;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns restriction logic operator used to filter SELECT / find operations.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string Retrictions logic operator (AND|OR)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getRestrictionsLogicOperator() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  			return $this-&gt;restrictionsLogic;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the comparison logic operator.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string Comparison logic operator (LIKE|&lt;|&gt;|?|=)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getComparisonLogicOperator() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">				return $this-&gt;comparisonLogic;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the comparison operator (&lt;|&gt;|=|LIKE) used in SQL WHERE clause.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $operator The logical comparison operator used is SQL where clauses. Default is '='.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException if the specified comparison logic operator is not &lt;, &gt;, =, or LIKE.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setComparisonLogicOperator($operator) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if(strtolower($operator) != 'like' &amp;&amp; $operator !== '&lt;' &amp;&amp; $operator !== '&gt;' &amp;&amp; $operator !== '=')</sourceline>
        <sourceline coveredcount="-1">	     	     throw new ORMException('Comparison logic operator must be \'&gt;\', \'&lt;\', \'=\', or \'LIKE\'. Found \'' . $operator . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     	 $this-&gt;comparisonLogic = $operator;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"> 	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an SQL formatted string containing a WHERE clause built from setRestrictions and setRestrictionsLogicOperator.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return string The formatted SQL string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function createRestrictSQL() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	     	 $restricts = null;</sourceline>
        <sourceline coveredcount="3">			 if(count($this-&gt;restrictions)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">			  	 $restricts = ' WHERE ';</sourceline>
        <sourceline coveredcount="3">				 $index = 0;</sourceline>
        <sourceline coveredcount="3">				 foreach($this-&gt;restrictions as $key =&gt; $val) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">				   		  $index++;</sourceline>
        <sourceline coveredcount="3">				   		  $restricts .= $key . ' ' . $this-&gt;comparisonLogic . ' \'' . addslashes($val) . '\'';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">				   		  if($index &lt; count($this-&gt;restrictions))</sourceline>
        <sourceline coveredcount="3">				   			  $restricts .= ' ' . $this-&gt;restrictionsLogic . ' ';</sourceline>
        <sourceline coveredcount="3">				 }</sourceline>
        <sourceline coveredcount="3">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">			 return $restricts;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the Table object which is mapped to the specified Model.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param DomainModel $model The domain model object to retrieve the table element for. Defaults to the model</sourceline>
        <sourceline coveredcount="0">	   * 			               currently being managed by the 'ORM'.</sourceline>
        <sourceline coveredcount="0">	   * @return Procedure The Procedure instance responsible for persistence mappings for the specified model.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getProcedureByModel(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 $class = get_class($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">			 foreach($this-&gt;database-&gt;getProcedures() as $proc) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">			 	  	  if($proc-&gt;getModel() == $class)</sourceline>
        <sourceline coveredcount="2">			 	  	      return $proc;</sourceline>
        <sourceline coveredcount="2">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 throw new ORMException('BaseDialect::getProcedureByModel Could not locate the requested model \'' . $class . '\' in orm.xml');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the Procedure responsible for the specified model</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $modelName The name of the model class</sourceline>
        <sourceline coveredcount="0">	   * @return Procedure The procedure which maps to the specified model name</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException if the specified procedure model name could not be located in orm.xml</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getProcedureByModelName($modelName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 foreach($this-&gt;database-&gt;getProcedures() as $proc)</sourceline>
        <sourceline coveredcount="-1">			  	  	  if($proc-&gt;getModel() == $modelName)</sourceline>
        <sourceline coveredcount="-1">			 	  	      return $proc;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 throw new ORMException('BaseDialect::getProcedureByModelName Could not locate the requested model \'' . $modelName . '\' in orm.xml');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the Table object which is mapped to the specified DomainModel.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param DomainModel $model The domain model object to retrieve the table element for. Defaults to the model</sourceline>
        <sourceline coveredcount="0">	   * 			        currently being managed by the ORM.</sourceline>
        <sourceline coveredcount="0">	   * @return Table The Table object responsible for persistence mappings for the specified model.</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException if the specified model could not be located in orm.xml</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getTableByModel(DomainModel $model = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 try {</sourceline>
        <sourceline coveredcount="18">	  	     	   $class = new ReflectionClass((($model == null) ? $this-&gt;model : $model));</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="18">	  		 catch(ReflectionException $re) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	  		 		throw new ORMException('BaseDialect::getTableByModel Could not get table because \'' . $re-&gt;getMessage() . '\'.');</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">			 foreach($this-&gt;database-&gt;getTables() as $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">			 	  	  if($table-&gt;getModel() == $class-&gt;getName())</sourceline>
        <sourceline coveredcount="18">			 	  	      return $table;</sourceline>
        <sourceline coveredcount="15">			 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 throw new ORMException('BaseDialect::getTableByModel Could not locate the requested model \'' . $class-&gt;getName() . '\' in orm.xml');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the Table object responsible for the specified $modelName. If the model name</sourceline>
        <sourceline coveredcount="0">	   * is defined more than once, the table with the first occurance is returned.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $modelName The name of the model</sourceline>
        <sourceline coveredcount="0">	   * @return Table The Table instance responsible for the specified model.</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException if the requested model name could not be located in orm.xml</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getTableByModelName($modelName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">			 foreach($this-&gt;database-&gt;getTables() as $table)</sourceline>
        <sourceline coveredcount="3">			  	  	  if($table-&gt;getModel() == $modelName)</sourceline>
        <sourceline coveredcount="3">			 	  	      return $table;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 throw new ORMException('BaseDialect::getTableByModelName Could not locate the requested model \'' . $modelName . '\' in orm.xml');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a Table object by its name as configured in orm.xml</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $tableName The value of the table name attribute</sourceline>
        <sourceline coveredcount="0">	   * @return Table The Table instance responsible for persistence mappings for the specified table.</sourceline>
        <sourceline coveredcount="0">	   * @throws ORMException if the requested table name could not be located in orm.xml</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getTableByName($tableName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="29">	  		 foreach($this-&gt;database-&gt;getTables() as $table)</sourceline>
        <sourceline coveredcount="29">	  		 		  if($table-&gt;getName() == $tableName)</sourceline>
        <sourceline coveredcount="29">	  		 		  	  return $table;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="23">	  		 throw new ORMException('BaseDialect::getTableByName Could not locate the requested table \'' . $tableName . '\' in orm.xml');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a Table object representing the table configured in orm.xml as</sourceline>
        <sourceline coveredcount="0">	   * the AgilePHP Identity table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Table The Table object which represents the AgilePHP Identity table.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getIdentityTable() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 foreach($this-&gt;database-&gt;getTables() as $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 	  	      if($table-&gt;isIdentity())</sourceline>
        <sourceline coveredcount="-1">		 	  	      	  return $table;</sourceline>
        <sourceline coveredcount="-1">			 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an instance of the domain model object responsible for AgilePHP</sourceline>
        <sourceline coveredcount="0">	   * Identity ORM.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return DomainModel An instance of the domain model object responsible for Identity ORM.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getIdentityModel() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($this-&gt;database-&gt;getTables() as $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 	  	      if($table-&gt;isIdentity()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">						  $modelName = $table-&gt;getModel();</sourceline>
        <sourceline coveredcount="-1">		 	  	      	  $rc = new ReflectionClass($modelName);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 	  	      	  if(!$rc-&gt;getInterfaces())</sourceline>
        <sourceline coveredcount="-1">		 	  	      	      throw new ORMException('BaseDialect::getIdentityModel IdentityModel must implement IdentityModel interface.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	 	  	      	  	   return new $modelName();</sourceline>
        <sourceline coveredcount="-2">		 	  	      }</sourceline>
        <sourceline coveredcount="-1">			 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the 'Table' object that represents the table configured in orm.xml as</sourceline>
        <sourceline coveredcount="0">	   * an AgilePHP 'SessionScope' session table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Table The Table instance containing the SessionScope session table.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSessionTable() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			 foreach($this-&gt;database-&gt;getTables() as $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 	  	      if($table-&gt;isSession())</sourceline>
        <sourceline coveredcount="-1">		 	  	      	  return $table;</sourceline>
        <sourceline coveredcount="-1">			 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns an instance of the domain model object responsible for AgilePHP</sourceline>
        <sourceline coveredcount="0">	   * 'SessionScope' session ORM.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return DomainModel An instance of the model responsible for AgilePHP SessionScope sessions.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getSessionModel() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($this-&gt;database-&gt;getTables() as $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 	  	      if($table-&gt;isSession()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		 	  	      	  $modelName = $table-&gt;getModel();</sourceline>
        <sourceline coveredcount="-1"> 	  	      	  		  return new $modelName();</sourceline>
        <sourceline coveredcount="-2">		 	  	      }</sourceline>
        <sourceline coveredcount="-1">			 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns a custom display name as configured in orm.xml 'display' attribute</sourceline>
        <sourceline coveredcount="0">	   * for the specified column name. If the 'Column' name can not be matched, it is then</sourceline>
        <sourceline coveredcount="0">	   * compared against the 'Column' 'property' attribute value. If neither can be matched,</sourceline>
        <sourceline coveredcount="0">	   * the $columnName is returned.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $table The 'Table' object which contains the column to retrieve the display</sourceline>
        <sourceline coveredcount="0">	   * 			   name from.</sourceline>
        <sourceline coveredcount="0">	   * @param $columnName The name of the column to get the display name for</sourceline>
        <sourceline coveredcount="0">	   * @return string Custom display name if configured, otherwise the $columnName is returned</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getDisplayNameForColumn($table, $columnName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	      if($column-&gt;getName() == $columnName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	      	  if($column-&gt;getDisplay())</sourceline>
        <sourceline coveredcount="-1">	  		 	          	  return ucfirst($column-&gt;getDisplay());</sourceline>
        <sourceline coveredcount="-1">	  		 	      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 		  if($column-&gt;getProperty() == $columnName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	      	  if($column-&gt;getDisplay())</sourceline>
        <sourceline coveredcount="-1">	  		 	          	  return ucfirst($column-&gt;getDisplay());</sourceline>
        <sourceline coveredcount="-1">					  }</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return ucfirst($columnName);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the value of the 'property' attribute configured in orm.xml for the specified $columnName.</sourceline>
        <sourceline coveredcount="0">	   * If the property attribute does not exist, the column name is returned instead.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Table $table The Table object containing the Column to search.</sourceline>
        <sourceline coveredcount="0">	   * @param $columnName The name of the column to retrieve the property attribute value from</sourceline>
        <sourceline coveredcount="0">	   * @param boolean $caseSensitive Optional flag used to toggle case sensitive column name searching. True to</sourceline>
        <sourceline coveredcount="0">	   *                               enable case sensitive searching, false for case insensitive. Default is case sensitive.</sourceline>
        <sourceline coveredcount="0">	   * @return string The property name. If the property does not exist, the $columnName is returned instead</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getPropertyNameForColumn(Table $table, $columnName, $caseSensitive = true) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">	  		 foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">	  		 		  $col = ($caseSensitive) ? $column-&gt;getName() : strtolower($column-&gt;getName());</sourceline>
        <sourceline coveredcount="13">	  		 	      if($col == $columnName)</sourceline>
        <sourceline coveredcount="13">	  		 	      	  if($column-&gt;getProperty())</sourceline>
        <sourceline coveredcount="13">	  		 	      	  	  return $column-&gt;getProperty();</sourceline>
        <sourceline coveredcount="13">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">	  		 return $columnName;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the value of the 'name' attribute configured in orm.xml for the specified $propertyName.</sourceline>
        <sourceline coveredcount="0">	   * If the property attribute does not exist, a match is attempted against the column name. If the column</sourceline>
        <sourceline coveredcount="0">	   * name matches the expected $propertyName, the column name is returned. If neither can be matched, null is</sourceline>
        <sourceline coveredcount="0">	   * returned instead.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Table $table The Table instance that contains the Column to search.</sourceline>
        <sourceline coveredcount="0">	   * @param string $propertyName The name of the property to retrieve the name attribute value from</sourceline>
        <sourceline coveredcount="0">	   * @return string The column name. If the property does not exist and $propertyName matches a column name, the column</sourceline>
        <sourceline coveredcount="0">	   * 		 name is returned instead. If neither can be matched, null is returned.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getColumnNameForProperty(Table $table, $propertyName) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	      if($column-&gt;getProperty() == $propertyName)</sourceline>
        <sourceline coveredcount="-1">	  		 	      	  return $column-&gt;getName();</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	      if($column-&gt;getName() == $propertyName)</sourceline>
        <sourceline coveredcount="-1">	  		 	      	  return $column-&gt;getName();</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Converts the specified parameter to a bigint.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $int The bigint value</sourceline>
        <sourceline coveredcount="0">	   * @return long The 64 bit "bigint"</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function toBigInt($number) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  			$precision = ini_get('precision');</sourceline>
        <sourceline coveredcount="-1">				@ini_set('precision', 16);</sourceline>
        <sourceline coveredcount="-1">				$bigint = sprintf('%.0f', $number);</sourceline>
        <sourceline coveredcount="-1">				@ini_set('precision', $precision);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">				return $bigint;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Checks the model in use by the ORM framework for the presence</sourceline>
        <sourceline coveredcount="0">	   * of property values. If the model does not contain any values, it is</sourceline>
        <sourceline coveredcount="0">	   * considered empty.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param DomainModel $model The domain model instance to inspect.</sourceline>
        <sourceline coveredcount="0">	   * @return boolean True if the model is empty, false if the model contains any property values.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isEmpty(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 $class = new ReflectionClass($model);</sourceline>
        <sourceline coveredcount="14">	  		 $properties = $class-&gt;getProperties();</sourceline>
        <sourceline coveredcount="14">	  		 foreach($properties as $property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		     if($property-&gt;name == 'interceptedTarget') continue;</sourceline>
        <sourceline coveredcount="14">	  		     $accessor = $this-&gt;toAccessor($property-&gt;name);</sourceline>
        <sourceline coveredcount="14">	  		     if($model-&gt;$accessor()) return false;</sourceline>
        <sourceline coveredcount="3">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">	  		 return true;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Compares domain model object $a with $b.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * NOTE: This function assumes the model adheres to the property/getter/setter</sourceline>
        <sourceline coveredcount="0">	   * 	   model convention.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param object $a The first object</sourceline>
        <sourceline coveredcount="0">	   * @param object $b The second object</sourceline>
        <sourceline coveredcount="0">	   * @return boolean True if the objects test positive, false if the models do not match</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function compare($a, $b) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		  try {</sourceline>
        <sourceline coveredcount="-1">		  		    $classA = new ReflectionClass($a);</sourceline>
        <sourceline coveredcount="-1">		  		    $classB = new ReflectionClass($b);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		    if($classA-&gt;getName() !== $classB-&gt;getName())</sourceline>
        <sourceline coveredcount="-1">		  		  	    throw new Exception('model class names dont match');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		    $propsA = $classA-&gt;getProperties();</sourceline>
        <sourceline coveredcount="-1">		  		    $propsB = $classB-&gt;getProperties();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		    if(!count($propsA) || !count($propsB))</sourceline>
        <sourceline coveredcount="-1">		  		  	    throw new Exception('model property count doesnt match');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		    for($i=0; $i&lt;count($propsA); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		  	     if($propsA[$i]-&gt;name !== $propsB[$i]-&gt;name)</sourceline>
        <sourceline coveredcount="-1">		  		  	         throw new Exception('model property names dont match');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		  	   	 $accessor = 'get' . ucfirst($propsA[$i]-&gt;name);</sourceline>
        <sourceline coveredcount="-1">		  		  	     if($a-&gt;$accessor() !== $b-&gt;$accessor())</sourceline>
        <sourceline coveredcount="-1">		  		  	   	     throw new Exception('model property values dont match');</sourceline>
        <sourceline coveredcount="-1">		  		  	}</sourceline>
        <sourceline coveredcount="0">	  		  }</sourceline>
        <sourceline coveredcount="-1">	  		  catch(Exception $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  		 Log::debug('BaseDialect::compare ' . $e-&gt;getMessage());</sourceline>
        <sourceline coveredcount="-1">	  		  		 return false;</sourceline>
        <sourceline coveredcount="0">	  		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  return true;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates an accessor method from the $property parameter. The $property</sourceline>
        <sourceline coveredcount="0">	   * will be returned with the prefix 'get' and the first letter of the property</sourceline>
        <sourceline coveredcount="0">	   * uppercased.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $property The name of the property to convert to an accessor method name</sourceline>
        <sourceline coveredcount="0">	   * @return string The accessor string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function toAccessor($property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">	   		 return 'get' . ucfirst($property);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a mutator method from the $property parameter. The $property</sourceline>
        <sourceline coveredcount="0">	   * will be returned with the prefix 'set' and the first letter of the property</sourceline>
        <sourceline coveredcount="0">	   * uppercased.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param string $property The name of the property to convert to a mutator method name</sourceline>
        <sourceline coveredcount="0">	   * @return string The mutator string</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function toMutator($property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">	  	     return 'set' . ucfirst($property);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Copies the values from object $a to $b.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param DomainModel $a The first object</sourceline>
        <sourceline coveredcount="0">	   * @param DomainModel $b The second object</sourceline>
        <sourceline coveredcount="0">	   * @return DomainModel The same instance of object $b with its properties set as defined in object $a</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function copy(DomainModel $a, DomainModel $b) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		  $classA = new ReflectionClass($a);</sourceline>
        <sourceline coveredcount="-1">		  	  $classB = new ReflectionClass($b);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	  if($classA-&gt;getName() !== $classB-&gt;getName())</sourceline>
        <sourceline coveredcount="-1">		  	      throw new Exception('model class names dont match');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	  $propsA = $classA-&gt;getProperties();</sourceline>
        <sourceline coveredcount="-1">		  	  $propsB = $classB-&gt;getProperties();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	  if(!count($propsA) || !count($propsB))</sourceline>
        <sourceline coveredcount="-1">		  	      throw new Exception('model property count doesnt match');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		      for($i=0; $i&lt;count($propsA); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		   if($propsA[$i]-&gt;name !== $propsB[$i]-&gt;name)</sourceline>
        <sourceline coveredcount="-1">		  		       throw new Exception('model property names dont match');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  		   $accessor = 'get' . ucfirst($propsA[$i]-&gt;name);</sourceline>
        <sourceline coveredcount="-1">		  		   $mutator = 'set' . ucfirst($propsB[$i]-&gt;name);</sourceline>
        <sourceline coveredcount="-1">		  		   $b-&gt;$mutator($a-&gt;$accessor());</sourceline>
        <sourceline coveredcount="-1">		  	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		  	  return $b;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Validates the domain model object's property values against orm.xml table/column configuration</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param $table The Table object representing the table in orm.xml configuration to validate.</sourceline>
        <sourceline coveredcount="0">	   * @param $isInsert True if validating a persist operation</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  protected function validate(Table $table, $isPersist = false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  	        if($table-&gt;getValidate() == false) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			    foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			  	       $accessor = 'get' . ucfirst($column-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			  	       if($isPersist == true &amp;&amp; $column-&gt;isPrimaryKey() || $column-&gt;isAutoIncrement())</sourceline>
        <sourceline coveredcount="10">			  	       	   continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  	       // Verify length</sourceline>
        <sourceline coveredcount="10">			  	       if($length = $column-&gt;getLength() &amp;&amp; !is_object($this-&gt;model-&gt;$accessor())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			  	       	   $dataLen = strlen($this-&gt;model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="10">			  	       	   if($dataLen &gt; $length) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  	       	   	   $message = 'BaseDialect::validate ORM validation failed on \'' . $table-&gt;getModel() . '::' . $column-&gt;getModelPropertyName() . '\'. Length defined in orm.xml as \'' . $column-&gt;getLength() . '\' but the has a length of \'' . $dataLen . '\'.';</sourceline>
        <sourceline coveredcount="-1">			  	       	   	   Log::debug($message);</sourceline>
        <sourceline coveredcount="-1">			  	       	   	   throw new ORMException($message);</sourceline>
        <sourceline coveredcount="-2">			  	       	   }</sourceline>
        <sourceline coveredcount="10">			  	       }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  	       // Verify required fields contain data</sourceline>
        <sourceline coveredcount="10">			  		   if($column-&gt;isRequired() &amp;&amp; $this-&gt;model-&gt;$accessor() === null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		       // Allow file uploads to be null on updates that way the user isnt forced to re-upload data</sourceline>
        <sourceline coveredcount="-1">			  		       if(!$isPersist &amp;&amp; $column-&gt;getType() == 'blob') continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  		   	   $message = 'BaseDialect::validate ORM validation failed on \'' . $table-&gt;getModel() . '::' . $column-&gt;getModelPropertyName() . '\'. Required field contains null value.';</sourceline>
        <sourceline coveredcount="-1">			  		   	   Log::debug($message);</sourceline>
        <sourceline coveredcount="-1">			  		       throw new ORMException($message);</sourceline>
        <sourceline coveredcount="-2">			  		   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  		   // Use specified validator to verify data integrity</sourceline>
        <sourceline coveredcount="10">			  	       if($validator = $column-&gt;getValidator()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">			  	       	   // Allow null values for columns that are not required</sourceline>
        <sourceline coveredcount="10">			  	       	   if(!$column-&gt;isRequired() &amp;&amp; $this-&gt;model-&gt;$accessor() == null) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">			  	       	   $o = new $validator($this-&gt;model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="10">			  	       	   if(!$o-&gt;validate()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  	       	   	   $message = 'BaseDialect::validate ORM validation failed on \'' . $table-&gt;getModel() . '::' . $column-&gt;getModelPropertyName() . '\'. Expected data \'' . $this-&gt;model-&gt;$accessor() . '\' to be type \'' . $column-&gt;getType() . '\' but found \'' . gettype($this-&gt;model-&gt;$accessor()) . '\' using validator \'' . $validator . '\'.';</sourceline>
        <sourceline coveredcount="-1">			  	       	   	   Log::debug($message);</sourceline>
        <sourceline coveredcount="-1">			  	       	   	   throw new ORMException($message);</sourceline>
        <sourceline coveredcount="-2">			  	       	   }</sourceline>
        <sourceline coveredcount="10">			  	       }</sourceline>
        <sourceline coveredcount="10">			  }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Closes the connection to the database.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __destruct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">	  		 $this-&gt;close();</sourceline>
        <sourceline coveredcount="2">	  		 Log::debug('BaseDialect::__destruct');</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="PGSQLDialect" methodcount="11" methodscovered="3" statementcount="284" statementscovered="262" totalcount="295" totalcovered="265">
      <sourcefile name="PGSQLDialect.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/orm/dialect/PGSQLDialect.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm.dialect</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Handles PostgreSQL specific queries</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.orm.dialect</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">final class PGSQLDialect extends BaseDialect implements SQLDialect {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $connectFlag = -1;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initalize PostgreSQLDialect</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Database $db The Database object representing orm.xml</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct(Database $db) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     try {</sourceline>
        <sourceline coveredcount="1">	  	     		$this-&gt;database = $db;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     		$conn = 'pgsql:' .</sourceline>
        <sourceline coveredcount="1">	  	     				(($db-&gt;getName()) ? 'dbname=' . $db-&gt;getName() . ';': '') .</sourceline>
        <sourceline coveredcount="1">	  	  					(($db-&gt;getHostname()) ? 'host=' . $db-&gt;getHostname() . ';': '') .</sourceline>
        <sourceline coveredcount="1">	  	  					(($db-&gt;getPort()) ? 'port=' . $db-&gt;getPort() . ';' : '') .</sourceline>
        <sourceline coveredcount="1">	  	  					(($db-&gt;getUsername()) ? 'user=' . $db-&gt;getUsername() . ';': '') .</sourceline>
        <sourceline coveredcount="1">	  	  					(($db-&gt;getPassword()) ? 'password=' . $db-&gt;getPassword() . ';' : '');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	  			$this-&gt;pdo = new PDO($conn);</sourceline>
        <sourceline coveredcount="-1">	  	  			$this-&gt;connectFlag = 1;</sourceline>
        <sourceline coveredcount="0">	  	     }</sourceline>
        <sourceline coveredcount="1">	  	     catch(PDOException $pdoe){</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     	    Log::debug('PostgreSQLDialect::__construct Warning about \'' . $pdoe-&gt;getMessage() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     		// If the database doesnt exist, try a generic connection to the server. This allows the create() method to</sourceline>
        <sourceline coveredcount="0">	  	     		// be invoked to create the database schema.</sourceline>
        <sourceline coveredcount="1">	  	     	    if(strpos($pdoe-&gt;getMessage(), 'does not exist')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     	    	$conn = 'pgsql:' .</sourceline>
        <sourceline coveredcount="1">	  	  					(($db-&gt;getHostname()) ? 'host=' . $db-&gt;getHostname() . ';': '') .</sourceline>
        <sourceline coveredcount="1">	  	  					(($db-&gt;getUsername()) ? 'user=' . $db-&gt;getUsername() . ';': '') .</sourceline>
        <sourceline coveredcount="1">	  	  					(($db-&gt;getPassword()) ? 'password=' . $db-&gt;getPassword() . ';' : '');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  	     	    	$this-&gt;pdo = new PDO($conn);</sourceline>
        <sourceline coveredcount="1">	  	     	    	$this-&gt;connectFlag = 0;</sourceline>
        <sourceline coveredcount="1">	  	     	    }</sourceline>
        <sourceline coveredcount="0">	  	     	    else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	  	     	    	$this-&gt;connectFlag = -1;</sourceline>
        <sourceline coveredcount="-2">	  	     	    	throw new ORMException('Failed to create PostgreSQLDialect instance. ' . $pdoe-&gt;getMessage());</sourceline>
        <sourceline coveredcount="0">	  	     	    }</sourceline>
        <sourceline coveredcount="0">	  	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	 	     $this-&gt;database = $db;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#isConnected()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function isConnected() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;connectFlag;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#create()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function create() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;query('CREATE DATABASE ' . $this-&gt;database-&gt;getName() . ';');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Now that the database is present, connect directly to the database.</sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;pdo = new PDO('pgsql:host=' . $this-&gt;database-&gt;getHostname() . ';dbname=' . $this-&gt;database-&gt;getName(),</sourceline>
        <sourceline coveredcount="1">	  		 						 $this-&gt;database-&gt;getUsername(), $this-&gt;database-&gt;getPassword());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $constraintFails = array();</sourceline>
        <sourceline coveredcount="1">	  		 foreach($this-&gt;database-&gt;getTables() as $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		  try {</sourceline>
        <sourceline coveredcount="1">	  		 		  	    $sql = $this-&gt;toCreateTableSQL($table);</sourceline>
        <sourceline coveredcount="1">			   		  		$this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="0">	  		 		  }</sourceline>
        <sourceline coveredcount="1">	  		 		  catch(ORMException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 		  		 if(preg_match('/does not exist/', $e-&gt;getMessage())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 		  		 	 array_push($constraintFails, $sql);</sourceline>
        <sourceline coveredcount="1">	  		 		  		 	 Log::warn('PGSQLDialect::create Failed to create table \'' . $table-&gt;getName() . '\'. Will retry after processing all tables in case this is a foreign key constraint issue due to a table listed further down in orm.xml');</sourceline>
        <sourceline coveredcount="1">	  		 		  		 	 continue;</sourceline>
        <sourceline coveredcount="-2">	  		 		  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	  		 		  		 Log::debug($e-&gt;getMessage());</sourceline>
        <sourceline coveredcount="0">	  		 		  }</sourceline>
        <sourceline coveredcount="1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Constraint hack continued</sourceline>
        <sourceline coveredcount="1">	  		 if(count($constraintFails))</sourceline>
        <sourceline coveredcount="1">	  		 	 foreach($constraintFails as $sql)</sourceline>
        <sourceline coveredcount="1">	  		 	 		if(!$this-&gt;query($sql))</sourceline>
        <sourceline coveredcount="1">		  		 	 		throw new ORMException(print_r($e, true));</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Generates SQL CREATE TABLE for the specified table.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Table $table The table to generate the CREATE TABLE code for</sourceline>
        <sourceline coveredcount="0">	   * @return string The SQL CREATE TABLE code</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  private function toCreateTableSQL(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		  $defaultKeywords = array('CURRENT_TIMESTAMP');  // Default values that get passed unquoted</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 		  $sql = 'CREATE TABLE ' . $table-&gt;getName() . ' (';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 		  foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  	 				   $sql .= $column-&gt;getName() . ' ' . $column-&gt;getType() .</sourceline>
        <sourceline coveredcount="1">  	 						   (($column-&gt;getLength()) ? '(' . $column-&gt;getLength() . ')' : '') .</sourceline>
        <sourceline coveredcount="1">  	 						   (($column-&gt;isRequired() == true &amp;&amp; !$column-&gt;isAutoIncrement()) ? ' NOT NULL' : '') .</sourceline>
        <sourceline coveredcount="1">  	 						   (($column-&gt;getDefault()) ? ' DEFAULT ' . (in_array($column-&gt;getDefault(),$defaultKeywords) ? $column-&gt;getDefault() : '\'' . $column-&gt;getDefault() . '\'') . '': '') .</sourceline>
        <sourceline coveredcount="1">  	 						   ((!$column-&gt;getDefault() &amp;&amp; !$column-&gt;isRequired() &amp;&amp; !$column-&gt;isAutoIncrement()) ? ' DEFAULT NULL' : '') . ', ';</sourceline>
        <sourceline coveredcount="1">  	 		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   			  $pkeyColumns = $table-&gt;getPrimaryKeyColumns();</sourceline>
        <sourceline coveredcount="1">   			  if(count($pkeyColumns)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   			  	  $sql .= ' PRIMARY KEY (';</sourceline>
        <sourceline coveredcount="1">   				  for($i=0; $i&lt;count($pkeyColumns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   					   $sql .= $pkeyColumns[$i]-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">   					   if(($i+1) &lt; count($pkeyColumns))</sourceline>
        <sourceline coveredcount="1">   						   $sql .= ', ';</sourceline>
        <sourceline coveredcount="1">   				  }</sourceline>
        <sourceline coveredcount="1">   				  $sql .= ')';</sourceline>
        <sourceline coveredcount="1">   			  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	   		  if($table-&gt;hasForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	   		  	  $foreignKeyColumns = $table-&gt;getForeignKeyColumns();</sourceline>
        <sourceline coveredcount="1">	   		  	  for($i=0; $i&lt;count($foreignKeyColumns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	   		  	  	   $fk = $foreignKeyColumns[$i]-&gt;getForeignKey();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	   		  	  	   $sql .= ', CONSTRAINT ' . $fk-&gt;getName() . ' FOREIGN KEY (' .</sourceline>
        <sourceline coveredcount="1">	   		  	  	   				$fk-&gt;getColumnInstance()-&gt;getName() .</sourceline>
        <sourceline coveredcount="1">   	  	  		       	        ') REFERENCES ' . $fk-&gt;getReferencedTable() . ' (' .</sourceline>
        <sourceline coveredcount="1">   	  	  		    	        $fk-&gt;getReferencedColumn() . ') ';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">     	  		   	   $sql .= (($fk-&gt;getOnUpdate()) ? ' ON UPDATE ' . $fk-&gt;getOnUpdate() : '');</sourceline>
        <sourceline coveredcount="1">     	  		   	   $sql .= (($fk-&gt;getOnDelete()) ? ' ON DELETE ' . $fk-&gt;getOnDelete() : '');</sourceline>
        <sourceline coveredcount="1">	   		  	  }</sourceline>
        <sourceline coveredcount="1">	   		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			  $sql .= ');';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	   		  return $sql;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	   /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#createTable(Table $table)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function createTable(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;query($this-&gt;toCreateTableSQL($table));</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#dropTable(Table $table)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function dropTable(Table $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;query('DROP TABLE ' . $table-&gt;getName());</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		/**</sourceline>
        <sourceline coveredcount="0">	     * Attempts to locate the specified model by values. Any fields set in the object are used</sourceline>
        <sourceline coveredcount="0">	     * in search criteria. Alternatively, setRestrictions and setOrderBy methods can be used to</sourceline>
        <sourceline coveredcount="0">	     * filter results.</sourceline>
        <sourceline coveredcount="0">	     *</sourceline>
        <sourceline coveredcount="0">	     * @param $model A domain model object. Any fields which are set in the object are used to filter results.</sourceline>
        <sourceline coveredcount="0">	     * @throws ORMException If any primary keys contain null values or any</sourceline>
        <sourceline coveredcount="0">	     * 		   errors are encountered executing queries</sourceline>
        <sourceline coveredcount="0">	     */</sourceline>
        <sourceline coveredcount="0">	    public function find(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	    	   $table = $this-&gt;getTableByModel($model);</sourceline>
        <sourceline coveredcount="1">			   $newModel = $table-&gt;getModelInstance();</sourceline>
        <sourceline coveredcount="1">			   $values = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">			   Log::debug('BaseDialect::find Performing find on model \'' . $table-&gt;getModel() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		   try {</sourceline>
        <sourceline coveredcount="1">	  		   		 if($this-&gt;isEmpty($model)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	    	   	         $sql = 'SELECT ' . (($this-&gt;isDistinct() == null) ? '*' : 'DISTINCT ' . $this-&gt;isDistinct()) . ' FROM ' . $table-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	    	   	         $order = $this-&gt;getOrderBy();</sourceline>
        <sourceline coveredcount="1">	    	   	         $offset = $this-&gt;getOffset();</sourceline>
        <sourceline coveredcount="1">	    	   	         $groupBy = $this-&gt;getGroupBy();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">    	   	         	 $sql .= ($this-&gt;getRestrictions() != null) ? $this-&gt;createRestrictSQL() : '';</sourceline>
        <sourceline coveredcount="1">					 	 $sql .= ($order != null) ? ' ORDER BY ' . $order['column'] . ' ' . $order['direction'] : '';</sourceline>
        <sourceline coveredcount="1">					 	 $sql .= ($groupBy)? ' GROUP BY ' . $this-&gt;getGroupBy() : '';</sourceline>
        <sourceline coveredcount="1">					 	 $sql .= ($offset &amp;&amp; $this-&gt;getMaxResults()) ? ' LIMIT ' . $offset . ', ' . $this-&gt;getMaxResults() : '';</sourceline>
        <sourceline coveredcount="1">					 	 $sql .= (!$offset &amp;&amp; $this-&gt;getMaxResults()) ? ' LIMIT ' . $this-&gt;getMaxResults() : '';</sourceline>
        <sourceline coveredcount="1">    	   	         	 $sql .= ';';</sourceline>
        <sourceline coveredcount="1">	    	   		 }</sourceline>
        <sourceline coveredcount="0">	    	   		 else {</sourceline>
        <sourceline coveredcount="1">	    	   		 		$where = '';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	    	   		 		$columns = $table-&gt;getColumns();</sourceline>
        <sourceline coveredcount="1">							for($i=0; $i&lt;count($columns); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">							 	 if($columns[$i]-&gt;isLazy()) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">							 	 $accessor = $this-&gt;toAccessor($columns[$i]-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="1">						     	 if($model-&gt;$accessor() == null) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						     	 $where .= (count($values) ? ' ' . $this-&gt;getRestrictionsLogicOperator() . ' ' : ' ') . $columns[$i]-&gt;getName() . ' ' . $this-&gt;getComparisonLogicOperator() . ' ?';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						     	 if(is_object($model-&gt;$accessor())) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						     	 	 $refAccessor = $this-&gt;toAccessor($columns[$i]-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						     	 	 if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="1">						     	        array_push($values, $transformer::transform($model-&gt;$accessor()-&gt;$refAccessor()));</sourceline>
        <sourceline coveredcount="0">						     	     else</sourceline>
        <sourceline coveredcount="1">				     	 	     	    array_push($values, $model-&gt;$accessor()-&gt;$refAccessor());</sourceline>
        <sourceline coveredcount="1">						     	 }</sourceline>
        <sourceline coveredcount="0">						     	 else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">				     	 	     	 if($transformer = $columns[$i]-&gt;getTransformer())</sourceline>
        <sourceline coveredcount="1">						     	        array_push($values, $transformer::transform($model-&gt;$accessor()));</sourceline>
        <sourceline coveredcount="0">						     	     else</sourceline>
        <sourceline coveredcount="1">				     	 	     	    array_push($values, $model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="0">						     	 }</sourceline>
        <sourceline coveredcount="1">						    }</sourceline>
        <sourceline coveredcount="1">						    $sql = 'SELECT * FROM ' . $table-&gt;getName() . ' WHERE' . $where;</sourceline>
        <sourceline coveredcount="1">						    $sql .= ' LIMIT ' . $this-&gt;getMaxResults() . ';';</sourceline>
        <sourceline coveredcount="0">	    	   		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	    	   		 $this-&gt;setDistinct(null);</sourceline>
        <sourceline coveredcount="1">	   	         	 $this-&gt;setRestrictions(array());</sourceline>
        <sourceline coveredcount="1">	   	         	 $this-&gt;setRestrictionsLogicOperator('AND');</sourceline>
        <sourceline coveredcount="1">	   	         	 $this-&gt;setOrderBy(null, 'ASC');</sourceline>
        <sourceline coveredcount="1">	   	         	 $this-&gt;setGroupBy(null);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">					 $this-&gt;prepare($sql);</sourceline>
        <sourceline coveredcount="1">					 $this-&gt;PDOStatement-&gt;setFetchMode(PDO::FETCH_OBJ);</sourceline>
        <sourceline coveredcount="1">					 $result = $this-&gt;execute($values);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">					 if(!count($result)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">					 	 Log::debug('BaseDialect::find Empty result set for model \'' . $table-&gt;getModel() . '\'.');</sourceline>
        <sourceline coveredcount="-1">					 	 return null;</sourceline>
        <sourceline coveredcount="-2">					 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">				 	 $index = 0;</sourceline>
        <sourceline coveredcount="1">				 	 $models = array();</sourceline>
        <sourceline coveredcount="1">					 foreach($result as $stdClass) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">					 		  $m = $table-&gt;getModelInstance();</sourceline>
        <sourceline coveredcount="1">					 	   	  foreach(get_object_vars($stdClass) as $name =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">					 	   	  		   $modelProperty = $this-&gt;getPropertyNameForColumn($table, $name, true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">							 	   	   // Create foreign model instances from foreign values</sourceline>
        <sourceline coveredcount="1">						 	 		   foreach($table-&gt;getColumns() as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						 	 		   		    if($column-&gt;getName() != $name) continue;</sourceline>
        <sourceline coveredcount="1">						 	 		   		    if($column-&gt;isLazy()) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						 	 		   		    if($renderer = $column-&gt;getRenderer())</sourceline>
        <sourceline coveredcount="1">                        				   	       $value = $renderer::render($value);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                        				   	    if(!$value) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						 	 		  		    if($column-&gt;isForeignKey()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						 	 		  		   	    $foreignModel = $column-&gt;getForeignKey()-&gt;getReferencedTableInstance()-&gt;getModel();</sourceline>
        <sourceline coveredcount="1">						 	 		  		   	    $foreignInstance = new $foreignModel();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						 	 		  		   	    $foreignMutator = $this-&gt;toMutator($column-&gt;getForeignKey()-&gt;getReferencedColumnInstance()-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="1">						 	 		  		   	    $foreignInstance-&gt;$foreignMutator($value);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						 	 		  		   	    $persisted = $this-&gt;find($foreignInstance);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">						 	 		  		   	    // php namespace support - remove \ character from fully qualified paths</sourceline>
        <sourceline coveredcount="1">							 	 		  		   	$foreignModelPieces = explode('\\', $foreignModel);</sourceline>
        <sourceline coveredcount="1">							 	 		  		   	$foreignClassName = array_pop($foreignModelPieces);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						 	 		  		   	    $instanceMutator = $this-&gt;toMutator($modelProperty);</sourceline>
        <sourceline coveredcount="1">						 	 		  		   	    $m-&gt;$instanceMutator($persisted[0]);</sourceline>
        <sourceline coveredcount="1">						 	 		  		    }</sourceline>
        <sourceline coveredcount="0">						 	 		  		    else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						 	 		  		   		$mutator = $this-&gt;toMutator($modelProperty);</sourceline>
        <sourceline coveredcount="1">					 	   	   		  				$m-&gt;$mutator($value);</sourceline>
        <sourceline coveredcount="0">						 	 		  		    }</sourceline>
        <sourceline coveredcount="1">						 	 		   }</sourceline>
        <sourceline coveredcount="1">					 	   	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">					 	   	  array_push($models, $m);</sourceline>
        <sourceline coveredcount="1">					 	   	  $index++;</sourceline>
        <sourceline coveredcount="1">					 	   	  if($index == $this-&gt;getMaxResults())  break;</sourceline>
        <sourceline coveredcount="1">				     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">				     return $models;</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="-2">	  		 catch(Exception $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	  		 		throw new ORMException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0">	    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#drop()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function drop() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;pdo = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $conn = 'pgsql:dbname=' . $this-&gt;database-&gt;getUsername() . ';' .</sourceline>
        <sourceline coveredcount="-1">	  	  					(($this-&gt;database-&gt;getHostname()) ? 'host=' . $this-&gt;database-&gt;getHostname() . ';': '') .</sourceline>
        <sourceline coveredcount="-1">	  	  					(($this-&gt;database-&gt;getUsername()) ? 'user=' . $this-&gt;database-&gt;getUsername() . ';': '') .</sourceline>
        <sourceline coveredcount="-1">	  	  					(($this-&gt;database-&gt;getPassword()) ? 'password=' . $this-&gt;database-&gt;getPassword() . ';' : '');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	     $p = new PDO($conn);</sourceline>
        <sourceline coveredcount="-1">  	 	 	 $p-&gt;query('DROP DATABASE ' . $this-&gt;database-&gt;getName() . ';');</sourceline>
        <sourceline coveredcount="-1">  	 	 	 $p = null;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#call(DomainModel $model)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function call(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $outs = array();</sourceline>
        <sourceline coveredcount="1">	  		 $params = array();</sourceline>
        <sourceline coveredcount="1">	  		 $class = get_class($model);</sourceline>
        <sourceline coveredcount="1">	  		 $proc = $this-&gt;getProcedureByModel($model);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 foreach($proc-&gt;getParameters() as $param) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 		  if($param-&gt;getMode() == 'IN' || $param-&gt;getMode() == 'INOUT') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 			  $accessor = $this-&gt;toAccessor($param-&gt;getModelPropertyName());</sourceline>
        <sourceline coveredcount="1">	  		 			  array_push($params, $model-&gt;$accessor());</sourceline>
        <sourceline coveredcount="1">	  		 		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 		  if($param-&gt;getMode() == 'OUT' || $param-&gt;getMode() == 'INOUT')</sourceline>
        <sourceline coveredcount="1">	  		 			  $outs[$param-&gt;getName()] = $param-&gt;getModelPropertyName();</sourceline>
        <sourceline coveredcount="1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $values = array();</sourceline>
        <sourceline coveredcount="1">	  		 $query = 'SELECT * FROM ' . $proc-&gt;getName() . '(';</sourceline>
        <sourceline coveredcount="1">	  		 for($i=0; $i&lt;count($params); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 		$values[$i] = $params[$i];</sourceline>
        <sourceline coveredcount="1">	  		 		$query .= '?' . (($i+1) == count($query) ? ', ': '');</sourceline>
        <sourceline coveredcount="1">	  		 }</sourceline>
        <sourceline coveredcount="1">	  		 $query .= ');';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $this-&gt;prepare($query);</sourceline>
        <sourceline coveredcount="1">	  		 $stmt = $this-&gt;execute($values);</sourceline>
        <sourceline coveredcount="1">	  		 $stmt-&gt;setFetchMode(PDO::FETCH_ASSOC);</sourceline>
        <sourceline coveredcount="1">	  		 $results = $stmt-&gt;fetchAll();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if(!$results) return true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 if(count($results) &gt; 1) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		  		 $models = array();</sourceline>
        <sourceline coveredcount="1">		 		 foreach($results as $record) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		 		 		  $m = new $class;</sourceline>
        <sourceline coveredcount="1">		 		 		  foreach($record as $column =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		 		 		  		   $mutator = $this-&gt;toMutator($outs[$column]);</sourceline>
        <sourceline coveredcount="1">		  		 		  		   $m-&gt;$mutator($value);</sourceline>
        <sourceline coveredcount="1">		 		 		  }</sourceline>
        <sourceline coveredcount="1">		 		 		  array_push($models, $m);</sourceline>
        <sourceline coveredcount="1">	 		 	 }</sourceline>
        <sourceline coveredcount="1">	 		 	 return $models;</sourceline>
        <sourceline coveredcount="-2">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 foreach($results as $record) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 		  $m = new $class;</sourceline>
        <sourceline coveredcount="1">		 		 	  foreach($record as $column =&gt; $value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		 		 		  	   $mutator = $this-&gt;toMutator($outs[$column]);</sourceline>
        <sourceline coveredcount="1">		  		 		  	   $m-&gt;$mutator($value);</sourceline>
        <sourceline coveredcount="1">		 		      }</sourceline>
        <sourceline coveredcount="1">		 		 	  return $m;</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the total number of records in the specified model.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Object $model The domain object to get the count for.</sourceline>
        <sourceline coveredcount="0">	   * @return Integer The total number of records in the table.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function count(DomainModel $model) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $sql = 'SELECT count(*) as count FROM ' . $this-&gt;getTableByModel($model)-&gt;getName();</sourceline>
        <sourceline coveredcount="-1">			 $sql .= ($this-&gt;createRestrictSQL() == null) ? '' : $this-&gt;createRestrictSQL();</sourceline>
        <sourceline coveredcount="-1">			 $sql .= ';';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     	 $stmt = $this-&gt;query($sql);</sourceline>
        <sourceline coveredcount="-1">  			 $stmt-&gt;setFetchMode(PDO::FETCH_OBJ);</sourceline>
        <sourceline coveredcount="-1">  			 $result = $stmt-&gt;fetchAll();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  			 return ($result == null) ? 0 : $result[0]-&gt;count;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * (non-PHPdoc)</sourceline>
        <sourceline coveredcount="0">	   * @see src/orm/dialect/SQLDialect#reverseEngineer()</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function reverseEngineer() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 /**</sourceline>
        <sourceline coveredcount="0">	  		  * Organizes table lookup query result set. Result set contains one large</sourceline>
        <sourceline coveredcount="0">	  		  * array with all tables and column names. This function creates a new</sourceline>
        <sourceline coveredcount="0">	  		  * associative array with the table name as the key which contains all</sourceline>
        <sourceline coveredcount="0">	  		  * of its columns underneath.</sourceline>
        <sourceline coveredcount="0">	  		  *</sourceline>
        <sourceline coveredcount="0">	  		  * @param array $tables Array of stdClass table objects returned from $tstmt</sourceline>
        <sourceline coveredcount="0">	  		  * @return array</sourceline>
        <sourceline coveredcount="0">	  		  */</sourceline>
        <sourceline coveredcount="1"> 	         function organizeTables(array $tables) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	     		  $t = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	     		  foreach($tables as $table) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	     		  		if(array_key_exists($table-&gt;table_name, $t))</sourceline>
        <sourceline coveredcount="1">      	     		  			array_push($t[$table-&gt;table_name], $table);</sourceline>
        <sourceline coveredcount="0">      	     		  		else</sourceline>
        <sourceline coveredcount="1">      	     		  			$t[$table-&gt;table_name] = array($table);</sourceline>
        <sourceline coveredcount="1">      	     		  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	     		  return $t;</sourceline>
        <sourceline coveredcount="-2">      	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $Database = new Database();</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setName($this-&gt;database-&gt;getName());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setType($this-&gt;database-&gt;getType());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setHostname($this-&gt;database-&gt;getHostname());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setUsername($this-&gt;database-&gt;getUsername());</sourceline>
        <sourceline coveredcount="1">	  		 $Database-&gt;setPassword($this-&gt;database-&gt;getPassword());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Get all primary keys</sourceline>
        <sourceline coveredcount="1">	  		 $pstmt = $this-&gt;query('SELECT</sourceline>
        <sourceline coveredcount="0">										tc.table_name,</sourceline>
        <sourceline coveredcount="0">										cu.column_name</sourceline>
        <sourceline coveredcount="0">									 FROM</sourceline>
        <sourceline coveredcount="0">										information_schema.key_column_usage cu,</sourceline>
        <sourceline coveredcount="0">										information_schema.table_constraints tc</sourceline>
        <sourceline coveredcount="0">									 WHERE cu.constraint_name = tc.constraint_name</sourceline>
        <sourceline coveredcount="0">									 AND cu.table_name = tc.table_name</sourceline>
        <sourceline coveredcount="0">									 AND tc.constraint_type = \'PRIMARY KEY\'</sourceline>
        <sourceline coveredcount="1">									 AND tc.table_catalog = \'' . $Database-&gt;getName() . '\'</sourceline>
        <sourceline coveredcount="1">									 AND tc.table_schema = \'public\';');</sourceline>
        <sourceline coveredcount="1">	  		 $pstmt-&gt;setFetchMode(PDO::FETCH_OBJ);</sourceline>
        <sourceline coveredcount="1">	  		 $pkeys = $pstmt-&gt;fetchAll();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Get all relationships</sourceline>
        <sourceline coveredcount="1">	  		 $rstmt = $this-&gt;query('SELECT</sourceline>
        <sourceline coveredcount="0">	  		 							rc.constraint_name,</sourceline>
        <sourceline coveredcount="0">										tc.table_name,</sourceline>
        <sourceline coveredcount="0">										kcu.column_name,</sourceline>
        <sourceline coveredcount="0">										ccu.table_name as referenced_table,</sourceline>
        <sourceline coveredcount="0">										ccu.column_name as referenced_column,</sourceline>
        <sourceline coveredcount="0">										rc.update_rule,</sourceline>
        <sourceline coveredcount="0">										rc.delete_rule</sourceline>
        <sourceline coveredcount="0">									FROM</sourceline>
        <sourceline coveredcount="0">										information_schema.key_column_usage kcu,</sourceline>
        <sourceline coveredcount="0">										information_schema.table_constraints tc,</sourceline>
        <sourceline coveredcount="0">										information_schema.referential_constraints as rc,</sourceline>
        <sourceline coveredcount="0">										information_schema.constraint_column_usage as ccu</sourceline>
        <sourceline coveredcount="0">									WHERE kcu.constraint_name = tc.constraint_name</sourceline>
        <sourceline coveredcount="0">									AND ccu.constraint_name = kcu.constraint_name</sourceline>
        <sourceline coveredcount="0">									AND rc.constraint_name = kcu.constraint_name</sourceline>
        <sourceline coveredcount="0">									AND kcu.table_name = tc.table_name</sourceline>
        <sourceline coveredcount="0">									AND tc.constraint_type = \'FOREIGN KEY\'</sourceline>
        <sourceline coveredcount="1">									AND tc.table_catalog = \'' . $Database-&gt;getName() . '\'</sourceline>
        <sourceline coveredcount="1">									AND tc.table_schema = \'public\';');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	  		 $rstmt-&gt;setFetchMode(PDO::FETCH_OBJ);</sourceline>
        <sourceline coveredcount="1">	  		 $relationships = $rstmt-&gt;fetchAll();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Get all tables</sourceline>
        <sourceline coveredcount="1">	  		 $tstmt = $this-&gt;query('SELECT</sourceline>
        <sourceline coveredcount="0">	  		 							table_name,</sourceline>
        <sourceline coveredcount="0">	  		 							column_name,</sourceline>
        <sourceline coveredcount="0">	  		 							is_nullable,</sourceline>
        <sourceline coveredcount="0">	  		 							udt_name as type,</sourceline>
        <sourceline coveredcount="0">	  		 							character_maximum_length as length</sourceline>
        <sourceline coveredcount="0">	  		 						FROM information_schema.columns</sourceline>
        <sourceline coveredcount="0">	  		 						WHERE table_schema = \'public\'</sourceline>
        <sourceline coveredcount="1">	  		 						AND table_catalog = \'' . $Database-&gt;getName() . '\'</sourceline>
        <sourceline coveredcount="1">	  		 						ORDER BY table_name, ordinal_position;');</sourceline>
        <sourceline coveredcount="1">      	     $tstmt-&gt;execute();</sourceline>
        <sourceline coveredcount="1">      	     $tstmt-&gt;setFetchMode(PDO::FETCH_OBJ);</sourceline>
        <sourceline coveredcount="1">      	     $tables = $tstmt-&gt;fetchAll();</sourceline>
        <sourceline coveredcount="1">      	     $tables = organizeTables($tables);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	     foreach($tables as $name =&gt; $columns) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	     		  $Table = new Table();</sourceline>
        <sourceline coveredcount="1">      	     		  $Table-&gt;setName(str_replace(' ', '_', $name));</sourceline>
        <sourceline coveredcount="1">      	     		  $Table-&gt;setModel(ucfirst($name));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	      		  foreach($columns as $column) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	      		  	   $type = ($column-&gt;type == 'int4') ? 'serial' : $column-&gt;type;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">	      	      		   $Column = new Column(null, $Table-&gt;getName());</sourceline>
        <sourceline coveredcount="1">						   $Column-&gt;setName($column-&gt;column_name);</sourceline>
        <sourceline coveredcount="1">						   $Column-&gt;setType($type);</sourceline>
        <sourceline coveredcount="1">						   $Column-&gt;setLength($column-&gt;length);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						   if($column-&gt;is_nullable == 'YES') $Column-&gt;setRequired(true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						   foreach($pkeys as $pkey)</sourceline>
        <sourceline coveredcount="1">						   		if($pkey-&gt;table_name == $name &amp;&amp; $pkey-&gt;column_name == $column-&gt;column_name)</sourceline>
        <sourceline coveredcount="1">						   			$Column-&gt;setPrimaryKey(true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">						   if($type == 'serial' || $type == 'bigserial')</sourceline>
        <sourceline coveredcount="1">						   	   $Column-&gt;setAutoIncrement(true);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">      	      		  	   foreach($relationships as $fkey) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">									if($fkey-&gt;table_name == $Table-&gt;getName() &amp;&amp;</sourceline>
        <sourceline coveredcount="1">										$fkey-&gt;column_name == $Column-&gt;getName()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">											$ForeignKey = new ForeignKey(null, $fkey-&gt;table_name, $fkey-&gt;column_name);</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setName($fkey-&gt;constraint_name);</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setType('one-to-many');</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setReferencedTable($fkey-&gt;referenced_table);</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setReferencedColumn($fkey-&gt;referenced_column);</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setReferencedController(ucfirst($fkey-&gt;referenced_table) . 'Controller');</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setOnDelete($fkey-&gt;delete_rule);</sourceline>
        <sourceline coveredcount="1">											$ForeignKey-&gt;setOnUpdate($fkey-&gt;update_rule);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">											$Column-&gt;setForeignKey($ForeignKey);</sourceline>
        <sourceline coveredcount="1">											$Column-&gt;setProperty(ucfirst($fkey-&gt;referenced_table));</sourceline>
        <sourceline coveredcount="1">										}</sourceline>
        <sourceline coveredcount="1">	      	      		   }</sourceline>
        <sourceline coveredcount="1">      	      		  	   $Table-&gt;addColumn($Column);</sourceline>
        <sourceline coveredcount="1">      	      		   }</sourceline>
        <sourceline coveredcount="1">      	      		   $Database-&gt;addTable($Table);</sourceline>
        <sourceline coveredcount="1">      	      }</sourceline>
        <sourceline coveredcount="1">      	      return $Database;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.interception" methodcount="22" methodscovered="12" statementcount="253" statementscovered="65" totalcount="275" totalcovered="77">
    <class name="InterceptorProxy" methodcount="7" methodscovered="0" statementcount="187" statementscovered="2" totalcount="194" totalcovered="2">
      <sourcefile name="InterceptorProxy.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/interception/InterceptorProxy.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Proxy / State Machine responsible for intercepting method calls,</sourceline>
        <sourceline coveredcount="0"> * invoking interceptors, and maintaining interceptor chain state.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class InterceptorProxy {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $interceptedTarget;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initalizes the intercepted class by creating a new instance, passing in</sourceline>
        <sourceline coveredcount="0">	   * any constructor arguments as required. Class level interceptors are invoked</sourceline>
        <sourceline coveredcount="0">	   * here, as well as dependancy injections via #@In.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $proxiedClass = get_class($this);</sourceline>
        <sourceline coveredcount="-1">	  		 $intercepted = get_class($this) . '_Intercepted';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Create the intercepted class using constructor arguments if we have any</sourceline>
        <sourceline coveredcount="-1">	  		 if($args = func_get_args()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 	 $interceptedClass = new \ReflectionClass($intercepted);</sourceline>
        <sourceline coveredcount="-1">		  		 $this-&gt;interceptedTarget = $interceptedClass-&gt;newInstanceArgs($args);</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0">	  		 else</sourceline>
        <sourceline coveredcount="-1">		  	 	$this-&gt;interceptedTarget = new $intercepted();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  	 	 $class = new \ReflectionClass($this-&gt;interceptedTarget);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach(\AgilePHP::getInterceptions() as $interception) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		 // Invoke class level interceptors</sourceline>
        <sourceline coveredcount="-1">		     		 if($interception-&gt;getClass() == $proxiedClass &amp;&amp;</sourceline>
        <sourceline coveredcount="-1">		     		 	 !$interception-&gt;getMethod() &amp;&amp; !$interception-&gt;getProperty()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     		 	 	 $interceptorClass = new \AnnotatedClass($interception-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="-1">     	 	 	 		 foreach($interceptorClass-&gt;getMethods() as $interceptorMethod) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		 	 	 	 	      if($interceptorMethod-&gt;hasAnnotation('AroundInvoke')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		     		 	 	 	   	  $invocationCtx = new \InvocationContext($this-&gt;interceptedTarget, null, null, $interception-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="-1">							          $ctx = $interceptorMethod-&gt;invoke($interception-&gt;getInterceptor(), $invocationCtx);</sourceline>
        <sourceline coveredcount="-1">							          if($ctx instanceof \InvocationContext &amp;&amp; $ctx-&gt;proceed) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">							          	  $this-&gt;interceptedTarget = $ctx-&gt;getTarget();</sourceline>
        <sourceline coveredcount="-1">								          if($ctx-&gt;getMethod()) $this-&gt;__call($ctx-&gt;getMethod(), $ctx-&gt;getParameters());</sourceline>
        <sourceline coveredcount="-1">							          }</sourceline>
        <sourceline coveredcount="-1">		     		 	 	 	  }</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 }</sourceline>
        <sourceline coveredcount="-1">		     		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		     		 // Execute property/field level interceptors</sourceline>
        <sourceline coveredcount="-1">		     		 if($interception-&gt;getClass() == $proxiedClass &amp;&amp; $interception-&gt;getProperty()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     		 	 	 $p = new \ReflectionProperty($this-&gt;interceptedTarget, $interception-&gt;getProperty());</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 if(!$p-&gt;isPublic())</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 	 throw new \InterceptionException('Property level interceptor requires public context at \'' . $proxiedClass .</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 	 		 '::' . $interception-&gt;getProperty() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1"> 		 	 	 		$interceptorClass = new \AnnotatedClass($interception-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="-1"> 		 	 	 		foreach($interceptorClass-&gt;getMethods() as $interceptorMethod) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		 	 	 	 	     if($interceptorMethod-&gt;hasAnnotation('AroundInvoke')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		     		 	 	 	   	 $invocationCtx = new \InvocationContext($this-&gt;interceptedTarget, null, null, $interception-&gt;getInterceptor(), $interception-&gt;getProperty());</sourceline>
        <sourceline coveredcount="-1">							         $return = $interceptorMethod-&gt;invoke($interception-&gt;getInterceptor(), $invocationCtx);</sourceline>
        <sourceline coveredcount="-1">							         $p-&gt;setValue($this-&gt;interceptedTarget, $return);</sourceline>
        <sourceline coveredcount="-1">		     		 	 	 	 }</sourceline>
        <sourceline coveredcount="-1"> 		 	 	 				 if($interceptorMethod-&gt;hasAnnotation('AfterInvoke')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		 	 	 		  	 	 $invocationCtx = new \InvocationContext($this-&gt;interceptedTarget, null, null, $interception-&gt;getInterceptor(), $interception-&gt;getProperty());</sourceline>
        <sourceline coveredcount="-1">					              	 $interceptorMethod-&gt;invoke($interception-&gt;getInterceptor(), $invocationCtx );</sourceline>
        <sourceline coveredcount="-1">     		 	 	 		  	 }</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 }</sourceline>
        <sourceline coveredcount="-1">		     		 }</sourceline>
        <sourceline coveredcount="-1">		     }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Custom method used to initalize static fields as soon as the class is loaded.</sourceline>
        <sourceline coveredcount="0">	   * This method gets invoked only if static fields are parsed from the intercepted target.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   * @static</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public static function __initstatic() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         $proxiedClass = get_called_class();</sourceline>
        <sourceline coveredcount="-1">	  		 $intercepted = $proxiedClass . '_Intercepted';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 foreach(\AgilePHP::getInterceptions() as $interception) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 		 // Invoke class level interceptors</sourceline>
        <sourceline coveredcount="-1">		     		 if($interception-&gt;getClass() == $proxiedClass &amp;&amp; !$interception-&gt;getMethod() &amp;&amp; !$interception-&gt;getProperty()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     		 	 	 $interceptorClass = new \AnnotatedClass($interception-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="-1">     	 	 	 		 foreach($interceptorClass-&gt;getMethods() as $interceptorMethod) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		 	 	 	 	      if($interceptorMethod-&gt;hasAnnotation('AroundInvoke')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		     		 	 	 	   	  $invocationCtx = new \InvocationContext($intercepted, null, null, $interception-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="-1">							          $ctx = $interceptorMethod-&gt;invoke($interception-&gt;getInterceptor(), $invocationCtx);</sourceline>
        <sourceline coveredcount="-1">							          if($ctx instanceof InvocationContext &amp;&amp; $ctx-&gt;proceed) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">							          	  $intercepted = $ctx-&gt;getTarget();</sourceline>
        <sourceline coveredcount="-1">								          if($ctx-&gt;getMethod()) $this-&gt;__call($ctx-&gt;getMethod(), $ctx-&gt;getParameters());</sourceline>
        <sourceline coveredcount="-1">							          }</sourceline>
        <sourceline coveredcount="-1">		     		 	 	 	  }</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 }</sourceline>
        <sourceline coveredcount="-1">		     		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		     		 // Execute property/field level interceptors</sourceline>
        <sourceline coveredcount="-1">		     		 if($interception-&gt;getClass() == $proxiedClass &amp;&amp; $interception-&gt;getProperty()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     		 	 	 $p = new \ReflectionProperty($intercepted, $interception-&gt;getProperty());</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 if(!$p-&gt;isPublic())</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 	 throw new \InterceptionException('Property level interceptor requires public context at \'' . $proxiedClass .</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 	 		 '::' . $interception-&gt;getProperty() . '\'.');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1"> 		 	 	 		$interceptorClass = new \AnnotatedClass($interception-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="-1"> 		 	 	 		foreach($interceptorClass-&gt;getMethods() as $interceptorMethod) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		 	 	 	 	     if($interceptorMethod-&gt;hasAnnotation('AroundInvoke')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		     		 	 	 	   	 $invocationCtx = new \InvocationContext($intercepted, null, null, $interception-&gt;getInterceptor(), $interception-&gt;getProperty());</sourceline>
        <sourceline coveredcount="-1">							         $return = $interceptorMethod-&gt;invoke($interception-&gt;getInterceptor(), $invocationCtx);</sourceline>
        <sourceline coveredcount="-1">							         $p-&gt;setValue($intercepted, $return);</sourceline>
        <sourceline coveredcount="-1">		     		 	 	 	 }</sourceline>
        <sourceline coveredcount="-1"> 		 	 	 				 if($interceptorMethod-&gt;hasAnnotation('AfterInvoke')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		 	 	 		  	 	 $invocationCtx = new \InvocationContext($intercepted, null, null, $interception-&gt;getInterceptor(), $interception-&gt;getProperty());</sourceline>
        <sourceline coveredcount="-1">					              	 $interceptorMethod-&gt;invoke($interception-&gt;getInterceptor(), $invocationCtx );</sourceline>
        <sourceline coveredcount="-1">     		 	 	 		  	 }</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 }</sourceline>
        <sourceline coveredcount="-1">		     		 }</sourceline>
        <sourceline coveredcount="-1">		     }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the instance of the intercepted class. This is the original class</sourceline>
        <sourceline coveredcount="0">	   * that was requested, renamed to '&lt;class_name&gt;_Intercepted'.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The intercepted class instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getInterceptedInstance() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;interceptedTarget;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	  /**</sourceline>
        <sourceline coveredcount="0">  	   * Magic PHP method executor used to intercept static method calls.</sourceline>
        <sourceline coveredcount="0">  	   *</sourceline>
        <sourceline coveredcount="0">  	   * @param String $method The method being called</sourceline>
        <sourceline coveredcount="0">  	   * @param Array $args The arguments being passed</sourceline>
        <sourceline coveredcount="0">  	   * @return The result of the intercepted static method invocation</sourceline>
        <sourceline coveredcount="0">  	   * @throws InterceptionException</sourceline>
        <sourceline coveredcount="0">  	   * @static</sourceline>
        <sourceline coveredcount="0">  	   */</sourceline>
        <sourceline coveredcount="0">  	  public static function __callstatic($method, $args) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	         $className = get_called_class();</sourceline>
        <sourceline coveredcount="-1">  	         $interceptedClass = $className . '_Intercepted';</sourceline>
        <sourceline coveredcount="-1">  	         $class = new ReflectionClass($className);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	         $sharedContext = null; // Stores an InvocationContext shared among chained interceptors</sourceline>
        <sourceline coveredcount="-1">	         $invoked = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $interceptors = self::getInterceptorsByMethod($className, $method, $className);</sourceline>
        <sourceline coveredcount="-1">	  		 $aroundInvokes = $interceptors['AroundInvoke'];</sourceline>
        <sourceline coveredcount="-1">	  		 $afterInvokes = $interceptors['AfterInvoke'];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Execute #@AroundInvoke interceptor methods</sourceline>
        <sourceline coveredcount="-1">	  		 for($i=0; $i&lt;count($aroundInvokes); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		         if(!$sharedContext)</sourceline>
        <sourceline coveredcount="-1">  		            $sharedContext = new \InvocationContext($interceptedClass, $method, $args, $aroundInvokes[$i]['interceptor']-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		     $sharedContext = $aroundInvokes[$i]['method']-&gt;invoke($aroundInvokes[$i]['interceptor']-&gt;getInterceptor(), $sharedContext);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		         // Only execute the intercepted target call if the InvocationContext has had its proceed() method invoked.</sourceline>
        <sourceline coveredcount="-1">		         if($sharedContext instanceof \InvocationContext &amp;&amp; $sharedContext-&gt;proceed) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">				    $m = $class-&gt;getMethod($sharedContext-&gt;getMethod());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					// Invoke the intercepted call, capturing the return value</sourceline>
        <sourceline coveredcount="-1">					$sharedContext-&gt;setReturn(call_user_func_array(array($interceptedClass, $method), $sharedContext-&gt;getParameters()));</sourceline>
        <sourceline coveredcount="-1">		         }</sourceline>
        <sourceline coveredcount="0">		         else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		            // Interceptors that return a non-null value get the return value returned to the caller.</sourceline>
        <sourceline coveredcount="-1">		          	if($sharedContext !== null) return $sharedContext;</sourceline>
        <sourceline coveredcount="0">                }</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Execute #@AfterInvoke interceptor methods</sourceline>
        <sourceline coveredcount="-1">	  		 for($i=0; $i&lt;count($afterInvokes); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		     // If no #@AroundInvoke interceptions occurred, invoke the intercepted call, capturing the return value</sourceline>
        <sourceline coveredcount="-1"> 	 	   	     if(!$sharedContext) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		 	 	$sharedContext = new \InvocationContext($interceptedClass, $method, $args, $afterInvokes[$i]['interceptor']-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="-1">     		 	 	$m = $class-&gt;getMethod($method);</sourceline>
        <sourceline coveredcount="-1">     		 	 	$sharedContext-&gt;setReturn(call_user_func_array(array($interceptedClass, $method), $args));</sourceline>
        <sourceline coveredcount="-1">     		 	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		 	 $sharedContext = $afterInvokes[$i]['method']-&gt;invoke($afterInvokes[$i]['interceptor']-&gt;getInterceptor(), $sharedContext);</sourceline>
        <sourceline coveredcount="-1">				 if($sharedContext instanceof InvocationContext &amp;&amp; $sharedContext-&gt;proceed)</sourceline>
        <sourceline coveredcount="-1"> 		 	 	    return $sharedContext-&gt;getReturn();</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if($sharedContext instanceof \InvocationContext)</sourceline>
        <sourceline coveredcount="-1">	  		    return $sharedContext-&gt;getReturn();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // No interceptors present for this method, invoke as it was called.</sourceline>
        <sourceline coveredcount="-1">	  		 return call_user_func_array(array($interceptedClass, $method), $args);</sourceline>
        <sourceline coveredcount="0">  	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	  /**</sourceline>
        <sourceline coveredcount="0">  	   * Magic PHP method executor used to intercept method calls.</sourceline>
        <sourceline coveredcount="0">  	   *</sourceline>
        <sourceline coveredcount="0">  	   * @param String $method The method being called</sourceline>
        <sourceline coveredcount="0">  	   * @param Array $args The arguments being passed</sourceline>
        <sourceline coveredcount="0">  	   * @return The result of the intercepted method invocation</sourceline>
        <sourceline coveredcount="0">  	   * @throws InterceptionException</sourceline>
        <sourceline coveredcount="0">  	   */</sourceline>
        <sourceline coveredcount="0">	  public function __call($method, $args) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         $class = new \ReflectionClass($this-&gt;interceptedTarget);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	         $sharedContext = null; // Stores a global InvocationContext that is shared among chained interceptors</sourceline>
        <sourceline coveredcount="-1">	         $invoked = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $interceptors = $this-&gt;getInterceptorsByMethod($class-&gt;getName(), $method, get_class($this));</sourceline>
        <sourceline coveredcount="-1">	  		 $aroundInvokes = $interceptors['AroundInvoke'];</sourceline>
        <sourceline coveredcount="-1">	  		 $afterInvokes = $interceptors['AfterInvoke'];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Execute #@AroundInvoke interceptor methods</sourceline>
        <sourceline coveredcount="-1">	  		 for($i=0; $i&lt;count($aroundInvokes); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		         if(!$sharedContext)</sourceline>
        <sourceline coveredcount="-1">  		            $sharedContext = new \InvocationContext($this-&gt;interceptedTarget, $method, $args, $aroundInvokes[$i]['interceptor']-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		     $sharedContext = $aroundInvokes[$i]['method']-&gt;invoke($aroundInvokes[$i]['interceptor']-&gt;getInterceptor(), $sharedContext);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		         // Only execute the intercepted target call if the InvocationContext has had its proceed() method invoked.</sourceline>
        <sourceline coveredcount="-1">		         if($sharedContext instanceof \InvocationContext &amp;&amp; $sharedContext-&gt;proceed) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">				    $m = $class-&gt;getMethod($sharedContext-&gt;getMethod());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">					// Invoke the intercepted call, capturing the return value</sourceline>
        <sourceline coveredcount="-1">					$sharedContext-&gt;setReturn($args ?</sourceline>
        <sourceline coveredcount="-1">					        $m-&gt;invokeArgs($this-&gt;interceptedTarget, $sharedContext-&gt;getParameters()) : $m-&gt;invoke($this-&gt;interceptedTarget));</sourceline>
        <sourceline coveredcount="-1">		         }</sourceline>
        <sourceline coveredcount="0">		         else {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		            // Interceptors that return a non-null value get the return value returned to the caller.</sourceline>
        <sourceline coveredcount="-1">		          	if($sharedContext !== null) return $sharedContext;</sourceline>
        <sourceline coveredcount="0">                }</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Execute #@AfterInvoke interceptor methods</sourceline>
        <sourceline coveredcount="-1">	  		 for($i=0; $i&lt;count($afterInvokes); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		     // If no #@AroundInvoke interceptions occurred, invoke the intercepted call, capturing the return value</sourceline>
        <sourceline coveredcount="-1"> 	 	   	     if(!$sharedContext) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		 	 	$sharedContext = new \InvocationContext($this-&gt;interceptedTarget, $method, $args, $afterInvokes[$i]['interceptor']-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="-1">     		 	 	$m = $class-&gt;getMethod($method);</sourceline>
        <sourceline coveredcount="-1">     		 	 	$sharedContext-&gt;setReturn($args ? $m-&gt;invokeArgs($this-&gt;interceptedTarget, $args) : $m-&gt;invoke($this-&gt;interceptedTarget));</sourceline>
        <sourceline coveredcount="-1">     		 	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">     		 	 $sharedContext = $afterInvokes[$i]['method']-&gt;invoke($afterInvokes[$i]['interceptor']-&gt;getInterceptor(), $sharedContext);</sourceline>
        <sourceline coveredcount="-1">				 if($sharedContext instanceof InvocationContext &amp;&amp; $sharedContext-&gt;proceed)</sourceline>
        <sourceline coveredcount="-1"> 		 	 	    return $sharedContext-&gt;getReturn();</sourceline>
        <sourceline coveredcount="-1">	  		 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 if($sharedContext instanceof \InvocationContext)</sourceline>
        <sourceline coveredcount="-1">	  		    return $sharedContext-&gt;getReturn();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // No interceptors present for this method, invoke as it was called.</sourceline>
        <sourceline coveredcount="-1">		     $m = $class-&gt;getMethod($method);</sourceline>
        <sourceline coveredcount="-1">		     return $args ? $m-&gt;invokeArgs($this-&gt;interceptedTarget, $args) : $m-&gt;invoke($this-&gt;interceptedTarget, $args);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">  	   * Returns a list of #@AroundInvoke and #@AfterInvoke interceptors that need to be executed for the specified method.</sourceline>
        <sourceline coveredcount="0">  	   * This method is declared as static so that it can be shared by both __call and __callstatic, as PHP will generate</sourceline>
        <sourceline coveredcount="0">  	   * an E_WARNING if a non-static method is called statically, however, not the other way around (static method is called</sourceline>
        <sourceline coveredcount="0">  	   * from within an instance).</sourceline>
        <sourceline coveredcount="0">  	   *</sourceline>
        <sourceline coveredcount="0">  	   * @param string $class The name of the target/intercepted class</sourceline>
        <sourceline coveredcount="0">  	   * @param string $method The name of the method to retrieve interceptors for</sourceline>
        <sourceline coveredcount="0">  	   * @return array An associative array containing AroundInvoke and AfterInvoke interceptor methods to execute</sourceline>
        <sourceline coveredcount="0">  	   * @static</sourceline>
        <sourceline coveredcount="0">  	   */</sourceline>
        <sourceline coveredcount="0">  	  private static function getInterceptorsByMethod($class, $method, $target) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	          // Serve from cache if present</sourceline>
        <sourceline coveredcount="-1">		      if($cacher = \AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		         $cacheKey = 'AGILEPHP_INTERCEPTORPROXY_GETINTERCEPTORS_' . $class . '_' . $method;</sourceline>
        <sourceline coveredcount="-1">	             if($cacher-&gt;exists($cacheKey)) return $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">		      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  	          $prehooks = array();</sourceline>
        <sourceline coveredcount="-1">	  		  $posthooks = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">  	          // Invoke interceptor if AgilePHP contains an Interception for this method call</sourceline>
        <sourceline coveredcount="-1">	  		  $interceptions = \AgilePHP::getInterceptions();</sourceline>
        <sourceline coveredcount="-1">		      for($i=0; $i&lt;count($interceptions); $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				  // Phar support</sourceline>
        <sourceline coveredcount="-1">				  if(strpos($interceptions[$i]-&gt;getClass(), 'phar://') !== false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">					 $className = preg_replace('/phar:\/\//', '', $interceptions[$i]-&gt;getClass());</sourceline>
        <sourceline coveredcount="-1">				     $nspieces = explode('/', $className);</sourceline>
        <sourceline coveredcount="-1">				     array_pop($nspieces);</sourceline>
        <sourceline coveredcount="-1">				     $namespace = implode('\\', $nspieces);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">			  		 $pieces = explode('/', $className);</sourceline>
        <sourceline coveredcount="-1">			  		 $className = array_pop($pieces);</sourceline>
        <sourceline coveredcount="-1">			  		 $fqcn = $namespace . '\\' . preg_replace('/\.php/', '', $className);</sourceline>
        <sourceline coveredcount="-1">				  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">				  // Parse methods annotated with #@AroundInvoke and #@AfterInvoke</sourceline>
        <sourceline coveredcount="-1">		     	  if(($interceptions[$i]-&gt;getClass() == $target || isset($fqcn) &amp;&amp; $fqcn == $target)</sourceline>
        <sourceline coveredcount="-1">		     	  			 &amp;&amp; $interceptions[$i]-&gt;getMethod() == $method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     			  $interceptorClass = new \AnnotatedClass($interceptions[$i]-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="-1">	     		 	  foreach($interceptorClass-&gt;getMethods() as $interceptorMethod) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     		 	 	 	  if($interceptorMethod-&gt;hasAnnotation('AroundInvoke'))</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 	     array_push($prehooks, array('method' =&gt; $interceptorMethod, 'interceptor' =&gt; $interceptions[$i]));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	     		 	 	 	  if($interceptorMethod-&gt;hasAnnotation('AfterInvoke'))</sourceline>
        <sourceline coveredcount="-1">	     		 	 	 	     array_push($posthooks, array('method' =&gt; $interceptorMethod, 'interceptor' =&gt; $interceptions[$i]));</sourceline>
        <sourceline coveredcount="-1">	     		 	 	   }</sourceline>
        <sourceline coveredcount="-1">   		  			 }</sourceline>
        <sourceline coveredcount="-1">		     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">		     $interceptors = array('AroundInvoke' =&gt; $prehooks, 'AfterInvoke' =&gt; $posthooks);</sourceline>
        <sourceline coveredcount="-1">		     if($cacher) $cacher-&gt;set($cacheKey, $interceptors);</sourceline>
        <sourceline coveredcount="-1">		     return $interceptors;</sourceline>
        <sourceline coveredcount="0">  	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Invokes class level interceptor #@AfterInvoke methods upon destruction.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __destruct() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         try {</sourceline>
        <sourceline coveredcount="-1">        	  		 $proxiedClass = get_class($this);</sourceline>
        <sourceline coveredcount="-1">        	  		 foreach(\AgilePHP::getInterceptions() as $interception) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        	  		 		  // Invoke class level interceptor #@AfterInvoke</sourceline>
        <sourceline coveredcount="-1">        		     		  if($interception-&gt;getClass() == $proxiedClass &amp;&amp;</sourceline>
        <sourceline coveredcount="-1">        		     		 	      !$interception-&gt;getMethod() &amp;&amp; !$interception-&gt;getProperty()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        	     		 	 	  $interceptorClass = new \AnnotatedClass($interception-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="-1">             	 	 	 		  foreach($interceptorClass-&gt;getMethods() as $interceptorMethod) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             	 	 	 				   if($interceptorMethod-&gt;hasAnnotation('AfterInvoke')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             		 	 	 		  	 	   $invocationCtx = new \InvocationContext($this-&gt;interceptedTarget, null, null, $interception-&gt;getInterceptor());</sourceline>
        <sourceline coveredcount="-1">        					              	   $interceptorMethod-&gt;invoke($interception-&gt;getInterceptor(), $invocationCtx);</sourceline>
        <sourceline coveredcount="-1">             		 	 	 		  	   }</sourceline>
        <sourceline coveredcount="-1">        	     		 	 	  }</sourceline>
        <sourceline coveredcount="-1">        		     		  }</sourceline>
        <sourceline coveredcount="-1">        	 		}</sourceline>
        <sourceline coveredcount="0">	         }</sourceline>
        <sourceline coveredcount="-1">	         catch(\Exception $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">	               Log::error('InterceptorProxy::__destruct ' . $e-&gt;getMessage());</sourceline>
        <sourceline coveredcount="-2">	               throw new \InterceptionException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">	         }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="Interceptor" methodcount="0" methodscovered="0" statementcount="1" statementscovered="1" totalcount="1" totalcovered="1">
      <sourcefile name="Interceptor.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/interception/Interceptor.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Annotation used to designate a class as an AgilePHP interceptor.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0">  * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Interceptor</sourceline>
        <sourceline coveredcount="0"> * class MyInterceptor { }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * // This is a class level interceptor that gets invoked just before MyInterceptorImpl is created.</sourceline>
        <sourceline coveredcount="0"> * #@MyInterceptor</sourceline>
        <sourceline coveredcount="0"> * class MyInterceptorImpl {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // This is a property level interceptor that gets invoked upon construction</sourceline>
        <sourceline coveredcount="0"> * 		 #@MyInterceptor</sourceline>
        <sourceline coveredcount="0"> * 		 private $foo;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // This is a method level interceptor that gets invoked before the method is called.</sourceline>
        <sourceline coveredcount="0"> * 		 #@MyInterceptor</sourceline>
        <sourceline coveredcount="0"> * 		 public function doSomething() { }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Interceptor</sourceline>
        <sourceline coveredcount="0"> * class MyInterceptor {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 // This interceptor accepts one parameter named 'param'</sourceline>
        <sourceline coveredcount="0"> * 		 public $param;</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * class MyInterceptorImpl {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 #@MyInterceptor(param = 'this is a parameter string value')</sourceline>
        <sourceline coveredcount="0"> * 		 public function doSomething() { }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 #@MyInterceptor(param = { 'this', 'key2' =&gt; 'is', 3 =&gt; 'an', 'key4' =&gt; 'array parameter value' })</sourceline>
        <sourceline coveredcount="0"> * 		 public function doSomething2() { }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 #@MyInterceptor(param = new MyClass())</sourceline>
        <sourceline coveredcount="0"> * 		 public function doSomething3() { }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		 #@MyInterceptor(param = MySingleton::getInstance())</sourceline>
        <sourceline coveredcount="0"> * 		 public function doSomething4() { }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="1" startclass="1">class Interceptor { }</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="InvocationContext" methodcount="13" methodscovered="10" statementcount="20" statementscovered="17" totalcount="33" totalcovered="27">
      <sourcefile name="InvocationContext.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/interception/InvocationContext.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Provides environment and method execution state when an interception occurs. This</sourceline>
        <sourceline coveredcount="0"> * is passed into an interceptor so it knows about the target class, method, parameters,</sourceline>
        <sourceline coveredcount="0"> * and the #@Interceptor instance which caused the interception.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class InvocationContext {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  private $target;</sourceline>
        <sourceline coveredcount="0">	  private $method;</sourceline>
        <sourceline coveredcount="0">	  private $parameters = array();</sourceline>
        <sourceline coveredcount="0">	  private $interceptor;</sourceline>
        <sourceline coveredcount="0">	  private $callee;</sourceline>
        <sourceline coveredcount="0">	  private $field;</sourceline>
        <sourceline coveredcount="0">	  private $return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public $proceed = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Initalizes the InvocationContext.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $target The instance which was intercepted</sourceline>
        <sourceline coveredcount="0">	   * @param String $method The name of the method which was intercepted</sourceline>
        <sourceline coveredcount="0">	   * @param array $parameters The method parameters which were intercepted</sourceline>
        <sourceline coveredcount="0">	   * @param Object $interceptor The interceptor instance which caused the interception</sourceline>
        <sourceline coveredcount="0">	   * @param String $field The name of the field/property which was intercepted</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct($target, $method, $parameters, $interceptor, $field = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="25">	  		 $this-&gt;target = $target;</sourceline>
        <sourceline coveredcount="25">	  		 $this-&gt;method = $method;</sourceline>
        <sourceline coveredcount="25">	  		 $this-&gt;parameters = $parameters;</sourceline>
        <sourceline coveredcount="25">	  		 $this-&gt;interceptor = $interceptor;</sourceline>
        <sourceline coveredcount="25">	  		 $this-&gt;field = $field;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // PHP stack state that caused the interception</sourceline>
        <sourceline coveredcount="25">	  		 $backtrace = debug_backtrace();</sourceline>
        <sourceline coveredcount="25">	  		 $this-&gt;callee = (isset($backtrace[2]) ? $backtrace[2] : $backtrace[1]);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the intercepted method.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The name of the intercepted method</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getMethod() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="24">	  		 return $this-&gt;method;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms the state of the method calls. This is used by interceptors</sourceline>
        <sourceline coveredcount="0">	   * to cause a different method to be executed than the one initially</sourceline>
        <sourceline coveredcount="0">	   * called.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $method The name of the method to invoke</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setMethod($method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;method = $method;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Transforms the state of method parameters. This is used by interceptors</sourceline>
        <sourceline coveredcount="0">	   * to cause a different set of parameters to be passed into the method</sourceline>
        <sourceline coveredcount="0">	   * being invoked.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param array $parameters An array of parameters to pass into the invoked method</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setParameters(array $parameters) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="17">	  		 $this-&gt;parameters = $parameters;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the parameters being passed into the intercepted method.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return An array containing each of the parameters being passed</sourceline>
        <sourceline coveredcount="0">	   * 		 to the intercepted method.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getParameters() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="17">	  		 return $this-&gt;parameters;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the intercepted target instance.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The intercepted target instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getTarget() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="16">	  		 return $this-&gt;target;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the intercepted target instance</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param Object $instance The intercepted target instance</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setTarget($instance) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 $this-&gt;target = $instance;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the instance of the interceptor annotation which caused the interception.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Interceptor The instance of the annotation which caused the interception</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getInterceptor() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 return $this-&gt;interceptor;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the callee PHP stack state. This provides information about the PHP file</sourceline>
        <sourceline coveredcount="0">	   * and calls that caused the interception.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getCallee() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="14">	  		 return $this-&gt;callee;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the name of the field if a property/field level annotation caused the interception.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return String The name of the class field.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getField() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">	  		 return $this-&gt;field;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the value which the intercepted method call returned</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed The value which the intercepted method call returned</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function setReturn($return) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">	  		 $this-&gt;return = $return;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns the value which the intercepted method call returned</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The value which the intercepted method call returned</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function getReturn() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">	  		 return $this-&gt;return;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Causes the intercepted invocation to continue, using the method and parameters</sourceline>
        <sourceline coveredcount="0">	   * contained in the state of the InvocationContext instance. If this method is not</sourceline>
        <sourceline coveredcount="0">	   * invoked during an interception, the interceptor will not execute the intercepted</sourceline>
        <sourceline coveredcount="0">	   * call. To disregard an intercepted call (not invoke it), simply do not call this</sourceline>
        <sourceline coveredcount="0">	   * method during the interception.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return The present state of the InvocationContext instance</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function proceed() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="24">	  		 $this-&gt;proceed = true;</sourceline>
        <sourceline coveredcount="24">	  		 return $this;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="AroundInvoke" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="AroundInvoke.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/interception/AroundInvoke.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Annotation which causes methods within an</sourceline>
        <sourceline coveredcount="0"> * interceptor (denoted by a class level #@Interceptor annotation)</sourceline>
        <sourceline coveredcount="0"> * to be invoked when an interceptoion occurs.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0">  * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Interceptor</sourceline>
        <sourceline coveredcount="0"> * class MyInterceptor {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@AroundInvoke</sourceline>
        <sourceline coveredcount="0"> * public function aMethodICanNameAnything(InvocationTarget $ic) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Inspect the invocation context for the call stack and state</sourceline>
        <sourceline coveredcount="0"> * 		  // of the application and perform some kind of aspect logic.</sourceline>
        <sourceline coveredcount="0"> * 		  //</sourceline>
        <sourceline coveredcount="0"> * 		  // If you call $ic-&gt;proceed(), the interceptor will return execution</sourceline>
        <sourceline coveredcount="0"> * 		  // back to "regular scheduled programming". If $ic-&gt;proceed() is not</sourceline>
        <sourceline coveredcount="0"> * 		  // called, the application will come to a close with the logic defined</sourceline>
        <sourceline coveredcount="0"> * 		  // in this interceptor.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@AroundInvoke</sourceline>
        <sourceline coveredcount="0"> * public function anotationCausesMeToBeInvoked(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // The #@AroundInvoke annotation causes methods within the interceptor</sourceline>
        <sourceline coveredcount="0"> * 		  // to be invoked. You can decorate as many methods with #@AroundInvoke</sourceline>
        <sourceline coveredcount="0"> * 		  // inside the class as you want.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class AroundInvoke { }</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="AfterInvoke" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="AfterInvoke.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/interception/AfterInvoke.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Annotation which causes methods within an interceptor</sourceline>
        <sourceline coveredcount="0"> * to be invoked AFTER an interception occurs.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0">  * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * #@Interceptor</sourceline>
        <sourceline coveredcount="0"> * class MyInterceptor {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@AfterInvoke</sourceline>
        <sourceline coveredcount="0"> * public function aMethodICanNameAnything(InvocationTarget $ic) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Inspect the invocation context for the call stack and state</sourceline>
        <sourceline coveredcount="0"> * 		  // of the application and perform some kind of aspect logic.</sourceline>
        <sourceline coveredcount="0"> * 		  //</sourceline>
        <sourceline coveredcount="0"> * 		  // If you call $ic-&gt;proceed(), the interceptor will return execution</sourceline>
        <sourceline coveredcount="0"> * 		  // back to "regular scheduled programming". If $ic-&gt;proceed() is not</sourceline>
        <sourceline coveredcount="0"> * 		  // called, the application will come to a close with the logic defined</sourceline>
        <sourceline coveredcount="0"> * 		  // in this interceptor.</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@AfterInvoke</sourceline>
        <sourceline coveredcount="0"> * public function anotationCausesMeToBeInvoked(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // The #@AfterInvoke annotation causes methods within the interceptor</sourceline>
        <sourceline coveredcount="0"> * 		  // to be invoked AFTER the intended/intercpeted call occurs.</sourceline>
        <sourceline coveredcount="0"> * 		  // You can decorate as many methods with #@AfterInvoke as you want</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class AfterInvoke { }</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="In" methodcount="1" methodscovered="1" statementcount="4" statementscovered="4" totalcount="5" totalcovered="5">
      <sourcefile name="In.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/interception/In.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP interceptor responsible for performing Dependency Injection (DI)</sourceline>
        <sourceline coveredcount="0"> * on class fields/properties.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyClass {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@In(class = new MyClass2())</sourceline>
        <sourceline coveredcount="0"> * public $myClasss;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * public function invokeMe() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  $this-&gt;myClass2-&gt;someMethod();</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyClass {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * #@In(class = MySingleton::getInstance())</sourceline>
        <sourceline coveredcount="0"> * public $mySingleton;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * public function invokeMe() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  $singleton = $this-&gt;mySingleton;</sourceline>
        <sourceline coveredcount="0"> * 		  $singleton::someMethod();</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="1" startclass="1">class In {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public $class;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function setValue(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 return $ic-&gt;getInterceptor()-&gt;class;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="InterceptorFilter" methodcount="1" methodscovered="1" statementcount="41" statementscovered="41" totalcount="42" totalcovered="42">
      <sourcefile name="InterceptorFilter.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/interception/InterceptorFilter.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Filters the specified class for interceptor annotations. If any interceptor</sourceline>
        <sourceline coveredcount="0"> * annotations are found, an InterceptorProxy instance is created for the specified</sourceline>
        <sourceline coveredcount="0"> * class and each interceptor is loaded in the order they were implemented.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class InterceptorFilter {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function __construct($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">	         AnnotationParser::parse($class);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 // Process class level annotations</sourceline>
        <sourceline coveredcount="20">			 $classAnnotations = Annotation::getClassAsArray($class);</sourceline>
        <sourceline coveredcount="20">	  	     if(count($classAnnotations)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">                foreach($classAnnotations as $annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">			  	  		$annote = new AnnotatedClass($annotation);</sourceline>
        <sourceline coveredcount="3">				   	   	if($annote-&gt;hasAnnotation('Interceptor')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">				   	   	   $interception = new Interception($class, null, null, $annotation);</sourceline>
        <sourceline coveredcount="2">				   	   	   $interception-&gt;createInterceptorProxy($interception-&gt;createInterceptedTarget());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">				   	   	   AgilePHP::addInterception($interception);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">				   	   	   if($interception-&gt;isStatic()) $class::__initstatic();</sourceline>
        <sourceline coveredcount="2">				   	   	}</sourceline>
        <sourceline coveredcount="3">				 }</sourceline>
        <sourceline coveredcount="3">	  	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     // Process property/field level annotations</sourceline>
        <sourceline coveredcount="20">	  	     $annotatedProperties = Annotation::getPropertiesAsArray($class);</sourceline>
        <sourceline coveredcount="20">		 	 if(count($annotatedProperties)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">				foreach($annotatedProperties as $fieldName =&gt; $fieldAnnotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">				     foreach($fieldAnnotation as $annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">				  	   		 $annote = new AnnotatedClass($annotation);</sourceline>
        <sourceline coveredcount="3">					   	   	 if($annote-&gt;hasAnnotation('Interceptor')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">					   	   	  	$interception = new Interception($class, null, $fieldName, $annotation);</sourceline>
        <sourceline coveredcount="2">					   	   	  	$interception-&gt;createInterceptorProxy($interception-&gt;createInterceptedTarget());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">					   	   	  	AgilePHP::addInterception($interception);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">					   	   	  	if($interception-&gt;isStatic()) $class::__initstatic();</sourceline>
        <sourceline coveredcount="2">					   	   	  }</sourceline>
        <sourceline coveredcount="3">					 }</sourceline>
        <sourceline coveredcount="3">				 }</sourceline>
        <sourceline coveredcount="3">	  	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  	     // Process method level annotations</sourceline>
        <sourceline coveredcount="20">			 $annotatedMethods = Annotation::getMethodsAsArray($class);</sourceline>
        <sourceline coveredcount="20">		 	 if(count($annotatedMethods)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">				foreach($annotatedMethods as $methodName =&gt; $methodAnnotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">				     foreach($methodAnnotation as $annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">				  	   		 $annote = new AnnotatedClass($annotation);</sourceline>
        <sourceline coveredcount="5">					   	   	 if($annote-&gt;hasAnnotation('Interceptor')) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">					   	   	  	$interception = new Interception($class, $methodName, null, $annotation);</sourceline>
        <sourceline coveredcount="4">					   	   	  	$interception-&gt;createInterceptorProxy($interception-&gt;createInterceptedTarget());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">					   	   	  	AgilePHP::addInterception($interception);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">					   	   	  	if($interception-&gt;isStatic()) $class::__initstatic();</sourceline>
        <sourceline coveredcount="4">					   	   	 }</sourceline>
        <sourceline coveredcount="5">					 }</sourceline>
        <sourceline coveredcount="5">				 }</sourceline>
        <sourceline coveredcount="5">	  	     }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="InterceptionException" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="InterceptionException.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/interception/InterceptionException.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Exceptions thrown by the Interception package</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.interception</sourceline>
        <sourceline coveredcount="0"> * @throws InterceptionException</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class InterceptionException extends FrameworkException { }</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.form" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
    <class name="RequestParam" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="RequestParam.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/form/RequestParam.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.form</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP interceptor responsible for populating class properties with</sourceline>
        <sourceline coveredcount="0"> * HTTP POST variables (gotten from RequestScope).</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.form</sourceline>
        <sourceline coveredcount="0"> * &lt;code&gt;</sourceline>
        <sourceline coveredcount="0"> * class MyFormProcessor {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * // Defaults to the name of the property/field</sourceline>
        <sourceline coveredcount="0"> * #@RequestParam</sourceline>
        <sourceline coveredcount="0"> * public $fname;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * // Optionally, we can specify the name of the input element</sourceline>
        <sourceline coveredcount="0"> * #@RequestParam(name = 'email')</sourceline>
        <sourceline coveredcount="0"> * public $emailaddress;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * // Optionally, we can also specify no sanitation</sourceline>
        <sourceline coveredcount="0"> * #@RequestParam(name = 'password', sanitize = false)</sourceline>
        <sourceline coveredcount="0"> * public $plainTextPassword;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * public function showEmail() {</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Displays the first name entered in &lt;input name="fname"/&gt;</sourceline>
        <sourceline coveredcount="0"> * 		  echo $this-&gt;fname;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Displays the email address entered in &lt;input name="email"/&gt;</sourceline>
        <sourceline coveredcount="0"> * 		  echo $this-&gt;emailaddress;</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * 		  // Displays a plain text password as entered in &lt;input type="password" name="password"/&gt;</sourceline>
        <sourceline coveredcount="0"> * 		  echo $this-&gt;plainTextPassword;</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * }</sourceline>
        <sourceline coveredcount="0"> * &lt;/code&gt;</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">#@Interceptor</sourceline>
        <sourceline coveredcount="0" startclass="1">class RequestParam {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * The HTML input name to grab the value from</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var String Optional HTML input name to grab the value from. Defaults to the name of the annotated property.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $name;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Boolean flag indicating whether or not to sanitize the input. (Default is to sanitize all input)</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var bool True to sanitize the form input, false to grab the raw data. (Default is sanitize)</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $sanitize = true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Boolean flag indicating whether or not the field is required. Defaults to false (not required).</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @var bool True if required, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public $required = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Sets the annotated property value with the HTML input value</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param InvocationContext $ic The InvocationContext of the intercepted call</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  #@AroundInvoke</sourceline>
        <sourceline coveredcount="0">	  public function setFormValue(InvocationContext $ic) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if($_SERVER['REQUEST_METHOD'] == 'POST') {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	$request = Scope::getRequestScope();</sourceline>
        <sourceline coveredcount="0">	  		 	$name = ($this-&gt;name) ? $ic-&gt;getInterceptor()-&gt;name : $ic-&gt;getField();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	if($this-&gt;required &amp;&amp; !$request-&gt;get($name))</sourceline>
        <sourceline coveredcount="0">	  		 	   throw new FrameworkException($name . ' is required');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 	return ($ic-&gt;getInterceptor()-&gt;sanitize) ? $request-&gt;getSanitized($name) : $request-&gt;get($name);</sourceline>
        <sourceline coveredcount="0">	  		 }</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.validator" methodcount="14" methodscovered="5" statementcount="10" statementscovered="10" totalcount="24" totalcovered="15">
    <class name="LengthValidator" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="LengthValidator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/LengthValidator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates values to ensure minimum length requirements are met</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class LengthValidator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return strlen($this-&gt;data) &gt; 0;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="IPv6Validator" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="IPv6Validator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/IPv6Validator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates IPv4 addresses.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class IPv6Validator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Validates the specified data by ensuring it is a valid IP address.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the specified data is a valid IP address, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return filter_var($this-&gt;data, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="StrongPasswordValidator" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="StrongPasswordValidator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/StrongPasswordValidator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates password values to ensure they meet minimum strong password policy.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class StrongPasswordValidator extends PasswordValidator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Confirms password fit the following criteria:</sourceline>
        <sourceline coveredcount="0">	   * 1 upper case letter</sourceline>
        <sourceline coveredcount="0">	   * 1 lower case letter</sourceline>
        <sourceline coveredcount="0">	   * 1 number or special character</sourceline>
        <sourceline coveredcount="0">	   * at least 7 characters in length</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return Boolean True if the password meets the criteria, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 if($this-&gt;size &amp;&amp; (strlen($this-&gt;data) &lt; $this-&gt;size)) return false;</sourceline>
        <sourceline coveredcount="0">	  		 return preg_match('/(?=^.{7,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$/', $this-&gt;data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ObjectValidator" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="ObjectValidator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/ObjectValidator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates object values</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class ObjectValidator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return is_object($this-&gt;data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="EmailValidator" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="EmailValidator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/EmailValidator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates email addresses by checking its syntax and checking the domain</sourceline>
        <sourceline coveredcount="0"> * for valid A and MX records.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class EmailValidator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Validates an email address by checking its syntax and performing</sourceline>
        <sourceline coveredcount="0">	   * and DNS lookup on the domain.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param String $email The email address to validate</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the email address is considered valid, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	         if(!filter_var($this-&gt;data, FILTER_VALIDATE_EMAIL)) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   			 $index = strrpos($this-&gt;data, '@');</sourceline>
        <sourceline coveredcount="0">   			 $domain = substr($this-&gt;data, $index + 1);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      		 if(!checkdnsrr($domain, "MX") || checkdnsrr($domain, "A")) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">   			 return true;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="IPv4Validator" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="IPv4Validator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/IPv4Validator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates IPv4 addresses.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class IPv4Validator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Validates the specified data by ensuring it is a valid IP address.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the specified data is a valid IP address, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return filter_var($this-&gt;data, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="BooleanValidator" methodcount="1" methodscovered="1" statementcount="2" statementscovered="2" totalcount="3" totalcovered="3">
      <sourcefile name="BooleanValidator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/BooleanValidator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates boolean values</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class BooleanValidator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Validates the data by ensuring its either a boolean true/false value</sourceline>
        <sourceline coveredcount="0">       * or is a 1/0.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">	  		 return is_bool($this-&gt;data) || $this-&gt;data == 1 || $this-&gt;data == 0;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="DateValidator" methodcount="1" methodscovered="1" statementcount="2" statementscovered="2" totalcount="3" totalcovered="3">
      <sourcefile name="DateValidator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/DateValidator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates date values</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class DateValidator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 return (strtotime($this-&gt;data) === false) ? false : true;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="NumberValidator" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="NumberValidator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/NumberValidator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates data to ensure the specified value is either a whole number or floating decimal.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class NumberValidator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Validates a number by ensuring it is either an int or float.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to validate</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if validation is successful, false otherwise</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return is_numeric($this-&gt;data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="StringValidator" methodcount="1" methodscovered="1" statementcount="2" statementscovered="2" totalcount="3" totalcovered="3">
      <sourcefile name="StringValidator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/StringValidator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates string data</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class StringValidator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Returns boolean indicator based on whether or not the specified data</sourceline>
        <sourceline coveredcount="0">	   * is a string.</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @return bool True if the data is a string, false otherwise.</sourceline>
        <sourceline coveredcount="0">	   * 			  NOTE: Empty strings are NOT considered valid.</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">   			 return is_string($this-&gt;data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="FloatValidator" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="FloatValidator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/FloatValidator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates floating point decimal values</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class FloatValidator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return is_float($this-&gt;data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="PasswordValidator" methodcount="2" methodscovered="2" statementcount="4" statementscovered="4" totalcount="6" totalcovered="6">
      <sourcefile name="PasswordValidator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/PasswordValidator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates password values to ensure they meet minimum password policy.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class PasswordValidator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  protected $size;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  /**</sourceline>
        <sourceline coveredcount="0">	   * Creates a new PasswordValidator</sourceline>
        <sourceline coveredcount="0">	   *</sourceline>
        <sourceline coveredcount="0">	   * @param mixed $data The data to validate</sourceline>
        <sourceline coveredcount="0">	   * @param int $size Optional length to require. Defaults to 7.</sourceline>
        <sourceline coveredcount="0">	   * @return void</sourceline>
        <sourceline coveredcount="0">	   */</sourceline>
        <sourceline coveredcount="0">	  public function __construct($data, $size = 7) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 $this-&gt;data = $data;</sourceline>
        <sourceline coveredcount="10">	  		 $this-&gt;size = $size;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">	  		 return ($this-&gt;size &amp;&amp; (strlen($this-&gt;data) &lt; $this-&gt;size)) ? false : true;</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="1">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="ArrayValidator" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="ArrayValidator.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/validator/ArrayValidator.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Validates array values</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.validator</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class ArrayValidator extends Validator {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  public function validate() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	  		 return is_array($this-&gt;data);</sourceline>
        <sourceline coveredcount="0">	  }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
  <package name="com.makeabyte.agilephp.annotation" methodcount="36" methodscovered="23" statementcount="342" statementscovered="281" totalcount="378" totalcovered="304">
    <class name="AnnotatedClass" methodcount="9" methodscovered="7" statementcount="62" statementscovered="47" totalcount="71" totalcovered="54">
      <sourcefile name="AnnotatedClass.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/annotation/AnnotatedClass.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.annotation</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Extends the PHP ReflectionClass to provide details about class</sourceline>
        <sourceline coveredcount="0"> * level AgilePHP annotations.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.annotation</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class AnnotatedClass extends ReflectionClass {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private $annotations = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Inializes the AnnotatedClass by parsing the passed class file for</sourceline>
        <sourceline coveredcount="0">       * AgilePHP annotations. Uses AgilePHP CacheProvider if enabled.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param mixed $class The name or instance of the class to inspect</sourceline>
        <sourceline coveredcount="0">       * @return AnnotatedClass</sourceline>
        <sourceline coveredcount="0">       * @throws AnnotationException</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function __construct($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             try {</sourceline>
        <sourceline coveredcount="29">                   parent::__construct($class);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="29">                   if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                      $cacheKey = 'AGILEPHP_ANNOTATEDCLASS_' . parent::getName();</sourceline>
        <sourceline coveredcount="-1">                      if($cacher-&gt;exists($cacheKey)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                         $this-&gt;annotations = $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">                         return;</sourceline>
        <sourceline coveredcount="-2">                      }</sourceline>
        <sourceline coveredcount="-1">                   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="29">                   if(!$this-&gt;annotations = AnnotationParser::getClassAnnotations($this)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">                      AnnotationParser::parse(parent::getName());</sourceline>
        <sourceline coveredcount="3">                      $this-&gt;annotations = AnnotationParser::getClassAnnotations($this);</sourceline>
        <sourceline coveredcount="3">                   }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="29">                   if(isset($cacher)) $cacher-&gt;set($cacheKey, $this-&gt;annotations);</sourceline>
        <sourceline coveredcount="0">               }</sourceline>
        <sourceline coveredcount="29">               catch(ReflectionException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">                     throw new AnnotationException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">               }</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns boolean indicator based on whether or not there are any annotations present.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return True if the class has any class level annotations. False if not.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function isAnnotated() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">             return count($this-&gt;annotations) &amp;&amp; isset($this-&gt;annotations[0]) ? true : false;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Checks the class for the presence of a class level annotation.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $annotation The name of the annotation to confirm.</sourceline>
        <sourceline coveredcount="0">       * @return True if the annotation is present, false otherwise.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function hasAnnotation($annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">             if(!$this-&gt;isAnnotated()) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">             foreach($this-&gt;annotations as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">                 $class = new parent($annote);</sourceline>
        <sourceline coveredcount="5">                 if($class-&gt;getName() == $annotation)</sourceline>
        <sourceline coveredcount="5">                    return true;</sourceline>
        <sourceline coveredcount="1">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             return false;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns all class level annotations. If a name is specified</sourceline>
        <sourceline coveredcount="0">       * only annotations which match the specified name will be returned,</sourceline>
        <sourceline coveredcount="0">       * otherwise all annotations are returned.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $name Optional annotation name to filter out. Default is return all</sourceline>
        <sourceline coveredcount="0">       *               annotations.</sourceline>
        <sourceline coveredcount="0">       * @return An array of class level annotations or false of no annotations could</sourceline>
        <sourceline coveredcount="0">       *          be found.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getAnnotations($name = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             if($name != null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                $annotations = array();</sourceline>
        <sourceline coveredcount="-1">                foreach($this-&gt;annotations as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                    $class = new parent($annote);</sourceline>
        <sourceline coveredcount="-1">                    if($class-&gt;getName() == $annotation)</sourceline>
        <sourceline coveredcount="-1">                       array_push($annotations, $annote);</sourceline>
        <sourceline coveredcount="-1">                }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                if(!count($annotations)) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                return $annotations;</sourceline>
        <sourceline coveredcount="-2">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             return $this-&gt;annotations;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Gets an annotation instance by name. If the named annotation is found more</sourceline>
        <sourceline coveredcount="0">       * than once, an array of annotations are returned.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $name The name of the annotation</sourceline>
        <sourceline coveredcount="0">       * @return The annotation instance or false if the annotation was not found</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getAnnotation($annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             $annotations = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             foreach($this-&gt;annotations as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                 $class = new parent($annote);</sourceline>
        <sourceline coveredcount="1">                 if($class-&gt;getName() == $annotation)</sourceline>
        <sourceline coveredcount="1">                    array_push($annotations, $annote);</sourceline>
        <sourceline coveredcount="1">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             if(!count($annotations)) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             return (count($annotations) &gt; 1) ? $annotations : $annotations[0];</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns an AnnotatedMethod instance for the specified method name.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $name The method name</sourceline>
        <sourceline coveredcount="0">       * @return AnnotatedMethod</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getMethod($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">               return new AnnotatedMethod(parent::getName(), $name);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns an array of AnnotatedMethod objects, one for each method in the</sourceline>
        <sourceline coveredcount="0">       * class which contains an annotation.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $filter The filter</sourceline>
        <sourceline coveredcount="0">       * @return Array of AnnotatedMethod objects.</sourceline>
        <sourceline coveredcount="0">       * @see http://php.net/manual/en/reflectionclass.getmethods.php</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getMethods($filter = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="26">             if(!$filter)</sourceline>
        <sourceline coveredcount="26">                $filter = ReflectionMethod::IS_PUBLIC + ReflectionMethod::IS_PROTECTED + ReflectionMethod::IS_PRIVATE;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="26">             $methods = array();</sourceline>
        <sourceline coveredcount="26">             foreach(parent::getMethods($filter) as $method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="26">                 $m = new AnnotatedMethod(parent::getName(), $method-&gt;name);</sourceline>
        <sourceline coveredcount="26">                 if($m-&gt;isAnnotated())</sourceline>
        <sourceline coveredcount="26">                    array_push($methods, $m);</sourceline>
        <sourceline coveredcount="26">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="26">             return $methods;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns an AnnotatedProperty instance for the specified property name.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $name The name of the property</sourceline>
        <sourceline coveredcount="0">       * @return AnnotatedProperty</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getProperty($name) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             return new AnnotatedProperty(parent::getName(), $name);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns an array of AnnotatedProperty objects; one for each property</sourceline>
        <sourceline coveredcount="0">       * in the class which contains an annotation.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $filter The optional filter</sourceline>
        <sourceline coveredcount="0">       * @return Array of AnnotatedProperty objects.</sourceline>
        <sourceline coveredcount="0">       * @see http://www.php.net/manual/en/reflectionclass.getproperties.php</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getProperties($filter = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             if(!$filter)</sourceline>
        <sourceline coveredcount="1">                $filter = ReflectionProperty::IS_PUBLIC + ReflectionProperty::IS_PROTECTED + ReflectionProperty::IS_PRIVATE;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             $properties = array();</sourceline>
        <sourceline coveredcount="1">             foreach(parent::getProperties($filter) as $property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                 $p = new AnnotatedProperty(parent::getName(), $property-&gt;name);</sourceline>
        <sourceline coveredcount="1">                 if($p-&gt;isAnnotated())</sourceline>
        <sourceline coveredcount="1">                    array_push($properties, $p);</sourceline>
        <sourceline coveredcount="1">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             return $properties;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="AnnotationParser" methodcount="14" methodscovered="8" statementcount="199" statementscovered="177" totalcount="213" totalcovered="185">
      <sourcefile name="AnnotationParser.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/annotation/AnnotationParser.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.annotation</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Responsible for parsing and returning annotation details about PHP classes.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc.</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.annotation</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class AnnotationParser {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private static $classes = array();</sourceline>
        <sourceline coveredcount="0">      private static $properties = array();</sourceline>
        <sourceline coveredcount="0">      private static $methods = array();</sourceline>
        <sourceline coveredcount="0">      private static $sources = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private static $filename;</sourceline>
        <sourceline coveredcount="0">      private static $cacher;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private function __construct() { }</sourceline>
        <sourceline coveredcount="0">      private function __clone() { }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Breaks the class file into PHP tokens and extracts all interface,</sourceline>
        <sourceline coveredcount="0">       * class, method, and property level annotations. Uses AgilePHP</sourceline>
        <sourceline coveredcount="0">       * CacheProvider if enabled.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $class The name of the class to parse</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function parse($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">             self::$cacher = AgilePHP::getCacher();</sourceline>
        <sourceline coveredcount="20">             self::$filename = $class . '.php';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // First level cache - non-persistent</sourceline>
        <sourceline coveredcount="20">             if(in_array(self::$filename, self::$sources)) return;</sourceline>
        <sourceline coveredcount="20">             array_push(self::$sources, self::$filename);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             // Second level cache - persistent</sourceline>
        <sourceline coveredcount="20">             if(self::$cacher) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                $cacheKey = 'AGILEPHP_ANNOTATIONPARSER_PARSE_' . $class;</sourceline>
        <sourceline coveredcount="-1">                if(self::$cacher-&gt;exists($cacheKey)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                   $annotes = self::$cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                   self::$classes[$class] = $annotes-&gt;classes;</sourceline>
        <sourceline coveredcount="-1">                   self::$methods[$class] = $annotes-&gt;methods;</sourceline>
        <sourceline coveredcount="-1">                   self::$properties[$class] = $annotes-&gt;properties;</sourceline>
        <sourceline coveredcount="-1">                   return;</sourceline>
        <sourceline coveredcount="-2">                }</sourceline>
        <sourceline coveredcount="-1">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">             $comments = array();</sourceline>
        <sourceline coveredcount="20">             $tokens = token_get_all(self::getSourceCode($class));</sourceline>
        <sourceline coveredcount="20">             $tcount = count($tokens);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">             for($i=0; $i&lt;$tcount; $i++) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                 if(is_array($tokens[$i])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                    $ccount = count($comments);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                    switch($tokens[$i][0]) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                           case T_COMMENT:</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">                               if(strpos($tokens[$i][1], '#@') === 0)</sourceline>
        <sourceline coveredcount="10">                                  array_push($comments, $tokens[$i][1]);</sourceline>
        <sourceline coveredcount="10">                               break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                           case T_CLASS:</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                                 if($ccount) {</sourceline>
        <sourceline coveredcount="3">                                    self::$classes[$class] = self::parseAnnotations($comments);</sourceline>
        <sourceline coveredcount="3">                                    $comments = array();</sourceline>
        <sourceline coveredcount="3">                                 }</sourceline>
        <sourceline coveredcount="20">                                 break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                           case T_VARIABLE:</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">                                if($ccount) {</sourceline>
        <sourceline coveredcount="2">                                   $key = str_replace('$', '', $tokens[$i][1]);</sourceline>
        <sourceline coveredcount="2">                                   self::$properties[$class][ $key ] = self::parseAnnotations($comments);</sourceline>
        <sourceline coveredcount="2">                                   $comments = array();</sourceline>
        <sourceline coveredcount="2">                                }</sourceline>
        <sourceline coveredcount="18">                                break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                           case T_FUNCTION:</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="19">                                if($ccount) {</sourceline>
        <sourceline coveredcount="4">                                   for($j=$i; $j&lt;$tcount; $j++) {</sourceline>
        <sourceline coveredcount="4">                                       if(is_array($tokens[$j])) {</sourceline>
        <sourceline coveredcount="4">                                          if($tokens[$j][0] == T_STRING) {</sourceline>
        <sourceline coveredcount="4">                                              self::$methods[$class][$tokens[$j][1]] = self::parseAnnotations($comments);</sourceline>
        <sourceline coveredcount="4">                                              $comments = array();</sourceline>
        <sourceline coveredcount="4">                                              break;</sourceline>
        <sourceline coveredcount="-2">                                          }</sourceline>
        <sourceline coveredcount="4">                                       }</sourceline>
        <sourceline coveredcount="4">                                   }</sourceline>
        <sourceline coveredcount="4">                                }</sourceline>
        <sourceline coveredcount="19">                                break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                           case T_STATIC:</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="13">                               if(isset($comments[0])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                                  // Static methods can be defined using the following:</sourceline>
        <sourceline coveredcount="0">                                  // "context" static function name()</sourceline>
        <sourceline coveredcount="0">                                  // static "context" function name()</sourceline>
        <sourceline coveredcount="0">                                  // static function name()</sourceline>
        <sourceline coveredcount="0">                                  // The following for loop makes sure all possibilities are accounted for</sourceline>
        <sourceline coveredcount="0">                                  // and the function/method name is parsed.</sourceline>
        <sourceline coveredcount="0">                                  //</sourceline>
        <sourceline coveredcount="0">                                  // Properties/fields are also parsed</sourceline>
        <sourceline coveredcount="2">                                  $count = 0;</sourceline>
        <sourceline coveredcount="2">                                  for($j=$i; $j&lt;$tcount; $j++) {</sourceline>
        <sourceline coveredcount="2">                                      $count++;</sourceline>
        <sourceline coveredcount="2">                                      if(is_array($tokens[$i])) {</sourceline>
        <sourceline coveredcount="2">                                         if($tokens[$i+$count][0] == T_FUNCTION) {</sourceline>
        <sourceline coveredcount="2">                                            self::$methods[$class][$tokens[$i+$count+2][1]] = self::parseAnnotations($comments);</sourceline>
        <sourceline coveredcount="2">                                            $comments = array();</sourceline>
        <sourceline coveredcount="2">                                            break;</sourceline>
        <sourceline coveredcount="-2">                                         }</sourceline>
        <sourceline coveredcount="2">                                         elseif(isset($tokens[$i+$count][1]) &amp;&amp; strpos($tokens[$i+$count][1], '$') === 0) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                                             $key = str_replace('$', '', $tokens[$i+$count][1]);</sourceline>
        <sourceline coveredcount="2">                                             self::$properties[$class][$key] = self::parseAnnotations($comments);</sourceline>
        <sourceline coveredcount="2">                                             $comments = array();</sourceline>
        <sourceline coveredcount="2">                                             break;</sourceline>
        <sourceline coveredcount="-2">                                         }</sourceline>
        <sourceline coveredcount="2">                                      }</sourceline>
        <sourceline coveredcount="2">                                  }</sourceline>
        <sourceline coveredcount="2">                               }</sourceline>
        <sourceline coveredcount="13">                               break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                            /** @todo Support annotated interfaces */</sourceline>
        <sourceline coveredcount="0">                            // case T_INTERFACE:</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                            case T_DOC_COMMENT:</sourceline>
        <sourceline coveredcount="20">                            case T_WHITESPACE:</sourceline>
        <sourceline coveredcount="20">                            case T_PUBLIC:</sourceline>
        <sourceline coveredcount="20">                            case T_PROTECTED:</sourceline>
        <sourceline coveredcount="20">                            case T_PRIVATE:</sourceline>
        <sourceline coveredcount="20">                            case T_ABSTRACT:</sourceline>
        <sourceline coveredcount="20">                            case T_FINAL:</sourceline>
        <sourceline coveredcount="20">                            case T_VAR:</sourceline>
        <sourceline coveredcount="20">                                break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                            default:</sourceline>
        <sourceline coveredcount="20">                                $comments = array();</sourceline>
        <sourceline coveredcount="20">                                break;</sourceline>
        <sourceline coveredcount="20">                        }</sourceline>
        <sourceline coveredcount="20">                    }</sourceline>
        <sourceline coveredcount="0">                    else {</sourceline>
        <sourceline coveredcount="20">                        $comments = array();</sourceline>
        <sourceline coveredcount="0">                    }</sourceline>
        <sourceline coveredcount="20">                }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">                if(self::$cacher) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                   $annotes = new stdClass;</sourceline>
        <sourceline coveredcount="-1">                   $annotes-&gt;classes = isset(self::$classes[$class]) ? self::$classes[$class] : array();</sourceline>
        <sourceline coveredcount="-1">                   $annotes-&gt;methods = isset(self::$methods[$class]) ? self::$methods[$class] : array();</sourceline>
        <sourceline coveredcount="-1">                   $annotes-&gt;properties = isset(self::$properties[$class]) ? self::$properties[$class] : array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                   self::$cacher-&gt;set($cacheKey, $annotes);</sourceline>
        <sourceline coveredcount="-1">             }</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns an array of class level annotations or false if no class</sourceline>
        <sourceline coveredcount="0">       * level annotations are present.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param AnnotatedClass $class An instance of the annotated class to inspect.</sourceline>
        <sourceline coveredcount="0">       * @return Array of class level annotations or false if no annotations</sourceline>
        <sourceline coveredcount="0">       *          are present.</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getClassAnnotations(AnnotatedClass $class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="29">             return isset(self::$classes[$class-&gt;getName()]) ? self::$classes[$class-&gt;getName()] : false;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns an array of property level annotations or false if no annotations</sourceline>
        <sourceline coveredcount="0">       * are present for the specified property.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param AnnotatedProperty $property The AnnotatedProperty instance to inspect.</sourceline>
        <sourceline coveredcount="0">       * @return Array of property level annotations</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getPropertyAnnotations(AnnotatedProperty $property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             $class = $property-&gt;getDeclaringClass()-&gt;getName();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">  		 	 if(isset(self::$properties[$class])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		  		foreach(self::$properties[$class] as $name =&gt; $value)</sourceline>
        <sourceline coveredcount="1">		  		  		if($name == $property-&gt;getName())</sourceline>
        <sourceline coveredcount="1">		  		 		   return $value;</sourceline>
        <sourceline coveredcount="1">  		 	 }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">  		 	 return false;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns an array of method level annotations or false if no annotations</sourceline>
        <sourceline coveredcount="0">       * are found for the specified method.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param AnnotatedMethod $method The AnnotatedMethod instance to inspect.</sourceline>
        <sourceline coveredcount="0">       * @return Array of method level annotations or false if no annotations are present.</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getMethodAnnotations(AnnotatedMethod $method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="27">             $class = $method-&gt;getDeclaringClass()-&gt;getName();</sourceline>
        <sourceline coveredcount="27">	  	     if(isset(self::$methods[$class])) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="27">	  	     	foreach(self::$methods[$class] as $name =&gt; $value)</sourceline>
        <sourceline coveredcount="27">			  		    if($name == $method-&gt;getName())</sourceline>
        <sourceline coveredcount="27">			  		       return $value;</sourceline>
        <sourceline coveredcount="24">	  	     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">		  	 return false;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns an array of class level annotations</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $class The name of the class to inspect</sourceline>
        <sourceline coveredcount="0">       * @return Array of class level annotations, void otherwise</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getClassAnnotationsAsArray($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">             if(array_key_exists($class, self::$classes))</sourceline>
        <sourceline coveredcount="20">	  		 	return self::$classes[$class];</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns an array of method level annotations for the specified class</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $class The name of the class to inspect</sourceline>
        <sourceline coveredcount="0">       * @param String $method The name of the method to inspect</sourceline>
        <sourceline coveredcount="0">       * @return Array of method level annotations, void otherwise</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getMethodAnnotationsAsArray($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">             if(array_key_exists($class, self::$methods))</sourceline>
        <sourceline coveredcount="20">                return self::$methods[$class];</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns an array of property level annotations for the specified class.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $class The name of the class to inspect</sourceline>
        <sourceline coveredcount="0">       * @return Array of property level annotations, void otherwise</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public static function getPropertyAnnotationsAsArray($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="20">             if(array_key_exists($class, self::$properties))</sourceline>
        <sourceline coveredcount="20">	  		    return self::$properties[$class];</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Parses code extracted from the tokenized PHP file for the presence of</sourceline>
        <sourceline coveredcount="0">       * AgilePHP annotations.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $text The text/code string to parse</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      private static function parseAnnotations(array $items) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">              $annotations = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">              foreach($items as $text) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                  // Extract the annotation string including the name and property/value declaration</sourceline>
        <sourceline coveredcount="5">                  preg_match_all('/^\\s*#@(.*)/', $text, $annotes);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">                  if(!count($annotes)) return;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">                     foreach($annotes[1] as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                             // Extract the annotation name</sourceline>
        <sourceline coveredcount="5">                             preg_match('/\w+/', $annote, $className);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                             // Create instance of the annotation class or create a new instance of stdClass</sourceline>
        <sourceline coveredcount="0">                             // if the annotation class could not be parsed</sourceline>
        <sourceline coveredcount="5">                             $oAnnotation = new $className[0]();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                             // Extract name/value pair portion of the annotation</sourceline>
        <sourceline coveredcount="5">                             preg_match_all('/\((.*=.*\(?\)?)\)/', $annote, $props);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                             // Extract arrays</sourceline>
        <sourceline coveredcount="5">                             if(count($props) &amp;&amp; count($props[1]))</sourceline>
        <sourceline coveredcount="5">                                preg_match_all('/[_a-zA-Z]+[0-9_]?\\s?=\s?{+?.*?}+\\s?,?/', $props[1][0], $arrays);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                              // Extract other annotations</sourceline>
        <sourceline coveredcount="0">                              // @todo Support child annotations</sourceline>
        <sourceline coveredcount="0">                              //preg_match_all('/@(.*)?,?/', $props[1][0], $childAnnotes);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                              // Add arrays to annotation instance and remove it from the properties</sourceline>
        <sourceline coveredcount="5">                              if(isset($arrays[0]) &amp;&amp; $arrays[0] != null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                                 $result = self::parseKeyArrayValuePairs($oAnnotation, $arrays[0], $props[1][0]);</sourceline>
        <sourceline coveredcount="2">                                 $oAnnotation = $result['annotation'];</sourceline>
        <sourceline coveredcount="2">                                 $props[1][0] = $result['properties'];</sourceline>
        <sourceline coveredcount="2">                              }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                              // Add strings and PHP literals to annotation instance</sourceline>
        <sourceline coveredcount="5">                              if(count($props) &amp;&amp; count($props[1]))</sourceline>
        <sourceline coveredcount="5">                                 $oAnnotation = self::parseKeyValuePairs($oAnnotation, $props[1][0]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                              // Push the annotation instance onto the stack</sourceline>
        <sourceline coveredcount="5">                              array_push($annotations, $oAnnotation);</sourceline>
        <sourceline coveredcount="5">                      }</sourceline>
        <sourceline coveredcount="5">               }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">               return $annotations;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Parses an annotations property assignments which contain one or more array values. The</sourceline>
        <sourceline coveredcount="0">       * array is added to the annotation instance according to its property name and the array</sourceline>
        <sourceline coveredcount="0">       * is removed from the properties string.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param Object $oAnnotation An instance of the annotation object</sourceline>
        <sourceline coveredcount="0">       * @param String $arrays The string value containing each of the property assignments</sourceline>
        <sourceline coveredcount="0">       * @param String $properties The annotations properties as they were parsed from the code</sourceline>
        <sourceline coveredcount="0">       * @return stdClass instance containing the annotation instance and truncated properties string</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      private static function parseKeyArrayValuePairs($oAnnotation, $arrays, $properties) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">              foreach($arrays as $array) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                      // Remove arrays from the parsed annotation property/value assignments</sourceline>
        <sourceline coveredcount="2">                      $properties = str_replace($array, '', $properties) . PHP_EOL;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                      // Split the array into key/value</sourceline>
        <sourceline coveredcount="2">                      preg_match('/(.*)=\s*?\{(.*)\},?/', $array, $matches);</sourceline>
        <sourceline coveredcount="2">                      $property = trim($matches[1]);</sourceline>
        <sourceline coveredcount="2">                      $elements = explode(',', trim($matches[2]));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                      // Place each of the annotations array elements into a PHP array</sourceline>
        <sourceline coveredcount="2">                      $value = array();</sourceline>
        <sourceline coveredcount="2">                      foreach($elements as $element) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                          $pos = strpos($element, '=');</sourceline>
        <sourceline coveredcount="2">                          if($pos !== false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                             // Associative array element</sourceline>
        <sourceline coveredcount="2">                             $pieces = explode('=', $element);</sourceline>
        <sourceline coveredcount="2">                             $value[trim($pieces[0])] = self::getQuotedStringValue($pieces[1]);</sourceline>
        <sourceline coveredcount="2">                          }</sourceline>
        <sourceline coveredcount="0">                          else</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                             // Indexed array element</sourceline>
        <sourceline coveredcount="2">                             array_push($value, self::getQuotedStringValue($element));</sourceline>
        <sourceline coveredcount="2">                       }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                       // Set the annotation instance property with the PHP array</sourceline>
        <sourceline coveredcount="2">                       $oAnnotation-&gt;$property = $value;</sourceline>
        <sourceline coveredcount="2">               }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">               return array('annotation' =&gt; $oAnnotation, 'properties' =&gt; $properties);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Parses quoted strings from annotations property VALUE definitons.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $value The value to parse</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      private static function getQuotedStringValue($value) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">              // Single quoted value</sourceline>
        <sourceline coveredcount="2">              $pos = strpos($value, '\'');</sourceline>
        <sourceline coveredcount="2">              if($pos !== false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                 preg_match('/\s?\'+(.*)\'+/', $value, $matches);</sourceline>
        <sourceline coveredcount="1">                 if(count($matches) == 2)</sourceline>
        <sourceline coveredcount="1">                    return $matches[1];</sourceline>
        <sourceline coveredcount="-1">              }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">              // Double quoted value</sourceline>
        <sourceline coveredcount="2">              $pos = strpos($value, '"');</sourceline>
        <sourceline coveredcount="2">              if($pos !== false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                 preg_match('/\s?"+(.*)"+/', $value, $matches);</sourceline>
        <sourceline coveredcount="2">                 if(count($matches) == 2)</sourceline>
        <sourceline coveredcount="2">                    return $matches[1];</sourceline>
        <sourceline coveredcount="-1">              }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">              // Treat unquoted values as objects</sourceline>
        <sourceline coveredcount="0">              // @todo This needs to be examined deeper</sourceline>
        <sourceline coveredcount="0">              //$o = str_replace(' ', '', $value);</sourceline>
        <sourceline coveredcount="-1">              $o = preg_replace('/new/i', '', $value);</sourceline>
        <sourceline coveredcount="-1">              $o = preg_replace('/\(\)/i', '', trim($o));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">              if($o) return new $o;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Parses strings and PHP literals from annotation property definition(s).</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param Object $oAnnotation An instance of the annotation object</sourceline>
        <sourceline coveredcount="0">       * @param String $properties String representation of the annotations property definition(s).</sourceline>
        <sourceline coveredcount="0">       * @return The annotation instance populated according to its definition(s).</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      private static function parseKeyValuePairs($oAnnotation, $properties) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">              $kvpair = explode(',', $properties);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">              foreach($kvpair as $kv) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">                  $pieces = explode('=', $kv);</sourceline>
        <sourceline coveredcount="3">                  preg_match('/(.*)=(.*)/', $kv, $pieces);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">                  if(count($pieces) &lt; 2) continue;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">                     $property = trim($pieces[1]);</sourceline>
        <sourceline coveredcount="3">                     $value = trim($pieces[2]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                     // Single quoted value</sourceline>
        <sourceline coveredcount="3">                     $pos = strpos($value, '\'');</sourceline>
        <sourceline coveredcount="3">                     if($pos !== false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                        preg_match('/^\'(.*)\'/', $value, $matches);</sourceline>
        <sourceline coveredcount="2">                        if(count($matches) == 2) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                           $oAnnotation-&gt;$property = $matches[1];</sourceline>
        <sourceline coveredcount="2">                           continue;</sourceline>
        <sourceline coveredcount="-2">                        }</sourceline>
        <sourceline coveredcount="-1">                     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                     // Double quoted value</sourceline>
        <sourceline coveredcount="3">                     $pos = strpos($value, '"');</sourceline>
        <sourceline coveredcount="3">                     if($pos !== false) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                        preg_match('/^"(.*)"/', $value, $matches);</sourceline>
        <sourceline coveredcount="2">                        if(count($matches) == 2) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                           $oAnnotation-&gt;$property = $matches[1];</sourceline>
        <sourceline coveredcount="2">                           continue;</sourceline>
        <sourceline coveredcount="-2">                        }</sourceline>
        <sourceline coveredcount="-1">                     }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                     // Treat values which are not quoted as PHP literals</sourceline>
        <sourceline coveredcount="3">                     if($property &amp;&amp; $value)</sourceline>
        <sourceline coveredcount="3">                        $oAnnotation-&gt;$property = eval('return ' . $value . ';');</sourceline>
        <sourceline coveredcount="3">               }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">               return $oAnnotation;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Retrieves the raw PHP source code for the file being parsed.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param string $class The class name to return the source code for.</sourceline>
        <sourceline coveredcount="0">       * @return string The raw PHP source code for the file being parsed</sourceline>
        <sourceline coveredcount="0">       * @throws AnnotationException if the source could not be retrieved</sourceline>
        <sourceline coveredcount="0">       * @static</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      private static function getSourceCode($class) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">                try {</sourceline>
        <sourceline coveredcount="20">                      return AgilePHP::getSource($class);</sourceline>
        <sourceline coveredcount="0">                }</sourceline>
        <sourceline coveredcount="-2">                catch(FrameworkException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">                       throw new AnnotationException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">                }</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="AnnotationException" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="AnnotationException.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/annotation/AnnotationException.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.annotation</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Exceptions thrown by the Annotation package</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.annotation</sourceline>
        <sourceline coveredcount="0"> * @throws AnnotationException</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class AnnotationException extends FrameworkException { }</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="AnnotatedProperty" methodcount="6" methodscovered="3" statementcount="39" statementscovered="21" totalcount="45" totalcovered="24">
      <sourcefile name="AnnotatedProperty.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/annotation/AnnotatedProperty.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.annotation</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Extends the PHP ReflectionProperty to provide details about property</sourceline>
        <sourceline coveredcount="0"> * level AgilePHP annotations.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.annotation</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class AnnotatedProperty extends ReflectionProperty {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private $annotations;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Creates a new instance of AnnotatedProperty.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param mixed type $class The name or instance of a class to inspect.</sourceline>
        <sourceline coveredcount="0">       * @param string $property The name of the property to inspect.</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @throws AnnotationException</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function __construct($class, $property) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">             try {</sourceline>
        <sourceline coveredcount="1">                    parent::__construct($class, $property);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                    if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                         $cacheKey = 'AGILEPHP_ANNOTATEDPROPERTY_' . parent::getDeclaringClass()-&gt;getName() . $property;</sourceline>
        <sourceline coveredcount="-1">                         if($cacher-&gt;exists($cacheKey)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                            $this-&gt;annotations = $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">                            return;</sourceline>
        <sourceline coveredcount="-2">                         }</sourceline>
        <sourceline coveredcount="-1">                    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                    $this-&gt;annotations = AnnotationParser::getPropertyAnnotations($this);</sourceline>
        <sourceline coveredcount="1">                    if(isset($cacher)) $cacher-&gt;set($cacheKey, $this-&gt;annotations);</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="1">             catch(ReflectionException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">                   throw new AnnotationException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">             }</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns boolean indicator based on the presence of any annotations.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return True if this property has any annotations, false otherwise.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function isAnnotated() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">              return count($this-&gt;annotations) &amp;&amp; isset($this-&gt;annotations[0]) ? true : false;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Checks the property for the presence of the specified annotation.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $annotation The name of the annotation.</sourceline>
        <sourceline coveredcount="0">       * @return True if the annotation is present, false otherwise.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function hasAnnotation($annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             foreach($this-&gt;annotations as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                 $class = new ReflectionClass($annote);</sourceline>
        <sourceline coveredcount="-1">                 if($class-&gt;getName() == $annotation)</sourceline>
        <sourceline coveredcount="-1">                    return true;</sourceline>
        <sourceline coveredcount="-1">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             return false;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns all property annotations. If a name is specified</sourceline>
        <sourceline coveredcount="0">       * only annotations which match the specified name will be returned,</sourceline>
        <sourceline coveredcount="0">       * otherwise all annotations are returned.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $name Optional name of the annotation to filter on. Default is return</sourceline>
        <sourceline coveredcount="0">       *                      all annotations.</sourceline>
        <sourceline coveredcount="0">       * @return An array of property level annotations or false of no annotations could</sourceline>
        <sourceline coveredcount="0">       *          be found.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getAnnotations($name = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             if($name != null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                $annotations = array();</sourceline>
        <sourceline coveredcount="-1">                foreach($this-&gt;annotations as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                    if($annote instanceof $name)</sourceline>
        <sourceline coveredcount="-1">                      array_push($annotations, $annote);</sourceline>
        <sourceline coveredcount="-1">                }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                if(!count($annotations)) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                return $annotations;</sourceline>
        <sourceline coveredcount="-2">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             return $this-&gt;annotations;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Gets an annotation instance by name. If the named annotation is found more</sourceline>
        <sourceline coveredcount="0">       * than once, an array of annotations are returned.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $name The name of the annotation</sourceline>
        <sourceline coveredcount="0">       * @return The annotation instance or false if the annotation was not found</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getAnnotation($annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             $annotations = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             foreach($this-&gt;annotations as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                 $class = new ReflectionClass($annote);</sourceline>
        <sourceline coveredcount="1">                 if($class-&gt;getName() == $annotation)</sourceline>
        <sourceline coveredcount="1">                    array_push($annotations, $annote);</sourceline>
        <sourceline coveredcount="1">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             if(!count($annotations)) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             return (count($annotations) &gt; 1) ? $annotations : $annotations[0];</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Gets the parent class as an AnnotatedClass</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return AnnotatedClass</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getDeclaringClass() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">             $class = parent::getDeclaringClass();</sourceline>
        <sourceline coveredcount="1">             return new AnnotatedClass($class-&gt;getName());</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
    <class name="AnnotatedMethod" methodcount="7" methodscovered="5" statementcount="42" statementscovered="36" totalcount="49" totalcovered="41">
      <sourcefile name="AnnotatedMethod.php" sourcefile="/storage/Apps/eclipse-galileo/workspace/AgilePHP/src/annotation/AnnotatedMethod.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * AgilePHP Framework :: The Rapid "for developers" PHP5 framework</sourceline>
        <sourceline coveredcount="0"> * Copyright (C) 2009-2010 Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is free software: you can redistribute it and/or modify</sourceline>
        <sourceline coveredcount="0"> * it under the terms of the GNU General Public License as published by</sourceline>
        <sourceline coveredcount="0"> * the Free Software Foundation, either version 3 of the License, or</sourceline>
        <sourceline coveredcount="0"> * (at your option) any later version.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * This program is distributed in the hope that it will be useful,</sourceline>
        <sourceline coveredcount="0"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</sourceline>
        <sourceline coveredcount="0"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</sourceline>
        <sourceline coveredcount="0"> * GNU General Public License for more details.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * You should have received a copy of the GNU General Public License</sourceline>
        <sourceline coveredcount="0"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.annotation</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/**</sourceline>
        <sourceline coveredcount="0"> * Extends the PHP ReflectioMethod to provide details about method level</sourceline>
        <sourceline coveredcount="0"> * AgilePHP annotations.</sourceline>
        <sourceline coveredcount="0"> *</sourceline>
        <sourceline coveredcount="0"> * @author Jeremy Hahn</sourceline>
        <sourceline coveredcount="0"> * @copyright Make A Byte, inc</sourceline>
        <sourceline coveredcount="0"> * @package com.makeabyte.agilephp.annotation</sourceline>
        <sourceline coveredcount="0"> */</sourceline>
        <sourceline coveredcount="0" startclass="1">class AnnotatedMethod extends ReflectionMethod {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      private $annotations = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Creates a new instance of AnnotatedMethod. Uses AgilePHP CacheProvider</sourceline>
        <sourceline coveredcount="0">       * if enabled.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param mixed $class The name or instance of a class to inspect</sourceline>
        <sourceline coveredcount="0">       * @param String $method The name of the method to inspect.</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       * @throws AnnotationException</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function __construct($class, $method) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">               try {</sourceline>
        <sourceline coveredcount="27">                      parent::__construct($class, $method);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="27">                      if($cacher = AgilePHP::getCacher()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                         $cacheKey = 'AGILEPHP_ANNOTATEDMETHOD_' . parent::getDeclaringClass()-&gt;getName() . $method;</sourceline>
        <sourceline coveredcount="-1">                         if($cacher-&gt;exists($cacheKey)) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">                            $this-&gt;annotations = $cacher-&gt;get($cacheKey);</sourceline>
        <sourceline coveredcount="-1">                            return;</sourceline>
        <sourceline coveredcount="-2">                         }</sourceline>
        <sourceline coveredcount="-1">                      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="27">                      $this-&gt;annotations = AnnotationParser::getMethodAnnotations($this);</sourceline>
        <sourceline coveredcount="27">                      if(isset($cacher)) $cacher-&gt;set($cacheKey, $this-&gt;annotations);</sourceline>
        <sourceline coveredcount="0">               }</sourceline>
        <sourceline coveredcount="27">               catch(ReflectionException $e) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">                     throw new AnnotationException($e-&gt;getMessage(), $e-&gt;getCode());</sourceline>
        <sourceline coveredcount="0">               }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Prevents "Failed to retrieve the reflection object" when unserialized</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return void</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function __wakeup() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">             parent::__construct($this-&gt;class, $this-&gt;name);</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns boolean indicator based on the presence of any method level annotations.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return True if this method has any annotations, false otherwise.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function isAnnotated() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="27">             return count($this-&gt;annotations) &amp;&amp; isset($this-&gt;annotations[0]) ? true : false;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Checks the method for the presence of the specified annotation.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $annotation The name of the annotation.</sourceline>
        <sourceline coveredcount="0">       * @return True if the annotation is present, false otherwise.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function hasAnnotation($annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="26">             if($this-&gt;isAnnotated()) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="26">                foreach($this-&gt;annotations as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="26">                    $class = new ReflectionClass($annote);</sourceline>
        <sourceline coveredcount="26">                    if($class-&gt;getName() == $annotation)</sourceline>
        <sourceline coveredcount="26">                       return true;</sourceline>
        <sourceline coveredcount="25">                }</sourceline>
        <sourceline coveredcount="25">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="25">             return false;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Returns all method annotations. If a name is specified</sourceline>
        <sourceline coveredcount="0">       * only annotations which match the specified name will be returned,</sourceline>
        <sourceline coveredcount="0">       * otherwise all annotations are returned.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $name Optional name of the annotation to filter on. Default is return</sourceline>
        <sourceline coveredcount="0">       *                      all annotations.</sourceline>
        <sourceline coveredcount="0">       * @return An array of method level annotations or false of no annotations could</sourceline>
        <sourceline coveredcount="0">       *          be found.</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getAnnotations($name = null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">             if($name != null) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                $annotations = array();</sourceline>
        <sourceline coveredcount="1">                foreach($this-&gt;annotations as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                    if($annote instanceof $name)</sourceline>
        <sourceline coveredcount="1">                       array_push($annotations, $annote);</sourceline>
        <sourceline coveredcount="1">                }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                if(!count($annotations)) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">                return $annotations;</sourceline>
        <sourceline coveredcount="-2">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">             return $this-&gt;annotations;</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Gets an annotation instance by name. If the named annotation is found more</sourceline>
        <sourceline coveredcount="0">       * than once, an array of annotations are returned.</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @param String $name The name of the annotation</sourceline>
        <sourceline coveredcount="0">       * @return The annotation instance or false if the annotation was not found</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getAnnotation($annotation) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">             $annotations = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">             foreach($this-&gt;annotations as $annote) {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">                 $class = new ReflectionClass($annote);</sourceline>
        <sourceline coveredcount="2">                 if($class-&gt;getName() == $annotation)</sourceline>
        <sourceline coveredcount="2">                    array_push($annotations, $annote);</sourceline>
        <sourceline coveredcount="2">             }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">             if(!count($annotations)) return false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">             return (count($annotations) &gt; 1) ? $annotations : $annotations[0];</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">      /**</sourceline>
        <sourceline coveredcount="0">       * Gets the parent class as an AnnotatedClass</sourceline>
        <sourceline coveredcount="0">       *</sourceline>
        <sourceline coveredcount="0">       * @return AnnotatedClass</sourceline>
        <sourceline coveredcount="0">       */</sourceline>
        <sourceline coveredcount="0">      public function getDeclaringClass() {</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="27">             $class = parent::getDeclaringClass();</sourceline>
        <sourceline coveredcount="27">             return new AnnotatedClass($class-&gt;getName());</sourceline>
        <sourceline coveredcount="0">      }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">?&gt;</sourceline>
      </sourcefile>
    </class>
  </package>
</snapshot>
