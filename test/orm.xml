<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE orm SYSTEM "../src/orm/orm.dtd">
<orm>
	<database name="agilephp_test" type="mysql" hostname="localhost" username="php" password="php007">

		<table name="inventory" model="Inventory" display="Inventory" description="Product inventory">
			<column name="id" visible="false" type="integer" primaryKey="true" autoIncrement="true" validator="NumberValidator"/>
			<column name="name" type="varchar" length="255" required="true" validator="StringValidator"/>
			<column name="description" type="varchar" length="255" required="true" validator="StringValidator"/>
			<column name="price" type="decimal" required="true" validator="FloatValidator"/>
			<column name="category" type="varchar" length="255" required="true" validator="StringValidator"/>
			<column name="image" type="blob" required="true"/>
			<column name="video" type="blob" />
			<persist>INSERT INTO inventory(name, description, price, category, image, video) VALUES(?,?,?,?,?,?)</persist>
		</table>

		<table name="mailing" model="Mailing" display="Mailing List" description="People on your mailing list">
			<column name="id" type="integer" visible="false" required="true" primaryKey="true" autoIncrement="true" validator="NumberValidator"/>
			<column name="name" type="varchar" length="150" required="true" description="Name of recipient" validator="StringValidator"/>
			<column name="email" type="varchar" length="150" required="true" description="Email address of recipient" validator="EmailValidator"/>
			<column name="enabled" type="boolean" description="Opt In/Out Flag" validator="BooleanValidator" renderer="YesNoRenderer" transformer="YesNoToBoolean"/>
		</table>

		<table name="users" isIdentity="true" display="Users" model="User" description="Users within the web application">
			<column name="username" type="varchar" length="150" primaryKey="true" required="true" validator="StringValidator"/>
			<column name="password" type="varchar" length="255" required="true" validator="PasswordValidator"/>
			<column name="email" type="varchar" display="Email" length="255" required="true" validator="StringValidator"/>
			<column name="created" type="datetime" required="true" validator="DateValidator"/>
			<column name="last_login" property="lastLogin" display="Last Login" type="datetime" validator="DateValidator"/>
			<column name="roleId" property="Role" type="int" length="10" sortable="false">
				<foreignKey name="FK_UserRoles" type="many-to-one" onDelete="SET_NULL" onUpdate="CASCADE"
	  							 table="roles" column="id" controller="RoleController" select="name" cascade="all"/>
			</column>
	  		<column name="enabled" type="boolean" validator="BooleanValidator" renderer="YesNoRenderer" transformer="YesNoToBoolean"/>
			<persist>INSERT INTO users(username, password, email, created, last_login, roleId, enabled) VALUES(?,?,?,?,?,?,?)</persist>
			<merge>UPDATE users SET password=?, email=?, created=?, last_login=?, roleId=?, enabled=? WHERE username=?</merge>
			<delete>DELETE FROM users WHERE username=?</delete>
<!--			<get>SELECT username, password, email, created, last_login, roleId, enabled FROM users WHERE username=?</get>-->
			<find>SELECT username, password, email, created, last_login, roleId, enabled FROM users</find>
	 	</table>

	 	<table name="roles" display="Roles" model="Role" description="Roles within the web application">
	 	    <column name="id" type="int" length="10" primaryKey="true" autoIncrement="true" validator="NumberValidator" visible="false"/>
			<column name="name" type="varchar" length="25" required="true" validator="StringValidator"/>
			<column name="description" type="text" validator="StringValidator"/>
			<persist>INSERT INTO roles(name, description) VALUES(?,?)</persist>
			<merge>UPDATE roles SET name=?, description=? WHERE id=?</merge>
			<delete>DELETE FROM roles WHERE id=?</delete>
			<get>SELECT id, name, description FROM roles WHERE id=?</get>
			<find>SELECT id, name, description FROM roles</find>
	 	</table>

		<!-- AgilePHP Session -->
		<table name="sessions" display="Session" isSession="true" model="Session" description="User sessions">
			<column name="id" type="varchar" length="21" primaryKey="true" description="Unique ID" validator="StringValidator"/>
			<column name="data" type="text" description="Name of recipient" validator="StringValidator"/>
			<column name="created" type="timestamp" default="CURRENT_TIMESTAMP" validator="DateValidator"/>
		</table>

		<!-- "Standalone" Stored Procedures -->

		<procedure name="authenticate" model="SPauthenticate" description="Stored procedure responsible for authentication">
			<parameter name="userid" property="userId" mode="IN"/>
			<parameter name="passwd" mode="IN"/>
			<parameter name="authenticate" property="result" mode="OUT"/>
		</procedure>

	    <procedure name="getroles" model="SPRole" description="Stored procedure responsible for getting all roles">
			<parameter name="id" mode="OUT"/>
			<parameter name="name" mode="OUT"/>
			<parameter name="description" mode="OUT"/>
			<!-- Not needed since its the default -->
            <!-- <find references="getroles"/> -->
		</procedure>

		<procedure name="addrole" model="Role" description="Stored procedure responsible for adding a new role">
			<parameter name="id" mode="OUT"/>
			<parameter name="name" mode="IN"/>
			<parameter name="description" mode="IN"/>
		</procedure>

		<procedure name="updaterole" model="Role" description="Stored procedure responsible for updating a role">
			<parameter name="id" mode="IN"/>
			<parameter name="name" mode="IN"/>
			<parameter name="description" mode="IN"/>
		</procedure>

		<procedure name="deleterole" model="Role" description="Stored procedure responsible for deleting a role">
			<parameter name="id" mode="IN"/>
		</procedure>

		<procedure name="getrole" model="Role" description="Stored procedure responsible for getting a specified role">
			<parameter name="id" mode="INOUT"/>
			<parameter name="name" mode="OUT"/>
			<parameter name="description" mode="OUT"/>
		</procedure>

		<!-- "Relational" Stored Procedures -->

		<procedure name="getusers" model="User" description="Stored procedure responsible for getting all users">
			<parameter name="username" mode="OUT"/>
			<parameter name="password" mode="OUT"/>
			<parameter name="email" mode="OUT"/>
			<parameter name="created" mode="OUT"/>
			<parameter name="last_login" property="lastLogin" mode="OUT"/>
			<parameter name="roleId" property="role" mode="OUT" references="getrole"/>
			<parameter name="enabled" mode="OUT"/>
		</procedure>

        <procedure name="getuser" model="User" description="Stored procedure responsible for getting the specified user">
			<parameter name="username" mode="INOUT"/>
			<parameter name="password" mode="OUT"/>
			<parameter name="email" mode="OUT"/>
			<parameter name="created" mode="OUT"/>
			<parameter name="last_login" property="lastLogin" mode="OUT"/>
			<parameter name="roleId" property="role" mode="OUT" references="getrole"/>
			<parameter name="enabled" mode="OUT"/>
		</procedure>

	</database>
</orm>